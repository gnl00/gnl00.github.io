import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.519d889f.js";const D=JSON.parse('{"title":"Spring","description":"Spring IOC & 事务","frontmatter":{"description":"Spring IOC & 事务","tag":["Spring","后端"]},"headers":[],"relativePath":"posts/be/Spring/IOC&事务/IOC&事务.md","filePath":"posts/be/Spring/IOC&事务/IOC&事务.md","lastUpdated":1699262313000}'),p={name:"posts/be/Spring/IOC&事务/IOC&事务.md"},o=l(`<h1 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-label="Permalink to &quot;Spring&quot;">​</a></h1><h2 id="ioc" tabindex="-1">IOC <a class="header-anchor" href="#ioc" aria-label="Permalink to &quot;IOC&quot;">​</a></h2><br><h3 id="bean-状态" tabindex="-1">Bean 状态 <a class="header-anchor" href="#bean-状态" aria-label="Permalink to &quot;Bean 状态&quot;">​</a></h3><blockquote><p>Bean 有无状态和有状态之分：</p><ul><li>有状态是指在 bean 的生命周期内维护了某些状态变量，并且其他地方获取该 bean 时，仍能够访问到之前保存的状态变量数据；</li><li>无状态是指在 bean 的生命周期中的行为不受先前操作和状态的影响，每次操作都是独立的。</li></ul><br><p>Spring 的 IOC 容器中存在多种不同生命周期的 bean，singleton、prototype、request、session。</p><p>单例 bean 能被所有能获取到 IOC 容器的地方访问到，bean 本身是共享的。如果单例 bean 是无状态的，无任何成员变量，不保存任何状态，则说明是线程安全的，比如 dao 层的类；如果单例 bean 是有状态的，在并发环境下就需要注意线程安全问题。</p></blockquote><br><h2 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h2><h3 id="代理实现" tabindex="-1">代理实现 <a class="header-anchor" href="#代理实现" aria-label="Permalink to &quot;代理实现&quot;">​</a></h3><h4 id="jdk" tabindex="-1">JDK <a class="header-anchor" href="#jdk" aria-label="Permalink to &quot;JDK&quot;">​</a></h4><blockquote><p>JDK 动态代理由 JDK 提供的 Proxy 类实现，动态代理类是在运行时生成指定接口的代理类</p></blockquote><h4 id="cglib" tabindex="-1">CGLib <a class="header-anchor" href="#cglib" aria-label="Permalink to &quot;CGLib&quot;">​</a></h4><br><h2 id="事务管理" tabindex="-1">事务管理 <a class="header-anchor" href="#事务管理" aria-label="Permalink to &quot;事务管理&quot;">​</a></h2><h3 id="事务接口及抽象类" tabindex="-1">事务接口及抽象类 <a class="header-anchor" href="#事务接口及抽象类" aria-label="Permalink to &quot;事务接口及抽象类&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Spring 事务的顶层父类，用来管理 Spring 事务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionManager</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Spring 事务框架中最基础/重要的接口</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PlatformTransactionManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionManager</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法根据参数 TransactionDefinition 返回一个 TransactionStatus 对象</span></span>
<span class="line"><span style="color:#6A737D;">     * TransactionStatus 对象就可以看成是一个事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 返回的 TransactionStatus 可能是一个新事务或者已存在的事务（如果当前调用栈中存在事务）</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数 TransactionDefinition 描述传播行为、隔离级别、超时等</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法会根据参数对事务传播行为的定义，返回一个当前处于活跃状态的事务（如果存在），或创建一个新的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数对事务隔离级别或者超时时间的设置，会忽略已存在的事务，只作用于新建的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 并非所有事务定义设置都会受到每个事务管理器的支持，在遇到不受支持的设置时事务管理器会抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    TransactionStatus </span><span style="color:#B392F0;">getTransaction</span><span style="color:#E1E4E8;">(TransactionDefinition </span><span style="color:#FFAB70;">definition</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> TransactionException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> TransactionException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> TransactionException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 事务定义，用来定制事务的传播行为、隔离级别和超时等操作</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionDefinition</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Spring 事务的隔离级别与 JDBC 定义的隔离级别对应</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_DEFAULT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 脏读：读取到另一个事务已修改但未提交的数据</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 不可重复度：当事务 A 首先读取数据，事务 B 也读取同一个数据，并将数据修改，而后事务 A 再次读取就会得到和第一次读取不一样的结果。主要在修改场景发生</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 幻读：一个事务读取所有满足 WHERE 条件的行，第二个事务插入一条满足 WHERE 条件的记录，第一个事务使用相同条件重新读取，在第二次读取中读取出额外的 &quot;幻影 &quot;记录。主要在插入/删除场景下发生</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 读未提交</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 可读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 存在脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_READ_UNCOMMITTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_UNCOMMITTED;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 读已提交</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 解决脏读，存在不可重复度/幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_READ_COMMITTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_COMMITTED;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 可重复度</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度，存在幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_REPEATABLE_READ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_REPEATABLE_READ;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 可序列化/串行化，事务串行化执行，一次只允许一个事务操作</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ISOLATION_SERIALIZABLE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_SERIALIZABLE;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 以下为 Spring 事务管理支持的传播行为，一共 7 种</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果事务不存在，则新建</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 是 Spring 事务的默认传播行为，通常定义事务同步范围</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_REQUIRED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 如果当前存在事务，则加入；如果事务不存在，则以无事务的方式运行</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_SUPPORTS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 如果当前存在事务，则加入；如果不存在则抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_MANDATORY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 如果存在事务，则暂停当前事务，创建新事务</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_REQUIRES_NEW </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 总是以无事务的方式运行</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_NOT_SUPPORTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 如果当前存在事务则抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_NEVER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 如果当前存在事务，则在嵌套事务中执行，否则表现为 PROPAGATION_REQUIRED</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PROPAGATION_NESTED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 是否将事务优化为只读事务，只读标志适用于任何事务隔离级别</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isReadOnly</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * PlatformTransactionManager 的抽象实现类，它预先实现了定义的传播行为，并负责处理事务的同步。</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果需要自定义事务管理框架，继承 AbstractPlatformTransactionManager 即可。子类只需要关心事务的开始，暂停，恢复和提交。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractPlatformTransactionManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PlatformTransactionManager</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Spring 事务的顶层父类，用来管理 Spring 事务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionManager</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Spring 事务框架中最基础/重要的接口</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PlatformTransactionManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionManager</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法根据参数 TransactionDefinition 返回一个 TransactionStatus 对象</span></span>
<span class="line"><span style="color:#6A737D;">     * TransactionStatus 对象就可以看成是一个事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 返回的 TransactionStatus 可能是一个新事务或者已存在的事务（如果当前调用栈中存在事务）</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数 TransactionDefinition 描述传播行为、隔离级别、超时等</span></span>
<span class="line"><span style="color:#6A737D;">     * 此方法会根据参数对事务传播行为的定义，返回一个当前处于活跃状态的事务（如果存在），或创建一个新的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数对事务隔离级别或者超时时间的设置，会忽略已存在的事务，只作用于新建的事务</span></span>
<span class="line"><span style="color:#6A737D;">     * 并非所有事务定义设置都会受到每个事务管理器的支持，在遇到不受支持的设置时事务管理器会抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    TransactionStatus </span><span style="color:#6F42C1;">getTransaction</span><span style="color:#24292E;">(TransactionDefinition </span><span style="color:#E36209;">definition</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> TransactionException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> TransactionException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> TransactionException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 事务定义，用来定制事务的传播行为、隔离级别和超时等操作</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionDefinition</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Spring 事务的隔离级别与 JDBC 定义的隔离级别对应</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_DEFAULT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 脏读：读取到另一个事务已修改但未提交的数据</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 不可重复度：当事务 A 首先读取数据，事务 B 也读取同一个数据，并将数据修改，而后事务 A 再次读取就会得到和第一次读取不一样的结果。主要在修改场景发生</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 幻读：一个事务读取所有满足 WHERE 条件的行，第二个事务插入一条满足 WHERE 条件的记录，第一个事务使用相同条件重新读取，在第二次读取中读取出额外的 &quot;幻影 &quot;记录。主要在插入/删除场景下发生</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 读未提交</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 可读取到另一个事务修改但未提交的数据</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 存在脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_READ_UNCOMMITTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_UNCOMMITTED;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 读已提交</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 解决脏读，存在不可重复度/幻读</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_READ_COMMITTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_READ_COMMITTED;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 可重复度</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度，存在幻读</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_REPEATABLE_READ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_REPEATABLE_READ;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 可序列化/串行化，事务串行化执行，一次只允许一个事务操作</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 解决脏读/不可重复度/幻读</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ISOLATION_SERIALIZABLE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// same as java.sql.Connection.TRANSACTION_SERIALIZABLE;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 以下为 Spring 事务管理支持的传播行为，一共 7 种</span></span>
<span class="line"><span style="color:#6A737D;">  	/**</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 如果当前存在事务，则加入；如果事务不存在，则新建</span></span>
<span class="line"><span style="color:#6A737D;">  	 * 是 Spring 事务的默认传播行为，通常定义事务同步范围</span></span>
<span class="line"><span style="color:#6A737D;">  	 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_REQUIRED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 如果当前存在事务，则加入；如果事务不存在，则以无事务的方式运行</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_SUPPORTS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 如果当前存在事务，则加入；如果不存在则抛出异常</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_MANDATORY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 如果存在事务，则暂停当前事务，创建新事务</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_REQUIRES_NEW </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 总是以无事务的方式运行</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_NOT_SUPPORTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 如果当前存在事务则抛出异常</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_NEVER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 如果当前存在事务，则在嵌套事务中执行，否则表现为 PROPAGATION_REQUIRED</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PROPAGATION_NESTED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 是否将事务优化为只读事务，只读标志适用于任何事务隔离级别</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isReadOnly</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * PlatformTransactionManager 的抽象实现类，它预先实现了定义的传播行为，并负责处理事务的同步。</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果需要自定义事务管理框架，继承 AbstractPlatformTransactionManager 即可。子类只需要关心事务的开始，暂停，恢复和提交。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractPlatformTransactionManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PlatformTransactionManager</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {}</span></span></code></pre></div><br><p><strong>事务传播行为</strong></p><table><thead><tr><th>传播行为</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前存在事务，则加入；如果事务不存在，则新建</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>如果当前存在事务，则加入；如果事务不存在，则以无事务的方式运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>如果当前存在事务，则加入；如果不存在则抛出异常</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>如果存在事务，则暂停当前事务，创建新事务</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>总是以无事务的方式运行</td></tr><tr><td>PROPAGATION_NEVER</td><td>如果当前存在事务则抛出异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在事务中创建事务，并在嵌套事务中执行，否则表现为 PROPAGATION_REQUIRED</td></tr></tbody></table><h3 id="声明式事务" tabindex="-1">声明式事务 <a class="header-anchor" href="#声明式事务" aria-label="Permalink to &quot;声明式事务&quot;">​</a></h3><h4 id="开启声明式事务" tabindex="-1">开启声明式事务 <a class="header-anchor" href="#开启声明式事务" aria-label="Permalink to &quot;开启声明式事务&quot;">​</a></h4><p>Spring 的声明式事务支持需手动开启，注解驱动使用 <code>@EnableTransactionManagement</code> 标注在 Spring 配置类上；XML 开发则在配置文件加上 <code>&lt;tx:annotation-driven/&gt;</code> 。</p><p>使用 @EnableTransactionManagement 相对来说更加灵活，因为它不仅可以根据名称还能根据类型将 TransactionManager 加载到 IOC 容器中。</p><p>@EnableTransactionManagement 和 <code>&lt;tx:annotation-driven/&gt;</code> 只会扫描和它们自己相同的应用上下文内的 <code>@Transactional</code> 注解，也就是说，如果在 DispatcherServlet 的 WebApplicationContext 中标注 @EnableTransactionManagement，它只会扫描和 Controller 同级别下的 @Transactional。</p><h4 id="transactional" tabindex="-1">@Transactional <a class="header-anchor" href="#transactional" aria-label="Permalink to &quot;@Transactional&quot;">​</a></h4><p><code>@Transactional</code> 注解可以标注在类或者 <code>public</code> 方法上，如果标注在 <code>protected/private</code> 方法或者近包内可见的方法上不会报错，但是在这些地方 Spring 事务不会生效。</p><p>如果在 Spring 配置类上标注 <code>@EnableTransactionManagement</code>，可以通过注入自定义的 <code>TransactionAttributeSource</code> 来让事务可以在类中的非 <code>public</code> 方法中生效。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * enable support for protected and package-private @Transactional methods in</span></span>
<span class="line"><span style="color:#6A737D;"> * class-based proxies.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">TransactionAttributeSource </span><span style="color:#B392F0;">transactionAttributeSource</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnnotationTransactionAttributeSource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * enable support for protected and package-private @Transactional methods in</span></span>
<span class="line"><span style="color:#6A737D;"> * class-based proxies.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">TransactionAttributeSource </span><span style="color:#6F42C1;">transactionAttributeSource</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationTransactionAttributeSource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>类和方法的优先级</strong></p><p>@Transactional 注解可以同时标注在类和方法上，但是标注在方法上的优先级会比标注在类上的优先级高。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// (readOnly = true) 表示该事务从事的操作是读操作</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">readOnly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultFooService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FooService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#B392F0;">getFoo</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">fooName</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 标注在方法上的优先级大于类上</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">readOnly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateFoo</span><span style="color:#E1E4E8;">(Foo </span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// (readOnly = true) 表示该事务从事的操作是读操作</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">readOnly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultFooService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FooService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Foo </span><span style="color:#6F42C1;">getFoo</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">fooName</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 标注在方法上的优先级大于类上</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">readOnly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateFoo</span><span style="color:#24292E;">(Foo </span><span style="color:#E36209;">foo</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>属性设置</strong></p><ul><li><code>propagation</code> default <code>Propagation.REQUIRED</code></li><li><code>isolation</code> default <code>Isolation.DEFAULT</code></li><li><code>timeout</code> default <code>TransactionDefinition.TIMEOUT_DEFAULT = -1</code></li><li><code>readOnly</code> 是否是只读事务 default <code>false</code></li><li><code>rollbackFor </code> Any <code>RuntimeException</code> or <code>Error</code> triggers rollback, and any checked <code>Exception</code> does not.</li><li><code>noRollbackFor</code></li></ul><h3 id="编程式事务" tabindex="-1">编程式事务 <a class="header-anchor" href="#编程式事务" aria-label="Permalink to &quot;编程式事务&quot;">​</a></h3><blockquote><p>因为开发中用的大多都是声明式事务，编程式事务做了解即可</p></blockquote><h4 id="transactiontemplate" tabindex="-1">TransactionTemplate <a class="header-anchor" href="#transactiontemplate" aria-label="Permalink to &quot;TransactionTemplate&quot;">​</a></h4><p>类似 JdbcTemplate，由 Spring 提供的操作事务的模版方法类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// single TransactionTemplate shared amongst all methods in this instance</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// use constructor-injection to supply the PlatformTransactionManager</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleService</span><span style="color:#E1E4E8;">(PlatformTransactionManager </span><span style="color:#FFAB70;">transactionManager</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.transactionTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionTemplate</span><span style="color:#E1E4E8;">(transactionManager);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// with result</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">someServiceMethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionCallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// the code in this method runs in a transactional context</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">doInTransaction</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">updateOperation1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultOfUpdateOperation2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// without result</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">methodWithoutResult</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionCallbackWithoutResult</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doInTransactionWithoutResult</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">updateOperation1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">updateOperation2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// with rollback</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">methodWithoutRollback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionCallbackWithoutResult</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doInTransactionWithoutResult</span><span style="color:#E1E4E8;">(TransactionStatus </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">updateOperation1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">updateOperation2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SomeBusinessException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                		status.</span><span style="color:#B392F0;">setRollbackOnly</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Service</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// single TransactionTemplate shared amongst all methods in this instance</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// use constructor-injection to supply the PlatformTransactionManager</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleService</span><span style="color:#24292E;">(PlatformTransactionManager </span><span style="color:#E36209;">transactionManager</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.transactionTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionTemplate</span><span style="color:#24292E;">(transactionManager);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// with result</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">someServiceMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionCallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// the code in this method runs in a transactional context</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">doInTransaction</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">updateOperation1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultOfUpdateOperation2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// without result</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">methodWithoutResult</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionCallbackWithoutResult</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doInTransactionWithoutResult</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">updateOperation1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">updateOperation2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// with rollback</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">methodWithoutRollback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionCallbackWithoutResult</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doInTransactionWithoutResult</span><span style="color:#24292E;">(TransactionStatus </span><span style="color:#E36209;">status</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">updateOperation1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">updateOperation2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SomeBusinessException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                		status.</span><span style="color:#6F42C1;">setRollbackOnly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="transactionmanager" tabindex="-1">TransactionManager <a class="header-anchor" href="#transactionmanager" aria-label="Permalink to &quot;TransactionManager&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DefaultTransactionDefinition def </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultTransactionDefinition</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 定义事务属性，如事务名，传播行为，隔离级别等</span></span>
<span class="line"><span style="color:#E1E4E8;">def.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SomeTxName&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">def.</span><span style="color:#B392F0;">setPropagationBehavior</span><span style="color:#E1E4E8;">(TransactionDefinition.PROPAGATION_REQUIRED);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TransactionManager txManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdbcTransactionManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">TransactionStatus status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> txManager.</span><span style="color:#B392F0;">getTransaction</span><span style="color:#E1E4E8;">(def);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// put your business logic here</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (MyException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    txManager.</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(status);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">txManager.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(status);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DefaultTransactionDefinition def </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultTransactionDefinition</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 定义事务属性，如事务名，传播行为，隔离级别等</span></span>
<span class="line"><span style="color:#24292E;">def.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SomeTxName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">def.</span><span style="color:#6F42C1;">setPropagationBehavior</span><span style="color:#24292E;">(TransactionDefinition.PROPAGATION_REQUIRED);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">TransactionManager txManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdbcTransactionManager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">TransactionStatus status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> txManager.</span><span style="color:#6F42C1;">getTransaction</span><span style="color:#24292E;">(def);</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// put your business logic here</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (MyException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    txManager.</span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(status);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">txManager.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(status);</span></span></code></pre></div><p><strong>声明式事务和编程式事务如何选择</strong></p><ul><li>如果只是在代码中进行小规模的事务操作，选择编程式，比如 <code>TransactionTemplate</code>；</li><li>如果存在大量事务操作，优先选择声明式事务，操作简单，并且还把事务逻辑和业务逻辑分离开，利于维护；</li><li>如果使用的是 Spring 框架，推荐使用声明式事务。</li></ul><br><h3 id="回滚规则" tabindex="-1">回滚规则 <a class="header-anchor" href="#回滚规则" aria-label="Permalink to &quot;回滚规则&quot;">​</a></h3><p>Spring 事务只会在遇到运行时异常和未受检查异常时会滚，也就是说只有在遇到 <code>RuntimeException</code> 及其之类或者 <code>Error</code> 及其之类的时候才会回滚。事务遇到受检查异常时，不会回滚，而是将其捕获并抛出。</p><p>但仍然可以通过指定回滚规则，精确配置哪些异常类型会将事务标记为回滚，包括已检查的异常。</p><br><h3 id="事务失效" tabindex="-1">事务失效 <a class="header-anchor" href="#事务失效" aria-label="Permalink to &quot;事务失效&quot;">​</a></h3><p>1、注解 <code>@Transactional</code> 修饰的类非 Spring 容器对象；</p><p>2、用 <code>@Transactional</code> 修饰方法，且该方法被类内部方法调用；</p><p>3、注解 <code>@Transactional</code> 修饰的方法非 public 修饰；</p><p>4、代码中出现的异常被 catch 代码块捕获，而不是被 Spring 事务框架捕获;</p><p>5、Spring 事务 <code>rollback</code> 策略默认是 <code>RuntimeException</code> 及其子类和 <code>Error</code> 及其之类，其他情况如果未提前定义则事务失效；</p><p>6、数据库不支持事务。</p><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction" target="_blank" rel="noreferrer">spring#transaction</a></p>`,56),e=[o];function t(c,r,E,y,i,A){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{D as __pageData,F as default};

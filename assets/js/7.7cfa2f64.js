(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{426:function(s,t,a){s.exports=a.p+"assets/img/image-20210528110958956.3d88708c.png"},427:function(s,t,a){s.exports=a.p+"assets/img/image-20210810141933541.28f6299e.png"},428:function(s,t,a){s.exports=a.p+"assets/img/image-20210810142733895.9213ae49.png"},455:function(s,t,a){"use strict";a.r(t);var n=a(31),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"redis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[s._v("#")]),s._v(" Redis")]),s._v(" "),n("h2",{attrs:{id:"什么是redis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是redis"}},[s._v("#")]),s._v(" 什么是Redis")]),s._v(" "),n("p",[n("strong",[s._v("Redis是单线程的吗？")])]),s._v(" "),n("p",[s._v("不完全正确，Redis是一个Key-Value的非关系型数据库，我们所理解的Redis单线程主要是指网络IO和K-V的读写是由一个主线程来完成的。但Redis的其他功能，比如说持久化、异步删除、集群数据同步，其实是开启了额外的线程来完成的")]),s._v(" "),n("p",[n("strong",[s._v("优点/Redis单线程为什么还能这么快")])]),s._v(" "),n("p",[s._v("1、Redis 完全基于内存，绝大部分请求是纯粹的内存操作，非常迅速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度是 O(1)")]),s._v(" "),n("p",[s._v("2、数据结构简单，对数据操作也简单")]),s._v(" "),n("p",[s._v("Redis 的数据结构是有特殊设计的，比如 String 类型采用 sds 数据结构来存储。String的空间不够时，总是尝试去申请更多的内存；String空间多余的时候，不把多余的空间还给系统，而是会将多余的空间维护起来。通过这种方式来减少内存的申请，可以更快实现对数据的操作。有序集合 zset 采用的跳跃表，获取数据时可以通过不同的层次间跳跃来达到加速访问节点的效果")]),s._v(" "),n("p",[s._v("3、Redis 的主体模式还是单线程的，避免了不必要的上下文切换和竞争条件，不存在多线程导致的 CPU 切换。不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗。官方也解释到：Redis 的性能不在 CPU，而在内存。")]),s._v(" "),n("p",[s._v("4、使用多路复用 IO 模型，非阻塞 IO")]),s._v(" "),n("p",[s._v("IO 多路复用就是多个 TCP 连接复用一个线程。如果采用多个请求起多个进程或者多个线程的模式，除了要考虑到进程或者线程的切换之外，还要用户去检查事件是否到达，效率低下。Redis 支持 select、poll、epoll 模式的多路复用，默认情况下，会选择系统支持的最好的模式。通过 IO 多路复用技术，用户不用去遍历 fd set 集合。通过内核通知告诉事件的到达，效率比较高")]),s._v(" "),n("p",[s._v("5、渐进式 Rehash")]),s._v(" "),n("h2",{attrs:{id:"常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[s._v("#")]),s._v(" "),n("strong",[s._v("常用命令")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换数据库0-15")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" dbIndex\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 遍历当前库所有键")]),s._v("\nkeys *\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询当前库总键数")]),s._v("\ndbsize\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 存在返回1，不存在返回0")]),s._v("\nexists key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除键")]),s._v("\ndel key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# flushdb只清除当前数据库，flushall清除所有数据库")]),s._v("\nflushdb\nflushall\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# （不建议再生产环境中使用）把指定的键从源数据库移动到目标数据库")]),s._v("\nmove key db\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 键数据类型")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 键重命名，若newkey已存在，将会被覆盖")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rename")]),s._v(" key newkey\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只有newkey不存在时才会被覆盖")]),s._v("\nrenamenx key newkey\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 随机返回一个键")]),s._v("\nrandomkey\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当超过过期时间，会自动删除，key在seconds秒后过期")]),s._v("\nexpire key seconds\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 键在秒级时间戳timestamp后过期")]),s._v("\nexpireat key timestamp\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当超过过期时间，会自动删除，key在milliseconds毫秒后过期")]),s._v("\npexpire key milliseconds\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key在豪秒级时间戳timestamp后过期")]),s._v("\npexpireat key milliseconds-timestamp\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 命令可以查看键hello的剩余过期时间，单位：秒（>0剩余过期时间；-1没设置过期时间；-2键不存在）")]),s._v("\nttl\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 毫秒级ttl")]),s._v("\npttl\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" mylist\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 字母排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" mylist alpha desc limit "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# by命令")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" list by it:* desc\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# get参数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" list by it:* desc get it:*\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sort命令之store参数：表示把sort查询的结果集保存起来")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" list by it:* desc get it:* store sorc:result\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br")])]),n("h2",{attrs:{id:"内部结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部结构"}},[s._v("#")]),s._v(" 内部结构")]),s._v(" "),n("blockquote",[n("p",[s._v("Redis 内部使用一个 redisObject 对象来表示所有的 key 和 value")])]),s._v(" "),n("p",[n("strong",[s._v("redisObject 最主要的信息")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("type，表示一个 value 对象具体是何种数据类型")])]),s._v(" "),n("li",[n("p",[s._v("encoding，是不同数据类型在 Redis 内部的存储方式")]),s._v(" "),n("p",[s._v("type=string，表示 value 存储的是一个普通字符串， encoding 可以是 raw 或者 int")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(426),alt:"image-20210528110958956"}})]),s._v(" "),n("h2",{attrs:{id:"数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),n("h3",{attrs:{id:"基本数据类型-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型-5"}},[s._v("#")]),s._v(" 基本数据类型（5）")]),s._v(" "),n("h4",{attrs:{id:"string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),n("blockquote",[n("p",[s._v("String 是 Redis 最基本的类型，String 类型是二进制安全的，意思是 Redis 的 String 类型可以包含任何数据，比如 jpg 图片或者序列化的对象。String 类型的值最大能存储 512M")])]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" key value\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 键必须不存在，才可以设置成功")]),s._v("\nsetnx key value\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为键值设置秒级过期时间")]),s._v("\nsetex key value\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从index开始替换value")]),s._v("\nsetrange key index value \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 批量设置值")]),s._v("\nmset k1 v1 k2 v2 k3 v3\nmget k1 k2 k3\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key计数增")]),s._v("\nincr key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key计数增，每次增increment")]),s._v("\nincr key by increment\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key计数减")]),s._v("\ndecr key\ndecr key by increment\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 追加值，向key中的value字符串尾部追加值")]),s._v("\nappend key value\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 字符串长度，每个汉字占用3个字字节")]),s._v("\nstrlen key\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置并返回原值")]),s._v("\ngetset key value\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取部分字符串，start和end分别为开始和结束的偏移量，偏移量从0开始")]),s._v("\ngetrange key start end \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置指定位置的字符，offeset是字符串下标")]),s._v("\nsetrange key offeset value\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" key aaa\nOK\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" get key\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaa"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" setrange key "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" b\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),n("span",{pre:!0,attrs:{class:"token operator"}},[n("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" get key\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"baa"')]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])]),n("p",[n("strong",[s._v("String key设置约定")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 中间不能用空格来隔开")]),s._v("\n表名:主键名:主键值:字段名 字段值\nuser:id:1001:name aaa\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h4",{attrs:{id:"list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" List")]),s._v(" "),n("blockquote",[n("p",[s._v("List 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）")])]),s._v(" "),n("p",[n("strong",[s._v("数据结构")])]),s._v(" "),n("p",[s._v("List 就是链表，可以用来当消息队列用")]),s._v(" "),n("p",[n("strong",[s._v("实现方式")])]),s._v(" "),n("p",[s._v("Redis List 的是实现是一个双向链表，既可以支持反向查找和遍历，更方便操作，不过带来了额外的内存开销")]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#添加")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从右边插入元素")]),s._v("\nrpush lists elements"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("elements "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nrpush lists a b c d\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从左边插入元素")]),s._v("\nlpush lists elements"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("elements "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 向某个元素前或者后插入元素")]),s._v("\nlinsert lists BEFORE"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("AFTER element value\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" linsert list before a z\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" lrange list "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -1\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"d"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 遍历")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取指定范围内的元素列表")]),s._v("\nlrange key "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -1\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取列表指定下标的元素")]),s._v("\nlindex key "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取列表长度")]),s._v("\nllen key\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从列表左侧弹出元素")]),s._v("\nlpop key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从列表右侧弹出元素")]),s._v("\nrpop key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除count个指定元素value，若是指定元素个数小于count，则全部删除")]),s._v("\nlrem key count value\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改指定索引下标的元素")]),s._v("\nlset key index newValue\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("h4",{attrs:{id:"hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" Hash")]),s._v(" "),n("blockquote",[n("p",[s._v("Hash是一个键值（key-value）的集合。Redis 的 Hash 是一个 String 的 Key 和 Value 的映射表，Hash 适合存储对象")])]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置值")]),s._v("\nhset key field value\nhsetnx key filed value\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 批量设置值")]),s._v("\nHmset key field value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("field value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断field是否存在")]),s._v("\nhexists key field\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取值")]),s._v("\nhget key field\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 批量获取值")]),s._v("\nHmget key field "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("field "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算field的个数")]),s._v("\nhlen key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算value字符串的长度")]),s._v("\nhstrlen key field\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取所有field")]),s._v("\nhkeys key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取所有value")]),s._v("\nhvals key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取所有的field、value")]),s._v("\nhgetall key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# hincrby hincrbyfloat 作用域是field")]),s._v("\nhincrby key field\nhincrbyfloat key field\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" hset user:1 name aaa age "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" hget user:1 name\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaa"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" hget user:1 age\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"18"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" hget user:1 password\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除field，会删除一个或多个field，返回结果为成功删除fiel的个数")]),s._v("\nhdel key field\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("h4",{attrs:{id:"set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" Set")]),s._v(" "),n("blockquote",[n("p",[s._v("Set 是 String 类型的无序集合。集合是通过 hashtable 实现的。Set 中的元素是没有顺序的，而且是没有重复的")])]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回结果为添加成功的元素个数")]),s._v("\nsadd key element "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("element "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取")]),s._v("\nsmembers key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取set中元素个数")]),s._v("\nscard key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断元素是否存在set中，存在返回1，否则返回0 ")]),s._v("\nsismember key element\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 随机从集合返回指定个数元素，count可以省略，默认是1")]),s._v("\nsrandmember key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回结果为删除成功的元素个数")]),s._v("\nsrem key element "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("element "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从set中随机pop元素，count可以省略，默认1")]),s._v("\nspop key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set集合间的操作")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 交集")]),s._v("\nsinter key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 并集")]),s._v("\nsunion key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 差集")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdiff")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将交集、并集、差集的结果保存，destination：保存到的目的地")]),s._v("\nsinterstore destination key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nsunionstore destination key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nsdiffstore destination key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h4",{attrs:{id:"zset"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[s._v("#")]),s._v(" Zset")]),s._v(" "),n("blockquote",[n("p",[s._v("Zset 和 Set 一样是 String 类型元素的集合，且是插入有序的，即自动排序。和 Set 相比，Sorted Set关联了一个 Double 类型权重的参数 Score，使得集合中的元素能够按照 Score 进行有序排列，Redis 正是通过分数来为集合中的成员进行从小到大的排序")])]),s._v(" "),n("p",[n("strong",[s._v("实现方式")])]),s._v(" "),n("p",[s._v("Redis Sorted Set 的内部使用 HashMap 和跳跃表（skipList）来保证数据的存储和有序，HashMap 里放的是成员到 Score 的映射。而跳跃表里存放的是所有的成员，排序依据是 HashMap 里存的 Score，使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单")]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add one or more members to a sorted set, or update its score if it already exists")]),s._v("\nzadd key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NX"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("XX"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("GT"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("LT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("INCR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" score member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("score member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nzadd key score member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("score member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加成员的分数")]),s._v("\nzincrby key increment member\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回指定排名范围的成员")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从低分到高分")]),s._v("\nzrange key start end "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("withscores"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从高分到低分")]),s._v("\nzrevrange key start end "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("withscores"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回指定分数范围的成员")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照分数从低分到高分")]),s._v("\nzrange key min max "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("withscores"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("limit offset count "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照分数从高分到低分")]),s._v("\nzrevrange key max min "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("withscores"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("limit offset count "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回指定分数范围的成员个数")]),s._v("\nzcount key min max\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算成员个数")]),s._v("\nzcard key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算某个成员分数")]),s._v("\nzsore key member\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从0开始计算成员的排名")]),s._v("\nzrank key member\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除成员")]),s._v("\nzrem key member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除指定排名内的升序元素")]),s._v("\nzremrangebyrank key start end\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除指定分数范围的成员")]),s._v("\nzremrangebystore key min max\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# zset集合操作")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 交集")]),s._v("\nzinter key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 并集")]),s._v("\nzunion key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 差集")]),s._v("\nzdiff key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将交集、并集、差集的结果保存，destination：保存到的目的地")]),s._v("\nzinterstore destination key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nzunionstore destination key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nzdiffstore destination key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br")])]),n("h5",{attrs:{id:"跳跃表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跳跃表"}},[s._v("#")]),s._v(" 跳跃表")]),s._v(" "),n("blockquote",[n("p",[s._v("Redis 的 "),n("strong",[s._v("zset")]),s._v(" 是个复合结构, 是由一个 "),n("strong",[s._v("哈希表")]),s._v(" 和 "),n("strong",[s._v("skiplist")]),s._v(" 组成的。其中 hash 用来保存 value 和 score 对应关系，skiplist 用来给 score 排序")])]),s._v(" "),n("p",[n("strong",[s._v("SkipList 跳跃表")])]),s._v(" "),n("p",[s._v("Zset 需要高效的插入和删除，数组插入删除的时间复杂度为O（n），所以底层不适合使用数组实现。需要使用链表，链表的插入删除的时间复杂度为O（1）。当插入新元素时需要根据 score 插入到链表合适的位置，保证链表的有序性， 高效的办法是通过"),n("strong",[s._v("二分查找")]),s._v("去找到插入点")]),s._v(" "),n("blockquote",[n("p",[s._v("那么问题就来了，二分查找的对象必须是有序数组，只有数组支持快速定位，链表做不到该怎么办呢?")])]),s._v(" "),n("p",[s._v("这就需要"),n("strong",[s._v("跳跃表")]),s._v("了")]),s._v(" "),n("p",[s._v("参考链接，后续再加上总结")]),s._v(" "),n("blockquote",[n("p",[s._v("关于排序问题，我们也很容易就想到 "),n("strong",[s._v("红黑树/ 平衡树")]),s._v(" 这样的树形结构，为什么 Redis 不使用这样一些结构呢？")])]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("性能考虑：")]),s._v(" 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部")]),s._v(" "),n("li",[n("strong",[s._v("实现考虑：")]),s._v(" 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观")])]),s._v(" "),n("h3",{attrs:{id:"特殊数据类型-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特殊数据类型-3"}},[s._v("#")]),s._v(" 特殊数据类型（3）")]),s._v(" "),n("h4",{attrs:{id:"geospatial"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#geospatial"}},[s._v("#")]),s._v(" Geospatial")]),s._v(" "),n("blockquote",[n("p",[s._v("地理位置，记录某地点的经纬度，可用来求两地的距离、距离范围内的值等")])]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加")]),s._v("\ngeoadd  key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NX"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("XX"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" longitude latitude member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("longitude latitude member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例子")]),s._v("\ngeoadd china:city "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("120.20000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.26667")]),s._v(" hangzhou\ngeoadd china:city "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("120.20000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.26667")]),s._v(" hangzhou "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("121.473720")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("31.230350")]),s._v(" shanghai\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取")]),s._v("\ngeopos key member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member. "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\ngeoadd china:city hangzhou shanghai\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取两地距离，默认距离单位m")]),s._v("\ngeodist china:key hangzhou shanghai\ngeodist china:key hangzhou shanghai km\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以某个地理位置为中心，找出某半径内的包含的位置")]),s._v("\ngeoradius key longitude latitude radius m"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("km"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("ft"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("mi "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHCOORD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHDIST"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("WITHHASH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COUNT count "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ANY"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ASC"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("DESC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("STORE key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("STOREDIST key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\ngeoradius key 经度 纬度 半径 半径单位m/km 包含直线距离 显示经纬度 count 显示的个数 升序/降序\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据给定的成员元素，找出指定距离内的其他元素")]),s._v("\ngeoradiusbymember china:city hangzhou "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km withcoord withdist\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取位置元素地理位置的哈希值")]),s._v("\ngeohash key member "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("member. "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" geodist china:city shanghai hangzhou km\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"162.2105"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" georadius china:city "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("120.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hangzhou"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" georadius china:city "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("120.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km withdist\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hangzhou"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"7.4155"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"167.2338"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" georadius china:city "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("120.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km withdist withcoord\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hangzhou"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"7.4155"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"120.20000249147415161"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30.2666706589875858"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"167.2338"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"121.47371917963027954"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"31.2303488312778228"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" georadiusbymember china:city hangzhou "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" km withcoord withdist\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hangzhou"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.0000"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"120.20000249147415161"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30.2666706589875858"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shanghai"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"162.2105"')]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"121.47371917963027954"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"31.2303488312778228"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" geohash china:city hangzhou\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wtmkpjyuph0"')]),s._v("\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br")])]),n("h4",{attrs:{id:"hyperloglog"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog"}},[s._v("#")]),s._v(" Hyperloglog")]),s._v(" "),n("blockquote",[n("p",[s._v("基数，数据集中不重复的元素个数，可用于求集合（交并补）。用于网页的访问量（UV）、点赞量，一个用户多次访问，也只能算作一个人")])]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加")]),s._v("\npfadd key element "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("element "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取key基数")]),s._v("\npfcount key\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将多个hyperloglog合并为一个")]),s._v("\npfmerge destkey sourcekey "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sourcekey "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pfadd hyper a b c d e f g\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pfcount hyper\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pfadd hyper a a b c\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pfcount hyper\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pfadd hyper2 a c h i\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pfmerge hyper0 hyper hyper2\nOK\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pfcount hyper0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h4",{attrs:{id:"bitmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bitmap"}},[s._v("#")]),s._v(" BitMap")]),s._v(" "),n("blockquote",[n("p",[s._v("位图场景，有两个状态，0和1。可用于签到统计、状态统计等")])]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置值，一般设置0或1")]),s._v("\nsetbit key value\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取值")]),s._v("\ngetbit key offset\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计某个键其值为1的数量")]),s._v("\nbitcount key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" getbit sign "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:6379"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bitcount sign\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[n("strong",[s._v("BitMap 统计日活")])]),s._v(" "),n("p",[s._v("统计今日登录的用户数，建立一个bitmap，每一位标识一个用户ID（假设是1亿，空间使用量1亿/8/1024/1024=11MB，仅仅只要11MB就能统计1亿用户的日活，且速度相当快）")]),s._v(" "),n("p",[s._v("每次用户登录时会执行一次"),n("code",[s._v("setbit key user_id 1")]),s._v("。将 bitmap 中对应位置的值置为1，时间复杂度是O(1)。执行"),n("code",[s._v("bitcount key")]),s._v(" 统计 bitmap 结果有多少个1（即活跃用户数）")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个用户登录即设置一次")]),s._v("\nsetbit activity_user_20210810 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("111000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计某日活跃用户数")]),s._v("\nbitcount activity_user_20210810\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# operation 可以是 AND 逻辑并、 OR 逻辑或、 NOT 逻辑非、 XOR 逻辑异或 这四种操作中的任意一种")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 除了 NOT 操作之外，其他操作都可以接受一个或多个 key 作为输入")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# BITOP 的复杂度为 O(N) ，当处理大型矩阵(matrix)或者进行大数据量的统计时，最好将任务指派到附属节点(slave)进行，避免阻塞主节点")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 返回值：保存到 destkey 的字符串的长度，和输入 key 中最长的字符串长度相等")]),s._v("\nbitop operation destkey key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将一周内连续登录用户保存到res中")]),s._v("\nbitop and res activity_0809 activity_0810 activity_0811 activity_0812 activity_0813 activity_0814 activity_0815\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计一周内连续登录用户")]),s._v("\nbitcount res\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断某个用户是否在七天内连续登录，返回1，即七天内连续登录")]),s._v("\ngetbit res 用户id\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计周活")]),s._v("\nbitop or res activity_0809 activity_0810 activity_0811 activity_0812 activity_0813 activity_0814 activity_0815\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取周活")]),s._v("\nbitcount res\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h2",{attrs:{id:"事务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[s._v("#")]),s._v(" 事务")]),s._v(" "),n("blockquote",[n("p",[s._v("Redis事务的本质是一组命令的集合，可以一次执行多个命令。一个事务中所有的命令都会被序列化，一次性按顺序地，串行化执行，不会被其他命令插入")])]),s._v(" "),n("p",[n("strong",[s._v("锁")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("乐观锁")]),s._v("，认为无论执行什么操作都不会出问题，无论执行什么操作都不会加锁\n"),n("ul",[n("li",[s._v("用version给数据做标识，更新数据时判断version，查看在此期间是否有人修改过这个数据")]),s._v(" "),n("li",[s._v("提交版本必须大于记录当前版本才能执行更新")])])]),s._v(" "),n("li",[n("strong",[s._v("悲观锁")]),s._v("，认为无论执行什么操作都会出问题，无论执行什么操作都会加锁")])]),s._v(" "),n("p",[n("strong",[s._v("特点")])]),s._v(" "),n("ul",[n("li",[s._v("一个队列中，一次性、顺序性、排他性的执行一系列命令")]),s._v(" "),n("li",[s._v("==Redis单条命令保证原子性，但是Redis事务不保证原子性，没有回滚==")]),s._v(" "),n("li",[s._v("==Redis事务中没有隔离级别的概念==")]),s._v(" "),n("li",[s._v("==所有命令在事务中并没有被直接执行，只有发起执行指令的时候才会执行==")]),s._v(" "),n("li",[s._v("执行流程\n"),n("ol",[n("li",[s._v("开启事务，"),n("code",[s._v("multi")])]),s._v(" "),n("li",[s._v("输入一组命令，命令入队")]),s._v(" "),n("li",[s._v("执行事务，"),n("code",[s._v("exec")]),s._v("，执行之后本次事务结束，若还要使用事务则需要再次开启")]),s._v(" "),n("li",[s._v("取消事务，"),n("code",[s._v("discard")])]),s._v(" "),n("li",[s._v("监视key值，"),n("code",[s._v("watch key [key...]")]),s._v("，类似于乐观锁，如果在事务执行时，若是这个或这些key值被其他命令所改动，那么事务将会被打断。一旦执行了"),n("code",[s._v("exec")]),s._v("命令之后，之前加的监控锁都会被取消")])])]),s._v(" "),n("li",[s._v("事务不能正常开启的情况\n"),n("ol",[n("li",[s._v("编译异常，输入的命令编译异常，事务中所有的命令都不会成功执行")]),s._v(" "),n("li",[s._v("运行异常，输入的命令在执行期间出现异常，除了出错的命令，其它命令均能正常执行")])])])]),s._v(" "),n("p",[n("strong",[s._v("操作")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 标记一个事务块的开始")]),s._v("\nmulti\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行事务块内的命令")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 监视一个或者多个key，如果事务执行之前，这个kye被其它命令所动，则事务被打断")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("watch")]),s._v(" key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取消watch命令对所有key的监视")]),s._v("\nunwatch\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取消执行事务块内的所有命令")]),s._v("\ndiscard\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"持久化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#持久化"}},[s._v("#")]),s._v(" 持久化")]),s._v(" "),n("p",[s._v("Redis 最大的特点就是基于内存的，既然是基于内存，那么当 Redis 服务挂掉或者服务器宕机，数据则会丢失，所以 Redis 不可避免的得对数据持久化做一些处理")]),s._v(" "),n("h3",{attrs:{id:"rdb"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[s._v("#")]),s._v(" RDB")]),s._v(" "),n("blockquote",[n("p",[s._v("在指定时间间隔内，将内存中的数据保存到磁盘上的一个 dump 文件，定时保存。恢复的时候是将快照文件直接读到内存中，实现快速恢复")])]),s._v(" "),n("p",[n("strong",[s._v("RDB快照")])]),s._v(" "),n("p",[s._v("Redis 提供了两个命令来生成 RDB 快照文件，分别是 "),n("code",[s._v("save")]),s._v(" 和 "),n("code",[s._v("bgsave")]),s._v("。"),n("code",[s._v("save")]),s._v(" 命令在主线程中执行，会导致阻塞。而 "),n("code",[s._v("bgsave")]),s._v(" 命令则会创建一个子进程，用于写入 RDB 文件的操作，避免了对主线程的阻塞，这也是 Redis RDB 的默认配置")]),s._v(" "),n("p",[n("strong",[s._v("自动触发")])]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# save 单位时间(s) 修改次数\nsave 3600 1 # 3600s内修改超过1次，就将数据持久化到储存\nsave 300 100\nsave 60 10000\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("手动触发")])]),s._v(" "),n("ol",[n("li",[s._v("执行完命令之后，==手动执行 save 指令==")]),s._v(" "),n("li",[s._v("==执行 flushdb 指令==，执行 flushdb 指令之后，会生成一个空的"),n("code",[s._v("dump.rdb")]),s._v("文件将之前的 RDB 文件覆盖")])]),s._v(" "),n("p",[n("strong",[s._v("禁用快照")])]),s._v(" "),n("ol",[n("li",[s._v("配置文件中开启 "),n("code",[s._v('save ""')])]),s._v(" "),n("li",[s._v("命令行执行"),n("code",[s._v('config set save ""')])])]),s._v(" "),n("p",[n("strong",[s._v("异常 dump 文件修复")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# redis-check-dump在redis-server同级目录下")]),s._v("\nredis-check-dump --fix dump.rdb\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 之后重启Redis生效")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("细节")])]),s._v(" "),n("ul",[n("li",[s._v("Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写到一个临时文件中，等持久化过程都结束了，再用这个临时文件替换上次持久化的文件。整个持久化过程主进程是不进行任何 IO 操作的，这就确保了极高的性能")]),s._v(" "),n("li",[s._v("==Fork 的作用是复制一个与当前进行一样的子进程==，子进程的所有数据（变量，环境变量，程序计数器等）数值都与原来的进程一致，是一个全新的进程")]),s._v(" "),n("li",[s._v("RDB 保存的是"),n("code",[s._v("dump.rdb")]),s._v("文件，备份的"),n("code",[s._v("dump.rdb")]),s._v("文件最好是与运行 Redis 的服务器==不同==的另一台服务器")]),s._v(" "),n("li",[s._v("==如果要进行大规模的数据恢复，且对于数据恢复的完整性要求不是非常敏感，那么RDB方式要比AOF方式更加的高效==")])]),s._v(" "),n("p",[n("strong",[s._v("优点")])]),s._v(" "),n("ol",[n("li",[n("code",[s._v(".rdb")]),s._v("是一个非常紧凑的文件")]),s._v(" "),n("li",[s._v("RDB 在保存"),n("code",[s._v(".rdb")]),s._v("文件时，父进程唯一需要做的就是 fork 出一份子进程，接下来的工作全部由子进程来做，父进程不需要再做其他的 IO 操作，只需要专注于自己的工作。所以 RDB 持久化方式可以最大化 Redis 的性能")]),s._v(" "),n("li",[s._v("与 AOF 相比，在恢复大的数据集的时候，RDB 方式会更快")])]),s._v(" "),n("p",[n("strong",[s._v("缺点")])]),s._v(" "),n("ol",[n("li",[s._v("数据丢失风险大，在一定间隔时间内做一次备份，如果 Redis 意外宕机，就会丢失最后一次快照后的所有修改")]),s._v(" "),n("li",[s._v("Fork 的时候，内存中的数据被克隆了一份，大致两倍的膨胀性需要考虑。并且在数据集比较大的时候，Fork 过程是非常耗时的")])]),s._v(" "),n("p",[n("strong",[s._v("Redis 是怎么解决在 bgsave 做快照的时候允许数据修改？")])]),s._v(" "),n("p",[s._v("这里主要是利用 "),n("code",[s._v("bgsave")]),s._v("的子线程实现的，具体操作如下：")]),s._v(" "),n("ul",[n("li",[s._v("如果主线程执行读操作，则主线程和 "),n("code",[s._v("bgsave")]),s._v(" 子进程互相不影响；")]),s._v(" "),n("li",[s._v("如果主线程执行写操作，则被修改的数据会复制一份副本，然后 "),n("code",[s._v("bgsave")]),s._v("子进程会把该副本数据写入 RDB 文件，在这个过程中，主线程仍然可以直接修改原来的数据。")])]),s._v(" "),n("h3",{attrs:{id:"aof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[s._v("#")]),s._v(" AOF")]),s._v(" "),n("blockquote",[n("p",[s._v("以日志的形式来记录每个写操作，将 Redis 执行过的"),n("strong",[s._v("所有写指令")]),s._v("记录下来（读指令不记录），只许追加文件而不改写文件。Redis 启动时会读取 AOF 日志文件，重新构建数据。Redis 重启的话就根据日志文件的内容将指令从前到后执行执行一次，以完成数据的恢复工作")])]),s._v(" "),n("p",[n("strong",[s._v("写后日志")])]),s._v(" "),n("p",[s._v("AOF 采用的是 “写后日志” 的方式，==主要是由于 Redis 在写入日志之前，不对命令进行语法检查，所以只记录执行成功的命令，避免出现记录错误命令的情况，而且在命令执行后再写日志不会阻塞当前的写操作==。后写日志主要有两个风险可能会发生：")]),s._v(" "),n("ul",[n("li",[s._v("数据可能会丢失：如果 Redis 刚执行完命令，此时发生故障宕机，会导致这条命令存在丢失的风险。")]),s._v(" "),n("li",[s._v("可能阻塞其他操作：AOF 日志其实也是在主线程中执行，所以当 Redis 把日志文件写入磁盘的时候，还是会阻塞后续的操作无法执行")])]),s._v(" "),n("p",[n("strong",[s._v("AOF 快照")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("启用 AOF")]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 配置文件修改\nappendonly yes\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("appendfsync，AOF 的命令同步策略")]),s._v(" "),n("ol",[n("li",[s._v("always，同步计划，每次发生数据变更会被立即记录到 AOF 文件，性能较差但是数据完整性较好")]),s._v(" "),n("li",[s._v("everysec，出厂默认，异步操作，每秒记录，如果一秒内宕机，会出现数据丢失")]),s._v(" "),n("li",[s._v("no")])])]),s._v(" "),n("li",[n("p",[s._v("aof 文件异常修复")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# redis-check-aof在redis-server同级目录下")]),s._v("\nredis-check-aof --fix appendonly.aof\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 之后重启Redis生效")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])]),s._v(" "),n("p",[n("strong",[s._v("AOF 的重写（rewrite）机制")])]),s._v(" "),n("ul",[n("li",[s._v("AOF 采用文件追加的方式，文件会越来越大，为了避免出现这种情况，AOF 新增了重写机制。")]),s._v(" "),n("li",[s._v("当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。可以使用"),n("code",[s._v("bgrewriteaof")])])]),s._v(" "),n("p",[n("strong",[s._v("重写过程")])]),s._v(" "),n("p",[s._v("AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写（先写入临时文件再 rename ）遍历新进程的内存中的数据，每条记录都有一条 Set 语句。重写 AOF 文件的操作并没有读取到旧的 AOF 文件，而是将整个内存中的数据库内容用命令的方式重写一个新的 AOF 文件，这点和 RDB 快照有点类似")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("触发机制")]),s._v(" "),n("p",[s._v("Redis 会记录上次重写时的 aof 文件的大小，默认配置是当 aof 文件大小是上次重写后大小的一倍，且文件大于 64MB 时触发。若是重启 Redis 后第一次触发重写机制，则重写时对照的 aof 文件的大小是 Redis 启动时使用的 aof 文件的大小")])])]),s._v(" "),n("p",[n("strong",[s._v("细节")])]),s._v(" "),n("ul",[n("li",[s._v("aof 文件是一个只进行日志追加的文件")]),s._v(" "),n("li",[s._v("==若是目录下同时存在"),n("code",[s._v("dump.rdb")]),s._v("和"),n("code",[s._v("appendonly.aof")]),s._v("，优先加载aof文件进行数据恢复。因为在通常情况下，aof 文件保存的数据要比rdb文件保存的数据更完整==")]),s._v(" "),n("li",[s._v("==aof 文件会记录"),n("code",[s._v("flusdb")]),s._v("和"),n("code",[s._v("flushall")]),s._v("指令，若在操作的最后执行了"),n("code",[s._v("flushdb")]),s._v("，在下次启动时从aof文件恢复的指令中末尾就是"),n("code",[s._v("flushdb")]),s._v("，因此数据会被再次清空==")])]),s._v(" "),n("p",[n("strong",[s._v("优点")])]),s._v(" "),n("ol",[n("li",[s._v("aof 文件有序地保存了对数据库执行的所有写入操作，这些写入操作以aof格式的文件进行保存，aof文件内容易于读懂，对文件进行分析也很轻松")]),s._v(" "),n("li",[s._v("同步策略配置灵活")]),s._v(" "),n("li",[s._v("Redis 可以在 AOF 文件过大时，在后台自动的对 AOF 文件进行重写")])]),s._v(" "),n("p",[n("strong",[s._v("缺点")]),s._v("：对相同数据集的数据而言，AOF 文件要远大于 RDB 文件，恢复速度要慢于 RDB 文件")]),s._v(" "),n("h3",{attrs:{id:"混合持久化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#混合持久化"}},[s._v("#")]),s._v(" 混合持久化")]),s._v(" "),n("blockquote",[n("p",[s._v("重启 Redis 时，很少使用 RDB来恢复数据，因为会丢失大量数据。通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。  Redis 为了解决这个问题，带来了一个新的持久化方式——混合持久化")])]),s._v(" "),n("p",[n("strong",[s._v("配置")])]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("aof-use-rdb-preamble yes\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("细节")])]),s._v(" "),n("p",[s._v("如果开启了混合持久化，AOF 在重写时，==不再是单纯将内存数据转换为 RESP 命令写入 AOF 文件， 而是将重写这一刻之前的内存做 RDB 快照处理==，并且将 RDB 快照内容和增量的 AOF 修改内存数据的命令存在一起，都写入新的 AOF 文件， 新的文件一开始不叫"),n("code",[s._v("appendonly.aof")]),s._v("，等到重写完新的 AOF 文件才会进行改名，覆盖原有的 AOF 文件，完成新旧两个 AOF 文件的替换")]),s._v(" "),n("p",[s._v("于是在 Redis 重启的时候，可以"),n("strong",[s._v("先加载 RDB 的内容，然后再重放增量 AOF 日志")]),s._v("，就可以完全替代之前的 AOF 全量文件重放， 因此重启效率大幅得到提升。")]),s._v(" "),n("h2",{attrs:{id:"高可用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[s._v("#")]),s._v(" 高可用")]),s._v(" "),n("h3",{attrs:{id:"主从复制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[s._v("#")]),s._v(" 主从复制")]),s._v(" "),n("blockquote",[n("p",[s._v("主从复制，主机数据更新后，根据配置和策略，自动同步到备份机的 Master/Slave 机制，Master 以写为主，Slave 以读为主")])]),s._v(" "),n("p",[n("strong",[s._v("作用")])]),s._v(" "),n("ol",[n("li",[s._v("读写分离")]),s._v(" "),n("li",[s._v("容灾恢复")])]),s._v(" "),n("p",[n("strong",[s._v("一主多从配置")])]),s._v(" "),n("p",[s._v("A、仅需要配置从库，不配置主库")]),s._v(" "),n("p",[s._v("B、修改配置文件细节")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("拷贝多个"),n("code",[s._v("redis.conf")]),s._v("文件")])]),s._v(" "),n("li",[n("p",[s._v("开启"),n("code",[s._v("deamonlize yes")])])]),s._v(" "),n("li",[n("p",[s._v("指定端口")]),s._v(" "),n("ol",[n("li",[s._v("同一台机上多个Redis服务改不同端口")]),s._v(" "),n("li",[s._v("不同机子上Redis服务无需修改端口")]),s._v(" "),n("li",[s._v("Pid文件名")])]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# redis.conf\npidfile /var/run/redis端口号.pid\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ol",{attrs:{start:"4"}},[n("li",[n("p",[s._v("Log文件名")]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# redis.conf\nlogfile "端口号.log"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("dump.rdb")]),s._v("名")]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("dbfilename dump端口号.rdb\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])])])]),s._v(" "),n("p",[s._v("C、从库配置，指定master")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("命令行指定，每次与master断开之后，都需要重新连接")]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# redis客户端命令行\nslaveOf 主机ip 主机port\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("配置文件指定，在"),n("code",[s._v("redis.conf")]),s._v("中指定master")])])]),s._v(" "),n("p",[s._v("D、查看主从复制信息")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# redis客户端命令行")]),s._v("\ninfo replication\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("去中心化配置")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("上一个Slave是下一个Slave的Master，接力配置。Slave同样可以接受其他Slave的连接和同步请求，处于中间的Slave作为链条中下一个Slave的Master，可以有效减轻Master的写压力")])]),s._v(" "),n("li",[n("p",[s._v("==需要注意的是，中途变更两种不同的master-slave配置会清除之前的数据，重新建立拷贝最新的数据==")])]),s._v(" "),n("li",[n("p",[s._v("步骤同一主多从，仅在"),n("code",[s._v("slaveOf")]),s._v("命令处有改动")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[s._v("slaveOf 新主库ip 新主库port\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])]),s._v(" "),n("p",[n("strong",[s._v("主从工作原理")])]),s._v(" "),n("p",[s._v("1、为 Master 配置了一个 Slave 之后，不管这个 Slave 是否是第一次连接上 Master，它都会发送一个**"),n("code",[s._v("SYNC")]),s._v("命令(Redis 2.8 版本之前的命令)** Master 请求复制数据。("),n("strong",[s._v("从2.8版本开始，Redis 改用可以支持部分数据复制的命令"),n("code",[s._v("PSYNC")]),s._v("去 Master 同步数据")]),s._v(")")]),s._v(" "),n("p",[s._v("2、Master 收到"),n("code",[s._v("SYNC")]),s._v("命令后，会在后台进行数据持久化通过"),n("code",[s._v("bgsave")]),s._v("生成最新的 RDB 快照文件，持久化期间，Master 会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。当持久化进行完毕以后，Master 会把这份 RDB 文件数据集发送给 Slave，Slave 会把接收到的数据进行持久化生成 RDB，然后再加载到内存中。最后，Master 再将之前缓存在内存中的命令发送给 Slave")]),s._v(" "),n("p",[s._v("3、当 Master 与 Slave 之间的连接由于某些原因而断开时，Slave 能够自动重连 Master，如果 Master 收到了多个Slave 并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的 Slave")]),s._v(" "),n("p",[s._v("4、当 Master 和 Slave 断开重连后，一般都会对整份数据进行复制。从 Redis 2.8 版本开始，Master 和 Slave 断开重连后支持"),n("strong",[s._v("部分复制")])]),s._v(" "),n("p",[n("strong",[s._v("数据的全量/增量复制")])]),s._v(" "),n("p",[s._v("全量复制：Master 会在其内存中创建一个"),n("strong",[s._v("复制数据用的缓存队列")]),s._v("，缓存最近一段时间的数据，Master 和它所有的Slave 都维护了复制的数据下标 offset 和 master 的进程 id。当网络连接断开后，slave 会请求 master 继续进行未完成的复制，从所记录的数据下标开始。如果 master 进程 id 变化了，或者从节点数据下标 offset 太旧，已经不在master 的缓存队列里了，那么将会进行一次全量数据的复制")]),s._v(" "),n("p",[s._v("增量复制：Master继续将新的所有收集到的修改命令一次传给Slave，完成同步。但是只要是重新连接Master，将会自动执行一次完全的同步（全量复制）")]),s._v(" "),n("h3",{attrs:{id:"哨兵模式-sentinel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#哨兵模式-sentinel"}},[s._v("#")]),s._v(" 哨兵模式（Sentinel）")]),s._v(" "),n("blockquote",[n("p",[s._v("Sentinel 哨兵是特殊的 Redis 服务，"),n("strong",[s._v("不提供读写服务")]),s._v("，主要"),n("strong",[s._v("用来监控 Redis 实例节点")]),s._v("。能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库")])]),s._v(" "),n("p",[s._v("哨兵架构下客户端第一次从哨兵找出 Redis 的主节点，后续就直接访问 Redis 的主节点，不会每次都通过 Sentinel 代理访问 Redis 的主节点，当 Redis 的主节点发生变化，哨兵会第一时间感知到，并且将新的 Redis 主节点通知给客户端(这里客户端一般都实现了订阅功能，订阅 Sentinel 发布的节点变动消息)")]),s._v(" "),n("p",[s._v("在 Redis 3.0 以前的版本要实现集群一般是借助哨兵 Sentinel 工具来监控 master 节点的状态。==如果 master 节点异常，则会做主从切换，将某一台 slave 作为 master==。哨兵的配置略微复杂，并且性能和高可用性等各方面表现一般，特别是在主从切换的瞬间存在访问瞬断的情况。而且哨兵模式只有一个主节点对外提供服务，没法支持很高的并发，且单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率")]),s._v(" "),n("p",[n("strong",[s._v("配置")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("配置一主多从")])]),s._v(" "),n("li",[n("p",[s._v("自定义的Redis配置文件目录新建"),n("code",[s._v("sentinel.conf")]),s._v("文件")])]),s._v(" "),n("li",[n("p",[s._v("配置哨兵，一组sentinel能监控多个Master")]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# sentinel.conf 最后的数字1表示，主机挂掉后Slave投票，看谁得票多让谁接替成为主机\nsentinel minitor 被检控的主机名 主机ip 主机port 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("启动哨兵")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# redis目录命令行")]),s._v("\nredis-sentinel /opt/redis/conf/sentinel.conf\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("注意，==若是原 Master 宕机，就会从剩下的 Slave 中选出新的 Master。原 Master 重新启动之后不再是 Master，而是成为新 Master 的 Slave==")])])]),s._v(" "),n("p",[n("strong",[s._v("哨兵Leader选举流程")])]),s._v(" "),n("p",[s._v("1、当一个 Sentinel 的 master 服务被某 sentinel 视为客观下线状态后，该 sentinel 会与其他 sentinel 协商选出 sentinel 的 leader 进行故障转移工作。")]),s._v(" "),n("p",[s._v("2、每个发现 master 服务器进入客观下线的 sentinel 都可以要求其他 sentinel 选自己为 sentinel 的 leader，选举是先到先得。同时每个 sentinel 每次选举都会自增配置纪元(选举周期)，每个纪元中只会选择一个 sentinel 的 leader。")]),s._v(" "),n("p",[s._v("3、如果所有超过一半的 sentinel 选举某 sentinel 作为 leader。之后该 sentinel 进行故障转移操作，从存活的 slave 中选举出新的 master，这个选举过程跟集群的 master 选举很类似")]),s._v(" "),n("p",[s._v("哨兵集群可以只有一个哨兵节点，Redis 的主从也能正常运行以及选举 Master，如果 Master 挂了，那唯一的那个哨兵节点就是哨兵 leader 了，可以正常选举新 master")]),s._v(" "),n("p",[s._v("不过为了高可用一般都推荐至少部署三个哨兵节点。推荐奇数个哨兵节点原理跟集群奇数个master节点类似")]),s._v(" "),n("h3",{attrs:{id:"redis集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis集群"}},[s._v("#")]),s._v(" Redis集群")]),s._v(" "),n("blockquote",[n("p",[s._v("Redis Cluster 是一种"),n("strong",[s._v("分布式去中心化的运行模式")]),s._v("，是在 Redis 3.0 版本中推出的 Redis 集群方案，它将数据分布在不同的服务器上，以此来降低系统对单主节点的依赖，从而提高 Redis 服务的读写性能，它具有复制、高可用和分片特性")])]),s._v(" "),n("p",[s._v("使用哨兵模式在数据上有副本数据做保证，在可用性上又有哨兵监控，一旦 master 宕机会选举 salve 节点为 master 节点，这种已经满足了我们的生产环境需要，"),n("strong",[s._v("那为什么还需要使用集群模式呢？")])]),s._v(" "),n("p",[s._v("哨兵模式归根到底节点还是主从模式，在主从模式下我们可以通过增加 slave 节点来扩展读并发能力，但是没办法扩展写能力和存储能力，存储能力只能是 master 节点能够承载的上限。所以==为了扩展写能力和存储能力==，我们就需要引入集群模式")]),s._v(" "),n("p",[s._v("Redis 集群不需要 sentinel 哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到上万个节点(官方推荐不超过 1000 个节点)。redis 集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单")]),s._v(" "),n("p",[n("strong",[s._v("Redis Cluster 在存储的时候如何确定选择哪个节点呢？")])]),s._v(" "),n("p",[s._v("Redis Cluster采用的是"),n("strong",[s._v("类一致性哈希算法")]),s._v("实现节点选择的。Redis Cluster将所有数据分成 16384 个"),n("strong",[s._v("Slot")]),s._v("（槽位），哈希槽类似于数据分区。每个节点负责其中一部分槽位，槽位的信息存储于每个节点中。")]),s._v(" "),n("p",[s._v("当 Redis Cluster 的客户端来连接集群时，它也会得到一份集群的槽位配置信息并将其缓存在客户端本地。这样当客户端要查找某个 key 时，可以直接定位到目标节点。同时因为槽位的信息可能会存在客户端与服务器不一致的情况，还需要纠正机制来实现槽位信息的校验调整")]),s._v(" "),n("p",[n("strong",[s._v("槽位定位算法")])]),s._v(" "),n("p",[s._v("每个键值对都会根据它的 key，被映射到一个哈希槽中，具体执行过程分为两大步。")]),s._v(" "),n("ul",[n("li",[s._v("根据键值对的 key，按照 CRC16 算法计算一个 16 bit 的值。")]),s._v(" "),n("li",[s._v("再用 16bit 值对 16384 取模，得到 "),n("code",[s._v("0~16383")]),s._v(" 范围内的模数，每个模数代表一个相应编号的哈希槽，"),n("code",[s._v("HASH_SLOT = CRC16(key) mod 16384")])])]),s._v(" "),n("p",[n("strong",[s._v("跳转重定位")])]),s._v(" "),n("p",[s._v("当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客户端发送一个特殊的跳转指令携带目标操作的节点地址，告诉客户端去连这个节点去获取数据。客户端收到指令后除了跳转到正确的节点上去操作，还会同步更新纠正本地的槽位映射表缓存，后续所有 key 将使用新的槽位映射表。")]),s._v(" "),n("p",[n("strong",[s._v("Redis 集群节点间的通信机制")])]),s._v(" "),n("p",[s._v("Redis Cluster节点间采取"),n("strong",[s._v("gossip协议")]),s._v("进行通信，维护集群的元数据有两种方式：==集中式和gossip==")]),s._v(" "),n("p",[s._v("1、"),n("strong",[s._v("集中式")]),s._v("： 优点在于元数据的更新和读取，时效性非常好，一旦元数据出现变更立即就会更新到集中式的存储中，其他节点读取的时候立即就可以立即感知到；不足在于所有的元数据的更新压力全部集中在一个地方，可能导致元数据的存储压力")]),s._v(" "),n("p",[s._v("2、"),n("strong",[s._v("gossip")]),s._v("：gossip协议包含多种消息，包括ping，pong，meet，fail等等")]),s._v(" "),n("p",[s._v("​\t\t"),n("strong",[s._v("ping")]),s._v("：每个节点都会频繁给其他节点发送ping，其中包含自己的状态还有自己维护的集群元数据，互相通过ping交换元数据；")]),s._v(" "),n("p",[s._v("​\t\t"),n("strong",[s._v("pong")]),s._v(": 返回ping和meet，包含自己的状态和其他信息，也可以用于信息广播和更新；")]),s._v(" "),n("p",[s._v("​\t\t"),n("strong",[s._v("fail")]),s._v(": 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了；")]),s._v(" "),n("p",[s._v("​\t\t"),n("strong",[s._v("meet")]),s._v("：某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点进行通信，不需要发送形成网络的所需的所有CLUSTER MEET命令。发送CLUSTER MEET消息以便每个节点能够达到其他每个节点只需通过一条已知的节点链就够了。由于在心跳包中会交换gossip信息，将会创建节点间缺失的链接；")]),s._v(" "),n("blockquote",[n("p",[s._v("gossip协议的优点在于元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，"),n("strong",[s._v("有一定的延时，降低了压力")]),s._v("；缺点在于元数据更新有延时可能导致集群的一些操作会有一些滞后。")])]),s._v(" "),n("p",[n("strong",[s._v("Redis 集群选举原理分析")])]),s._v(" "),n("p",[s._v("当 slave 发现自己的 master 变为 FAIL 状态时，便尝试进行 Failover，以期成为新的 master。由于挂掉的 master 可能会有多个 slave，从而存在多个 slave 竞争成为 master 节点的过程， 其过程如下：")]),s._v(" "),n("p",[s._v("1、slave 发现自己的 master 变为 FAIL")]),s._v(" "),n("p",[s._v("2、将自己记录的集群"),n("code",[s._v("currentEpoch")]),s._v("加1，并广播"),n("code",[s._v("FAILOVER_AUTH_REQUEST")]),s._v("信息")]),s._v(" "),n("p",[s._v("3、其他节点收到该信息，只有 master 响应，判断请求者的合法性，并发送 FAILOVER_AUTH_ACK，对每一个 epoch 只发送一次 ack")]),s._v(" "),n("p",[s._v("4、尝试 failover 的 slave 收集 master 返回的 FAILOVER_AUTH_ACK")]),s._v(" "),n("p",[s._v("5、slave 收到超过半数 master 的 ack 后变成新 Master (这里解释了集群为什么至少需要三个主节点，如果只有两个，当其中一个挂了，只剩一个主节点是不能选举成功的)")]),s._v(" "),n("p",[s._v("6、slave 广播 Pong 消息通知其他集群节点")]),s._v(" "),n("blockquote",[n("p",[s._v("从节点并不是在主节点一进入 FAIL 状态就马上尝试发起选举，而是有一定延迟，一定的延迟确保我们等待FAIL 状态在集群中传播，slave 如果立即尝试选举，其它 masters 或许尚未意识到 FAIL 状态，可能会拒绝投票")])]),s._v(" "),n("p",[n("strong",[s._v("Redis集群为什么至少需要三个master节点，并且推荐节点数为奇数？")])]),s._v(" "),n("p",[s._v("因为新master的选举需要大于半数的集群master节点同意才能选举成功，如果只有两个master节点，当其中一个挂了， 是达不到选举新master的条件的。")]),s._v(" "),n("p",[s._v("奇数个master节点可以在满足选举该条件的基础上节省一个节点，比如三个master节点和四个master节点的集群相比， 大家如果都挂了一个master节点都能选举新master节点，如果都挂了两个master节点都没法选举新master节点了， 所以奇数的master节点更多的是从节省机器资源角度出发说的。")]),s._v(" "),n("h2",{attrs:{id:"消息发布-订阅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消息发布-订阅"}},[s._v("#")]),s._v(" 消息发布/订阅")]),s._v(" "),n("blockquote",[n("p",[s._v("进程间的一种消息通信模式，发送者（pub）发送消息，订阅者（sub）接收消息")])]),s._v(" "),n("p",[s._v("稍作了解即可，生产中消息发布订阅交给MQ来处理")]),s._v(" "),n("h2",{attrs:{id:"缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),n("h3",{attrs:{id:"缓存穿透"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),n("blockquote",[n("p",[s._v("缓存穿透，指的是key值在==缓存和数据库中都不存在==。每次针对key的请求从缓存中获取不到，请求都会到数据库，从而可能压垮数据库。如发起请求查找ID不存在的数据，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击，可能会压垮数据库")])]),s._v(" "),n("p",[n("strong",[s._v("解决方案")])]),s._v(" "),n("ol",[n("li",[s._v("API接口层增加校验，如用户鉴权校验，对Id做基础校验，Id小于0直接拦截")]),s._v(" "),n("li",[n("strong",[s._v("缓存空对象")]),s._v("，从缓存取不到的数据，在数据库中也没有取到，这时可以将"),n("code",[s._v("key-value")]),s._v("对写为"),n("code",[s._v("key-null")]),s._v("，缓存有效时间可以设置得短一点，如30s（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个Id暴力攻击")]),s._v(" "),n("li",[n("strong",[s._v("布隆过滤器")]),s._v("，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力")])]),s._v(" "),n("h3",{attrs:{id:"缓存击穿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[s._v("#")]),s._v(" 缓存击穿")]),s._v(" "),n("blockquote",[n("p",[s._v("缓存击穿，指的是在==缓存过期后，有大量的请求并发的请求过期的键==，这时因为缓存已经过期，所有的请求都发送到数据库中。")])]),s._v(" "),n("p",[n("strong",[s._v("解决方案")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("设置热点数据永不过期")])]),s._v(" "),n("li",[n("p",[s._v("加"),n("strong",[s._v("互斥锁")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" res "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDataFromCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// tryLock，获取成功，去数据库取数据")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryLock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            res "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDataFromCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setDataToCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放锁资源")]),s._v("\n            lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等待一段时间后再重新获取数据")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"缓存雪崩-缓存失效"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩-缓存失效"}},[s._v("#")]),s._v(" 缓存雪崩/缓存失效")]),s._v(" "),n("blockquote",[n("p",[s._v("缓存雪崩，是指==缓存中有数据大批量过期，而对过期缓存的查询量又巨大，此时查询都到数据库，引起数据库压力过大==。与缓存击穿不同的是，缓存击穿是并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据在缓存中都查不到从而查数据库")])]),s._v(" "),n("p",[n("strong",[s._v("解决方案")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("缓存数据的"),n("strong",[s._v("过期时间设置随机")]),s._v("，防止同一时间大量数据过期现象发生")])]),s._v(" "),n("li",[n("p",[s._v("通过加锁或者队列来控制读数据库写缓存的线程数量，比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。")])]),s._v(" "),n("li",[n("p",[s._v("如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中")])]),s._v(" "),n("li",[n("p",[s._v("设置热点数据永不过期")])]),s._v(" "),n("li",[n("p",[s._v("设置"),n("strong",[s._v("缓存标记")])]),s._v(" "),n("p",[s._v("缓存标记，记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新缓存。将缓存数据的过期时间设置为缓存标记过期时间的二倍。当标记缓存key过期后，实际缓存还能把旧数据返回给调用端，直到另外的线程在后台更新完成，才会返回新缓存")])])]),s._v(" "),n("h2",{attrs:{id:"淘汰策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#淘汰策略"}},[s._v("#")]),s._v(" 淘汰策略")]),s._v(" "),n("blockquote",[n("p",[s._v("因为 Redis 是基于内存的，内存的空间是非常宝贵的，所以数据不可能无上限的存储，必定会存在一个淘汰策略定期删除一些 key。")])]),s._v(" "),n("h3",{attrs:{id:"缓存淘汰策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存淘汰策略"}},[s._v("#")]),s._v(" 缓存淘汰策略")]),s._v(" "),n("blockquote",[n("p",[s._v("通过统计访问频率，将访问频率最少，即最不经常使用的 KV 淘汰")])]),s._v(" "),n("p",[s._v("那 Redis 的缓存淘汰策略有两种："),n("strong",[s._v("定时删除")]),s._v("和"),n("strong",[s._v("惰性删除")])]),s._v(" "),n("p",[s._v("如果 Redis 采用的是主从架构，那么以上两种淘汰策略是基于 Redis 主库的，每当主库触发了淘汰策略，即会在 AOF 文件写入一个"),n("code",[s._v("del")]),s._v("命令，而从库的淘汰策略是基于主从同步来完成的")]),s._v(" "),n("p",[n("strong",[s._v("1、定时删除")])]),s._v(" "),n("p",[s._v("Redis 将每个设置了过期时间的 key 放到一个独立的 Hash 表中，默认每秒定时遍历这个 hash 而不是整个 Redis 内存空间，并且 Redis 不会遍历所有的 key，而是采用一种贪心策略。步骤如下：")]),s._v(" "),n("p",[s._v("1）从过期 key 字典中，随机找20个 key；")]),s._v(" "),n("p",[s._v("2）删除 20 个 key 中过期的 key；")]),s._v(" "),n("p",[s._v("3）如果 2 中过期的 key 超过 1/4，则重复第一步")]),s._v(" "),n("blockquote",[n("p",[s._v("如果有大量的key在同一时间段内过期，就会造成数据库的集中访问，就是"),n("strong",[s._v("缓存雪崩")])])]),s._v(" "),n("p",[n("strong",[s._v("2、惰性删除")])]),s._v(" "),n("p",[s._v("因为定时删除会漏掉一部分已过期的 key 而没有被删除，所以 Redis 引入一个惰性删除来删除那些漏掉了的 key。客户端访问的时候，会对这个 key 的过期时间进行检查，如果过期了就立即删除")]),s._v(" "),n("h3",{attrs:{id:"内存淘汰机制-redis-内存满触发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存淘汰机制-redis-内存满触发"}},[s._v("#")]),s._v(" 内存淘汰机制（Redis 内存满触发）")]),s._v(" "),n("blockquote",[n("p",[s._v("如果定期删除漏掉了大量的 key，且后面也没有访问这些 key，没有触发惰性删除，那么内存中会残留大量垃圾 key。直到某一个时刻，Redis 内存总会被填满，此时 Redis 会触发内存淘汰机制")])]),s._v(" "),n("p",[s._v("Redis 配置文件中可以设置 maxmemory，内存的最大使用量，到达限度时会执行"),n("code",[s._v("内存淘汰机制")]),s._v("。没有配置时，"),n("code",[s._v("默认为no-eviction")])]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("名称")]),s._v(" "),n("th",[s._v("描述")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("volatile-lru")]),s._v(" "),n("td",[s._v("从"),n("code",[s._v("已设置过期时间")]),s._v("的数据集中挑选"),n("code",[s._v("最近最少使用")]),s._v("的数据淘汰")])]),s._v(" "),n("tr",[n("td",[s._v("volatile-lfu")]),s._v(" "),n("td",[s._v("从"),n("code",[s._v("已设置过期时间")]),s._v("的数据集中挑选"),n("code",[s._v("最不经常使用")]),s._v("的数据淘汰")])]),s._v(" "),n("tr",[n("td",[s._v("volatile-ttl")]),s._v(" "),n("td",[s._v("从"),n("code",[s._v("已设置过期时间")]),s._v("的数据集中挑选"),n("code",[s._v("将要过期")]),s._v("的数据淘汰")])]),s._v(" "),n("tr",[n("td",[s._v("volatile-random")]),s._v(" "),n("td",[s._v("从"),n("code",[s._v("已设置过期时间")]),s._v("的数据集中挑选"),n("code",[s._v("任意")]),s._v("的数据淘汰")])]),s._v(" "),n("tr",[n("td",[s._v("allkeys-lru")]),s._v(" "),n("td",[s._v("当"),n("code",[s._v("内存不足写入新数据")]),s._v("时，淘汰"),n("code",[s._v("最近最少使用")]),s._v("的Key")])]),s._v(" "),n("tr",[n("td",[s._v("allkeys-lfu")]),s._v(" "),n("td",[s._v("当"),n("code",[s._v("内存不足写入新数据")]),s._v("时，淘汰"),n("code",[s._v("最不经常使用")]),s._v("的Key")])]),s._v(" "),n("tr",[n("td",[s._v("allkeys-random")]),s._v(" "),n("td",[s._v("当"),n("code",[s._v("内存不足写入新数据")]),s._v("时，淘汰"),n("code",[s._v("随机选择")]),s._v("的Key")])]),s._v(" "),n("tr",[n("td",[s._v("no-eviction")]),s._v(" "),n("td",[s._v("当"),n("code",[s._v("内存不足写入新数据")]),s._v("时，写入操作会报错，同时不删除数据")])])])]),s._v(" "),n("h2",{attrs:{id:"渐进式-rehash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渐进式-rehash"}},[s._v("#")]),s._v(" 渐进式 Rehash")]),s._v(" "),n("p",[s._v("在 Redis 中，键值对（Key-Value）存储方式是由"),n("strong",[s._v("字典（Dict）"),n("strong",[s._v("保存的，而字典底层是通过")]),s._v("哈希表")]),s._v("来实现的。通过哈希表中的节点保存字典中的键值对。我们知道当 HashMap 中发生 Hash 冲突时，出于链表性能的考虑，会进行 Resize 的操作。Redis 也一样。")]),s._v(" "),n("p",[s._v("在 Redis 的具体实现中，使用了一种叫做 "),n("strong",[s._v("渐进式哈希（Rehash）")]),s._v(" 的机制来提高字典的缩放效率，避免 rehash 对服务器性能造成影响。==假如 Redis 中有大量的 key，一次性对全部的数据进行 Rehash，可能会导致 Redis 在一段时间内停止服务==。")]),s._v(" "),n("blockquote",[n("p",[s._v("在Redis中，哈希表扩容需要将 "),n("code",[s._v("哈希表0")]),s._v(" 里面的所有键值对 rehash 到 "),n("code",[s._v("哈希表1")]),s._v(" 里面， 但是这个 rehash 动作并不是一次性完成的， 而是分多次、渐进式地完成的")])]),s._v(" "),n("p",[n("strong",[s._v("rehash 步骤")])]),s._v(" "),n("ol",[n("li",[s._v("为 "),n("code",[s._v("哈希表1")]),s._v(" 分配空间，且空间大小为"),n("code",[s._v("哈希表0")]),s._v("的两倍， 让字典同时持有 "),n("code",[s._v("哈希表0")]),s._v(" 和 "),n("code",[s._v("哈希表1")]),s._v(" 两个哈希表")]),s._v(" "),n("li",[s._v("在字典中维持一个索引计数器变量 "),n("code",[s._v("rehashidx")]),s._v("（即哈希表的下标） ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始")]),s._v(" "),n("li",[s._v("在 rehash 进行期间， "),n("strong",[s._v("每次对字典执行 CRUD 操作时")]),s._v("， 程序除了执行指定的操作以外， 还会顺带将 "),n("code",[s._v("哈希表0")]),s._v(" 在 rehashidx 索引上的键值对 rehash，并放到 "),n("code",[s._v("哈希表1")]),s._v(" 。 当 rehash 工作完成之后， 程序将 rehashidx 属性的值+1")]),s._v(" "),n("li",[s._v("随着字典操作的不断执行， "),n("code",[s._v("哈希表0")]),s._v(" 的所有键值对都会被 rehash 至 "),n("code",[s._v("哈希表1")]),s._v(" ， 这时程序将 rehashidx 属性的值设为 -1 ， 表示 rehash 操作已完成。")])]),s._v(" "),n("p",[n("strong",[s._v("rehash 期间的 CRUD 操作")])]),s._v(" "),n("p",[s._v("因为在进行渐进式 rehash 的过程中， 字典会同时使用  "),n("code",[s._v("哈希表0")]),s._v(" 和 "),n("code",[s._v("哈希表1")]),s._v(" 两个哈希表， 所以在渐进式 rehash 进行期间， "),n("strong",[s._v("字典的CRUD操作会在两个哈希表上进行")]),s._v("。比如要在字典里面查找一个键的话， 程序会先在  "),n("code",[s._v("哈希表0")]),s._v(" 里面进行查找， 如果没找到的话， 就会继续到 "),n("code",[s._v("哈希表1")]),s._v(" 里面进行查找， 诸如此类。")]),s._v(" "),n("p",[s._v("另外， 在渐进式 rehash 执行期间， 新添加到字典的键值对一律会被保存到 "),n("code",[s._v("哈希表1")]),s._v(" 里面， 而 "),n("code",[s._v("哈希表0")]),s._v("则不再进行任何添加操作： 这一措施保证了 "),n("code",[s._v("哈希表0")]),s._v(" 包含的键值对数量会只减不增， 并随着 rehash 操作的执行而最终变成空表")]),s._v(" "),n("p",[n("strong",[s._v("rehash 带来的问题")])]),s._v(" "),n("p",[s._v("渐进式 rehash 避免了 Redis 阻塞，可以说非常完美。但是由于在 rehash 时需要分配一个新的 hash 表，在 rehash 期间，同时有两个 hash 表在使用，会使得 redis 内存使用量瞬间突增。如果当前 Redis 结点的内存占用量达到maxmemory，会触发内存淘汰机制，导致大量的 Key 被驱逐")]),s._v(" "),n("h2",{attrs:{id:"分布式锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[s._v("#")]),s._v(" 分布式锁")]),s._v(" "),n("h3",{attrs:{id:"mysql和redis双写-读写不一致"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mysql和redis双写-读写不一致"}},[s._v("#")]),s._v(" MySQL和Redis双写/读写不一致")]),s._v(" "),n("blockquote",[n("p",[s._v("在大的并发下，同时操作数据库与缓存会存在数据不一致性问题")])]),s._v(" "),n("p",[n("strong",[s._v("双写不一致")])]),s._v(" "),n("img",{staticStyle:{zoom:"67%"},attrs:{src:a(427),alt:"image-20210810141933541"}}),s._v(" "),n("p",[n("strong",[s._v("读写不一致")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(428),alt:"image-20210810142733895"}})]),s._v(" "),n("p",[n("strong",[s._v("解决方案")])]),s._v(" "),n("ol",[n("li",[s._v("对于并发几率很小的数据（如个人维度的订单数据、用户数据等)，这种几乎不用考虑这个问题，很少会发生缓存不一致，可以给缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。")]),s._v(" "),n("li",[s._v("并发很高，如果业务上能容忍短时间的缓存数据不一致（如商品名称，商品分类菜单等），缓存加上过期时间依然可以解决大部分业务对于缓存的要求。")]),s._v(" "),n("li",[s._v("如果不能容忍缓存数据不一致，可以通过"),n("strong",[s._v("加读写锁")]),s._v("保证并发读写或写写的时候按顺序排好队，读读的时候相当于无锁")]),s._v(" "),n("li",[s._v("也可以用阿里开源的"),n("strong",[s._v("canal")]),s._v("通过监听数据库的"),n("strong",[s._v("binlog日志")]),s._v("及时的去修改缓存，但是引入了新的中间件，增加了系统的复杂度")])]),s._v(" "),n("blockquote",[n("p",[s._v("canal 的工作原理就是把自己"),n("strong",[s._v("伪装成 MySQL slave")]),s._v("，模拟 MySQL slave 的交互协议向 MySQL Mater 发送 dump 协议，MySQL mater 收到 canal 发送过来的 dump 请求，开始推送 binary log 给 canal，然后 canal 解析 binary log，再发送到存储目的地。")])]),s._v(" "),n("p",[s._v("以上我们针对的都是"),n("strong",[s._v("读多写少")]),s._v("的情况加入缓存提高性能，==如果"),n("strong",[s._v("写多读多")]),s._v("的情况又不能容忍缓存数据不一致，那就没必要加缓存了，可以直接操作数据库==。放入缓存的数据应该是对实时性、一致性要求不是很高的数据。")]),s._v(" "),n("h3",{attrs:{id:"分布式锁实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁实现"}},[s._v("#")]),s._v(" 分布式锁实现")]),s._v(" "),n("blockquote",[n("p",[s._v("4种实现方式")])]),s._v(" "),n("p",[s._v("1、"),n("strong",[s._v("利用 setnx + expire 命令 (错误的做法)")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryLock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" requset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),s._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" jedis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setnx")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" requset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// result = 1时，设置成功，否则设置失败")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" jedis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("expire")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("setnx 和 expire 是分开的两步操作，不具有原子性，如果执行完第一条指令应用异常或者重启了，锁将无法过期。一种改善方案就是使用 Lua 脚本来保证原子性（包含 setnx 和 expire 两条指令）")]),s._v(" "),n("p",[s._v("2、"),n("strong",[s._v("使用Lua脚本（包含 setnx 和 expire 两条指令）")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryLock_with_lua")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UniqueId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" seconds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" lua_scripts "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"if redis.call('setnx',KEYS[1],ARGV[1]) == 1 then\"")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"redis.call('expire',KEYS[1],ARGV[2]) return 1 else return 0 end\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" keys "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" values "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    keys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UniqueId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("seconds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" jedis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("eval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lua_scripts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" keys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断是否成功")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("3、"),n("strong",[s._v("使用"),n("code",[s._v("set key value [EX seconds][PX milliseconds][NX|XX]")]),s._v("命令 (正确做法)")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[s._v("SET key value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("EX seconds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("PX milliseconds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NX"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("XX"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# EX seconds: 设定过期时间，单位为秒")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# PX milliseconds: 设定过期时间，单位为毫秒")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NX: 仅当key不存在时设置值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# XX: 仅当key存在时设置值")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("4、"),n("strong",[s._v("Redlock算法 与 Redisson 实现")])]),s._v(" "),n("p",[n("strong",[s._v("参考")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/c2841d65df4c",target:"_blank",rel:"noopener noreferrer"}},[s._v("死磕Redis5.0之跳跃表)"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/Pc8GWsRbqpnUC6ExMXtX9g",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis(2)——跳跃表"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/hunternet/p/11248192.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis数据结构——跳跃表 - Mr于 - 博客园 (cnblogs.com)"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6991080701365846046",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis系列-我用1W字总结了所有的点，确定不了解一下吗？"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6844903830442737671",target:"_blank",rel:"noopener noreferrer"}},[s._v("基于Redis的分布式锁实现"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6844904134764658702",target:"_blank",rel:"noopener noreferrer"}},[s._v("部门老大：redis 分布式锁再这么用，我就劝退你"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);
import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b41230ea.js";const o="/assets/architecture-2.a4db09e1.png",p="/assets/dubbo-protocol.12c4b330.jpg",g=JSON.parse('{"title":"Dubbo","description":"Apache Dubbo 是一款 RPC 服务开发框架，用于解决微服务架构下的服务治理与通信问题。","frontmatter":{"description":"Apache Dubbo 是一款 RPC 服务开发框架，用于解决微服务架构下的服务治理与通信问题。","tag":["微服务","Dubbo","后端"]},"headers":[],"relativePath":"posts/be/Dubbo/Dubbo.md","filePath":"posts/be/Dubbo/Dubbo.md","lastUpdated":1700657743000}'),e={name:"posts/be/Dubbo/Dubbo.md"},t=l('<h1 id="dubbo" tabindex="-1">Dubbo <a class="header-anchor" href="#dubbo" aria-label="Permalink to &quot;Dubbo&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><br><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>Apache Dubbo 是一款 RPC 服务开发框架，用于解决微服务架构下的服务治理与通信问题。</p><p>Dubbo 可以帮助解决如下微服务实践问题：</p><ul><li><strong>微服务编程范式和工具</strong>，Dubbo 支持基于 IDL 或语言特定方式的服务定义，提供多种形式的服务调用形式（如同步、异步、流式等）</li><li><strong>高性能的 RPC 通信</strong>，Dubbo 帮助解决微服务组件之间的通信问题，提供了基于 HTTP、HTTP/2、TCP 等的多种高性能通信协议实现，并支持序列化协议扩展，在实现上解决网络连接管理、数据传输等基础问题</li><li><strong>微服务监控与治理</strong>，Dubbo 官方提供的服务发现、动态配置、负载均衡、流量路由等基础组件可以很好的帮助解决微服务基础实践的问题。除此之外，还可以用 Admin 控制台监控微服务状态，通过周边生态完成限流降级、数据一致性、链路追踪等能力。</li></ul><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/core-features/ecosystem/" target="_blank" rel="noreferrer">Dubbo 生态</a></p></blockquote><br><h3 id="概念和架构" tabindex="-1">概念和架构 <a class="header-anchor" href="#概念和架构" aria-label="Permalink to &quot;概念和架构&quot;">​</a></h3><p><img src="'+o+`" alt="architecture"></p><p>Dubbo 从抽象架构上分为两层：<strong>服务治理抽象控制面</strong> 和 <strong>Dubbo 数据面</strong> 。</p><ul><li><strong>服务治理控制面</strong>。服务治理控制面不是特指如注册中心类的单个具体组件，而是对 Dubbo 治理体系的抽象表达。控制面包含协调服务发现的注册中心、流量管控策略、Dubbo Admin 控制台等，如果采用了 Service Mesh 架构则还包含 Istio 等服务网格控制面。</li><li><strong>Dubbo 数据面</strong>。数据面代表集群部署的所有 Dubbo 进程，进程之间通过 RPC 协议实现数据交换，Dubbo 定义了微服务应用开发与调用规范并负责完成数据传输的编解码工作。</li></ul><br><h2 id="简单使用" tabindex="-1">简单使用 <a class="header-anchor" href="#简单使用" aria-label="Permalink to &quot;简单使用&quot;">​</a></h2><h3 id="nacos-准备" tabindex="-1">nacos 准备 <a class="header-anchor" href="#nacos-准备" aria-label="Permalink to &quot;nacos 准备&quot;">​</a></h3><blockquote><p>用作配置管理与服务注册/发现</p></blockquote><p><a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html" target="_blank" rel="noreferrer">Nacos Spring Cloud 快速开始</a></p><h3 id="项目初始化" tabindex="-1">项目初始化 <a class="header-anchor" href="#项目初始化" aria-label="Permalink to &quot;项目初始化&quot;">​</a></h3><p><strong>依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.dubbo&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;dubbo-spring-boot-starter&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.dubbo&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;dubbo-spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>配置文件</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">dubbo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${spring.application.name}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">dubbo</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">registry</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">address</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos://localhost:8848</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Dubbo 3 版本以后，增加了是否注册消费者的参数 默认为 false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># address: nacos://localhost:8848?register-consumer-url=true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">dubbo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${spring.application.name}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">protocol</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">dubbo</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">registry</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">address</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos://localhost:8848</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Dubbo 3 版本以后，增加了是否注册消费者的参数 默认为 false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># address: nacos://localhost:8848?register-consumer-url=true</span></span></code></pre></div><p><strong>开启注解</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableDubbo</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Provider8801Main</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Provider8801Main.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableDubbo</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Provider8801Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Provider8801Main.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>API 模块</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProviderApi</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProviderApi</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>服务提供者</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DubboService</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProviderApiImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProviderApi</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dubbo provider&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> msg;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DubboService</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProviderApiImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProviderApi</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dubbo provider&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> msg;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>服务消费者</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/consumer&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConsumerController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">DubboReference</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ProviderApi providerApi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/str&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> providerApi.</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/consumer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConsumerController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">DubboReference</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ProviderApi providerApi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/str&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> providerApi.</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h2 id="进阶" tabindex="-1">进阶 <a class="header-anchor" href="#进阶" aria-label="Permalink to &quot;进阶&quot;">​</a></h2><br><h3 id="负载均衡" tabindex="-1">负载均衡 <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;负载均衡&quot;">​</a></h3><p>Dubbo 提供了多种均衡策略，默认为 <code>weighted random</code> 基于权重的随机负载均衡策略。具体实现上，Dubbo 提供的是客户端负载均衡，由 Consumer 通过负载均衡算法得出需要将请求提交到哪个 Provider 实例。</p><p><strong>负载均衡策略</strong></p><table><thead><tr><th>算法</th><th>特性</th><th>备注</th></tr></thead><tbody><tr><td>Weighted Random</td><td>加权随机</td><td>默认算法，默认权重相同</td></tr><tr><td><a href="https://cn.dubbo.apache.org/zh-cn/overview/core-features/load-balance/#roundrobin" target="_blank" rel="noreferrer">RoundRobin</a></td><td>加权轮询</td><td>借鉴于 Nginx 的平滑加权轮询算法，默认权重相同</td></tr><tr><td>LeastActive</td><td>最少活跃优先 + 加权随机</td><td>能者多劳的思想</td></tr><tr><td>Shortest-Response</td><td>最短响应优先 + 加权随机</td><td>更加关注响应速度，可能会造成流量过于集中于高性能节点的问题。</td></tr><tr><td><a href="https://cn.dubbo.apache.org/zh-cn/overview/core-features/load-balance/#consistenthash" target="_blank" rel="noreferrer">ConsistentHash</a></td><td>一致性哈希</td><td>确定的入参，确定的提供者，适用于有状态请求</td></tr></tbody></table><br><p><strong>自定义负载均衡算法</strong></p><p>在消费者端，继承 <code>org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance</code> 自定义实现 <code>select()</code> 方法。</p><br><h3 id="版本与分组" tabindex="-1">版本与分组 <a class="header-anchor" href="#版本与分组" aria-label="Permalink to &quot;版本与分组&quot;">​</a></h3><blockquote><p>灰度发布</p></blockquote><br><h3 id="协议支持" tabindex="-1">协议支持 <a class="header-anchor" href="#协议支持" aria-label="Permalink to &quot;协议支持&quot;">​</a></h3><ul><li>Dubbo</li><li>Triple</li><li>http REST</li><li>gRPC</li><li>Thrift</li><li>RMI</li></ul><br><blockquote><p><strong>RPC 协议的选择</strong></p><p>协议是 RPC 的核心，它规范了数据在网络中的传输内容和格式。除必须的请求、响应数据外，通常还会包含额外控制数据，如单次请求的序列化方式、超时时间、压缩方式和鉴权信息等。</p><p>协议的内容包含三部分</p><ul><li>数据交换格式：定义 RPC 的请求和响应对象在网络传输中的字节流内容，也叫作序列化方式</li><li>协议结构：定义包含字段列表和各字段语义以及不同字段的排列方式</li><li>协议通过定义规则、格式和语义来约定数据如何在网络间传输。一次成功的 RPC 需要通信的两端都能够按照协议约定进行网络字节流的读写和对象转换。</li></ul></blockquote><br><h4 id="dubbo-1" tabindex="-1">Dubbo <a class="header-anchor" href="#dubbo-1" aria-label="Permalink to &quot;Dubbo&quot;">​</a></h4><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/protocol/dubbo/" target="_blank" rel="noreferrer">官方介绍</a></p></blockquote><p>采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p><p>适用场景：常规远程服务方法调用，适合大并发小数据量的服务调用，服务消费者远大于服务提供者的情景。</p><p><img src="`+p+`" alt="dubbo-protocol.jpg"></p><ul><li>Transporter: mina/netty/grizzy</li><li>Serialization: dubbo/hessian2/java/json</li><li>参数及返回值需实现 <code>Serializable</code> 接口</li><li>参数及返回值不能自定义实现 <code>List</code>, <code>Map</code>, <code>Number</code>, <code>Date</code>, <code>Calendar</code> 等接口，只能用 JDK 自带的实现，因为 hessian 会做特殊处理，自定义实现类中的属性值都会丢失。</li><li>接口增加方法，对客户端无影响，如果该方法不是客户端需要的，客户端不需要重新部署。输入参数和结果集中增加属性，对客户端无影响，如果客户端并不需要新属性，不用重新部署。</li><li>输入参数和结果集属性名变化，对客户端序列化无影响，但是如果客户端不重新部署，不管输入还是输出，属性名变化的属性值是获取不到的。</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;20880&quot;</span><span style="color:#E1E4E8;"> /&gt; </span><span style="color:#6A737D;">&lt;!-- 配置协议和端口 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 多端口 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dubbo1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;20880&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dubbo2&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;20881&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:service</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interface</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">protocol</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;"> /&gt; </span><span style="color:#6A737D;">&lt;!-- 配置某个接口使用 --&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;20880&quot;</span><span style="color:#24292E;"> /&gt; </span><span style="color:#6A737D;">&lt;!-- 配置协议和端口 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 多端口 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dubbo1&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;20880&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dubbo2&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;20881&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:service</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interface</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">protocol</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;"> /&gt; </span><span style="color:#6A737D;">&lt;!-- 配置某个接口使用 --&gt;</span></span></code></pre></div><br><h4 id="triple" tabindex="-1">Triple <a class="header-anchor" href="#triple" aria-label="Permalink to &quot;Triple&quot;">​</a></h4><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/protocol/triple/" target="_blank" rel="noreferrer">官方介绍</a></p></blockquote><p>Triple 协议是 Dubbo3 推出的主力协议。Triple 意为第三代，通过 Dubbo1.0/ Dubbo2.0 两代协议的演进，以及云原生带来的技术标准化浪潮，Dubbo3 新协议 Triple 应运而生。</p><ul><li>性能上，Triple 协议采取了 metadata 和 payload 分离的策略，这样就可以避免中间设备，如网关进行 payload 的解析和反序列化，从而降低响应时间。</li><li>路由支持上，由于 metadata 支持用户添加自定义 header，用户可以根据 header 更方便的划分集群或者进行路由，发布的时候切流灰度或容灾都有了更高的灵活性。</li><li>安全性上，支持双向 TLS 认证（mTLS）等加密传输能力。</li></ul><br><h4 id="http-rest" tabindex="-1">http REST <a class="header-anchor" href="#http-rest" aria-label="Permalink to &quot;http REST&quot;">​</a></h4><ul><li>基于标准的 Java REST API 实现的 REST 调用支持</li><li>提供通过 web 访问服务的简单方式，将服务与其他基于 web 的应用程序集成</li><li>支持 JSON、XML 和 Text 格式的请求和响应，发布和使用服务的便捷方式，也提供了服务版本控制、服务过滤、服务元数据和服务参数，实现 Dubbo 框架的灵活性和可伸缩性。</li></ul><br><h4 id="grpc" tabindex="-1">gRPC <a class="header-anchor" href="#grpc" aria-label="Permalink to &quot;gRPC&quot;">​</a></h4><ul><li>基于 HTTP2 的协议足够简单，天然有 server push/ 多路复用 / 流量控制能力</li><li>基于 Protobuf 的多语言跨平台二进制兼容能力，提供强大的统一跨语言能力</li><li>从 Dubbo 3 开始，Dubbo 提供的 Triple 协议原生支持 gRPC 协议</li><li>对服务治理的支持比较基础，更偏向于基础的 RPC 功能，协议层缺少必要的统一定义，对于用户而言直接用起来并不容易。</li><li>强绑定 protobuf 的序列化方式</li></ul><br><h4 id="thrift" tabindex="-1">thrift <a class="header-anchor" href="#thrift" aria-label="Permalink to &quot;thrift&quot;">​</a></h4><ul><li><a href="http://thrift.apache.org/" target="_blank" rel="noreferrer">Thrift</a> 是 Facebook 捐给 Apache 的一个 RPC 框架。适用于 SOA 标准 RPC 框架</li><li>dubbo <code>2.3.0</code> 以上版本对 thrift 原生协议的扩展，在原生协议的基础上添加了一些额外的头信息，比如 service name，magic number 等</li></ul><br><h4 id="rmi" tabindex="-1">RMI <a class="header-anchor" href="#rmi" aria-label="Permalink to &quot;RMI&quot;">​</a></h4><ul><li><p>RMI 协议采用 JDK 标准的 <code>java.rmi.*</code> 实现，采用阻塞式短连接和 JDK 标准序列化方式</p></li><li><p>适用范围：传入传出参数数据包大小混合，消费者与提供者个数差不多，可传文件</p></li><li><p>适用场景：常规远程服务方法调用，与原生 RMI 服务互操作</p></li><li><p>参数及返回值需实现 <code>Serializable</code> 接口</p></li><li><p>dubbo 配置中的超时时间对 RMI 无效。</p><p>需使用 java 启动参数设置：<code>-Dsun.rmi.transport.tcp.responseTimeout=3000</code></p></li></ul><br><h3 id="协议更改" tabindex="-1">协议更改 <a class="header-anchor" href="#协议更改" aria-label="Permalink to &quot;协议更改&quot;">​</a></h3><h4 id="使用-http-协议" tabindex="-1">使用 http 协议 <a class="header-anchor" href="#使用-http-协议" aria-label="Permalink to &quot;使用 http 协议&quot;">​</a></h4><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/protocol/http/" target="_blank" rel="noreferrer">http demo</a></p></blockquote><p><strong>定义接口</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {    </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerUser</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {    </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerUser</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>服务提供者</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 指定访问 UserService 的 URL 相对路径是 /users，http://localhost:8080/users</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 指定访问 registerUser() 用 HTTP POST 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">POST</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 指定访问 registerUser() 方法的 URL 相对路径是 /register</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 结合上一个 @Path为UserService 指定的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 调用 UserService.register() 的完整路径为 http://localhost:8080/users/register</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;register&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 指定 registerUser() 接收 JSON 格式的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// REST 框架会自动将 JSON 数据反序列化为 User 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Consumes</span><span style="color:#E1E4E8;">({MediaType.APPLICATION_JSON})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerUser</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// save the user...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 指定访问 UserService 的 URL 相对路径是 /users，http://localhost:8080/users</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 指定访问 registerUser() 用 HTTP POST 方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">POST</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 指定访问 registerUser() 方法的 URL 相对路径是 /register</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 结合上一个 @Path为UserService 指定的路径</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 调用 UserService.register() 的完整路径为 http://localhost:8080/users/register</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;register&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 指定 registerUser() 接收 JSON 格式的数据</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// REST 框架会自动将 JSON 数据反序列化为 User 对象</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Consumes</span><span style="color:#24292E;">({MediaType.APPLICATION_JSON})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerUser</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// save the user...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>定义协议</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 用 rest 协议在8080端口暴露服务 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;rest&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;8080&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dubbo:service</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interface</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx.UserService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userService&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 和本地bean一样实现服务 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userService&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx.UserServiceImpl&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 用 rest 协议在8080端口暴露服务 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;rest&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;8080&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dubbo:service</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interface</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx.UserService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userService&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 和本地bean一样实现服务 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx.UserServiceImpl&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><br><h4 id="使用-triple-协议" tabindex="-1">使用 Triple 协议 <a class="header-anchor" href="#使用-triple-协议" aria-label="Permalink to &quot;使用 Triple 协议&quot;">​</a></h4><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/protocol/triple/#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F---java" target="_blank" rel="noreferrer">triple demo</a></p></blockquote><br><h4 id="使用-grpc-协议" tabindex="-1">使用 gRPC 协议 <a class="header-anchor" href="#使用-grpc-协议" aria-label="Permalink to &quot;使用 gRPC 协议&quot;">​</a></h4><blockquote><p><a href="https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-grpc" target="_blank" rel="noreferrer">gRPC demo</a></p></blockquote><br><h4 id="使用-thrift" tabindex="-1">使用 thrift <a class="header-anchor" href="#使用-thrift" aria-label="Permalink to &quot;使用 thrift&quot;">​</a></h4><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/protocol/thrift/#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F---java" target="_blank" rel="noreferrer">thrift demo</a></p></blockquote><br><h4 id="使用-rmi" tabindex="-1">使用 RMI <a class="header-anchor" href="#使用-rmi" aria-label="Permalink to &quot;使用 RMI&quot;">​</a></h4><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/protocol/rmi/#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F---java" target="_blank" rel="noreferrer">RMI demo</a></p></blockquote><br><h3 id="序列化方式" tabindex="-1">序列化方式 <a class="header-anchor" href="#序列化方式" aria-label="Permalink to &quot;序列化方式&quot;">​</a></h3><ul><li><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/serialization/hessian/" target="_blank" rel="noreferrer">Hessian</a>，dubbo 默认序列化方式。是一种支持动态类型、跨语言、基于对象传输的网络协议。</p><p>语言无关，支持脚本语言，Java 对象序列化的二进制流可以被其他语言。</p><p>不依赖外部描述文件或者接口定义，用一个字节表示常用的基础类型，极大缩短二进制流。</p></li><li><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/serialization/fastjson/" target="_blank" rel="noreferrer">Fastjson</a></p></li><li><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/serialization/fastjson2/" target="_blank" rel="noreferrer">Fastjson2</a></p></li><li><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/serialization/protobuf/" target="_blank" rel="noreferrer">protobuf</a></p></li></ul><h3 id="注册中心" tabindex="-1">注册中心 <a class="header-anchor" href="#注册中心" aria-label="Permalink to &quot;注册中心&quot;">​</a></h3><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/registry/" target="_blank" rel="noreferrer">官方介绍</a>，支持 zookeeper/nacos/consul/eureka/polaris/sofa</p></blockquote><h3 id="配置中心" tabindex="-1">配置中心 <a class="header-anchor" href="#配置中心" aria-label="Permalink to &quot;配置中心&quot;">​</a></h3><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/config-center/" target="_blank" rel="noreferrer">官方介绍</a>，支持 zookeeper/nacos/apollo</p></blockquote><h3 id="元数据中心" tabindex="-1">元数据中心 <a class="header-anchor" href="#元数据中心" aria-label="Permalink to &quot;元数据中心&quot;">​</a></h3><blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/what/ecosystem/metadata-center/" target="_blank" rel="noreferrer">官方介绍</a>，支持 zookeeper/nacos/redis</p></blockquote><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/home/" target="_blank" rel="noreferrer">dubbo doc</a></p>`,108),r=[t];function c(i,E,y,b,u,d){return a(),n("div",null,r)}const F=s(e,[["render",c]]);export{g as __pageData,F as default};

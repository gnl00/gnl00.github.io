import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b41230ea.js";const p="/assets/image-20230425184556819.3aef9d8a.png",e="/assets/image-20200509124942393.b80cee10.png",o="/assets/image-20200510091142500.14e197a4.png",A=JSON.parse('{"title":"Spring MVC","description":"Spring Web MVC 是建立在 Servlet API 上的 Web 框架","frontmatter":{"description":"Spring Web MVC 是建立在 Servlet API 上的 Web 框架","tag":["SpringMVC","后端"]},"headers":[],"relativePath":"posts/be/SpringWeb/SpringMVC/SpringMVC.md","filePath":"posts/be/SpringWeb/SpringMVC/SpringMVC.md","lastUpdated":1700722361000}'),t={name:"posts/be/SpringWeb/SpringMVC/SpringMVC.md"},r=l(`<h1 id="spring-mvc" tabindex="-1">Spring MVC <a class="header-anchor" href="#spring-mvc" aria-label="Permalink to &quot;Spring MVC&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p>Spring Web MVC 是建立在 Servlet API 上的 Web 框架</p></blockquote><br><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p><strong>依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-webmvc&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	&lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;@latest&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-webmvc&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  	&lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;@latest&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><br><h2 id="servlet" tabindex="-1">Servlet <a class="header-anchor" href="#servlet" aria-label="Permalink to &quot;Servlet&quot;">​</a></h2><p><strong>Servlet 容器</strong></p><p>先说<strong>容器</strong>概念，一个 Web 程序需要运行在一个 Web 容器中，如 Tomcat/Undertow 等，Web 容器为 Web 程序提供运行环境。Web 容器可以通过使用 Servlet 容器来管理 Servlet，以及进行监听和过滤请求等操作。</p><br><h3 id="servlet-config" tabindex="-1">Servlet Config <a class="header-anchor" href="#servlet-config" aria-label="Permalink to &quot;Servlet Config&quot;">​</a></h3><p>在一个 Servlet 环境中，可以通过编码或者 xml 配置的方式来配置 Servlet 容器的属性。</p><br><h3 id="dispatcherservlet" tabindex="-1">DispatcherServlet <a class="header-anchor" href="#dispatcherservlet" aria-label="Permalink to &quot;DispatcherServlet&quot;">​</a></h3><blockquote><p>Spring Web MVC 是基于 Servlet 构建的 Web 框架，DispatcherServlet 是核心类，用于将来自客户端的请求分发到其他组件，实际的工作是委托其他组件来完成的。</p><p>DispatcherServlet 和其它的 Servlet 一样，需要在 Java 或者 xml 文件中配置 Servlet 映射。</p></blockquote><h4 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h4><p><strong>编码实现</strong></p><blockquote><p>在 Servlet 容器中注册一个 DispatcherServlet 并配置映射</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyWebApplicationInitializer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebApplicationInitializer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onStartup</span><span style="color:#E1E4E8;">(ServletContext </span><span style="color:#FFAB70;">servletContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Load Spring web application configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">        AnnotationConfigWebApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AnnotationConfigWebApplicationContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(AppConfig.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Create and register the DispatcherServlet</span></span>
<span class="line"><span style="color:#E1E4E8;">        DispatcherServlet servlet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DispatcherServlet</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServletRegistration.Dynamic registration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> servletContext.</span><span style="color:#B392F0;">addServlet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">, servlet);</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 配置当前 DispatcherServlet 的启动优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 默认值是 -1</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 大于等于 0 表示容器必须在 ServletContext 的初始化阶段对当前 Servlet 进行实例化和初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">        registration.</span><span style="color:#B392F0;">setLoadOnStartup</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        registration.</span><span style="color:#B392F0;">addMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/app/*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWebApplicationInitializer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebApplicationInitializer</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onStartup</span><span style="color:#24292E;">(ServletContext </span><span style="color:#E36209;">servletContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Load Spring web application configuration</span></span>
<span class="line"><span style="color:#24292E;">        AnnotationConfigWebApplicationContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationConfigWebApplicationContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(AppConfig.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Create and register the DispatcherServlet</span></span>
<span class="line"><span style="color:#24292E;">        DispatcherServlet servlet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DispatcherServlet</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        ServletRegistration.Dynamic registration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> servletContext.</span><span style="color:#6F42C1;">addServlet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">, servlet);</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 配置当前 DispatcherServlet 的启动优先级</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 默认值是 -1</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 大于等于 0 表示容器必须在 ServletContext 的初始化阶段对当前 Servlet 进行实例化和初始化</span></span>
<span class="line"><span style="color:#24292E;">        registration.</span><span style="color:#6F42C1;">setLoadOnStartup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        registration.</span><span style="color:#6F42C1;">addMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/app/*&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>WebApplicationInitializer 是 Spring MVC 提供的一个接口，用于初始化和配置 Servlet 容器。</p><p>除此之外，还可以使用 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-container-config" target="_blank" rel="noreferrer">AbstractDispatcherServletInitializer</a> 重写对应的方法，以更方便的注册 DispatcherServlet 和修改容器配置：</p><ul><li>createDispatcherServlet，实现自定义 DispatcherServlet</li><li>getServletMappings，修改 Servlet 映射</li><li>getServletFilters，增加 Filter</li><li>...</li></ul><br><p><strong>xml 实现</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">web-app</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">listener</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">listener-class</span><span style="color:#E1E4E8;">&gt;org.springframework.web.context.ContextLoaderListener&lt;/</span><span style="color:#85E89D;">listener-class</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">listener</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">context-param</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">param-name</span><span style="color:#E1E4E8;">&gt;contextConfigLocation&lt;/</span><span style="color:#85E89D;">param-name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">param-value</span><span style="color:#E1E4E8;">&gt;/WEB-INF/app-context.xml&lt;/</span><span style="color:#85E89D;">param-value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">context-param</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">servlet</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">servlet-name</span><span style="color:#E1E4E8;">&gt;dispatcherServlet&lt;/</span><span style="color:#85E89D;">servlet-name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">servlet-class</span><span style="color:#E1E4E8;">&gt;org.springframework.web.servlet.DispatcherServlet&lt;/</span><span style="color:#85E89D;">servlet-class</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">load-on-startup</span><span style="color:#E1E4E8;">&gt;1&lt;/</span><span style="color:#85E89D;">load-on-startup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">servlet</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">servlet-mapping</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">servlet-name</span><span style="color:#E1E4E8;">&gt;dispatcherServlet&lt;/</span><span style="color:#85E89D;">servlet-name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">url-pattern</span><span style="color:#E1E4E8;">&gt;/*&lt;/</span><span style="color:#85E89D;">url-pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">servlet-mapping</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">web-app</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">web-app</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">listener</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">listener-class</span><span style="color:#24292E;">&gt;org.springframework.web.context.ContextLoaderListener&lt;/</span><span style="color:#22863A;">listener-class</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">listener</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">context-param</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">param-name</span><span style="color:#24292E;">&gt;contextConfigLocation&lt;/</span><span style="color:#22863A;">param-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">param-value</span><span style="color:#24292E;">&gt;/WEB-INF/app-context.xml&lt;/</span><span style="color:#22863A;">param-value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">context-param</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">servlet</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;dispatcherServlet&lt;/</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">servlet-class</span><span style="color:#24292E;">&gt;org.springframework.web.servlet.DispatcherServlet&lt;/</span><span style="color:#22863A;">servlet-class</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">load-on-startup</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">load-on-startup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">servlet</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">servlet-mapping</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;dispatcherServlet&lt;/</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;/*&lt;/</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">servlet-mapping</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">web-app</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><br><h4 id="webapplicationcontext" tabindex="-1">WebApplicationContext <a class="header-anchor" href="#webapplicationcontext" aria-label="Permalink to &quot;WebApplicationContext&quot;">​</a></h4><br><h4 id="分发请求" tabindex="-1">分发请求 <a class="header-anchor" href="#分发请求" aria-label="Permalink to &quot;分发请求&quot;">​</a></h4><p>当 DispatcherServlet 接收到请求时，它会将请求委派给<strong>指定的类</strong>来处理该请求，或者渲染指定的视图。</p><p><strong>指定的类</strong>，指的是由 Spring IoC 容器管理的，用于 Web 操作的实例对象，包括：</p><table><thead><tr><th>Bean type</th><th>解释说明</th></tr></thead><tbody><tr><td>HandlerMapping</td><td>将请求映射到对应 handler（handler 实际上对应的就是一个 Java 类），并带有一系列预处理和后处理拦截器。有两个主要实现类：RequestMappingHandlerMapping（用以支持 @RequestMapping） 和 SimpleUrlHandlerMapping（将 URL 与指定的 handler 映射）。</td></tr><tr><td>HandlerAdapter</td><td>帮助 DispatcherServlet 处理 handler 与 request 的映射</td></tr><tr><td>HandlerExceptionResolver</td><td>异常处理</td></tr><tr><td>ViewResolver</td><td>将 handler 返回的字符串视图名解析为一个实际的视图，并渲染到 response</td></tr><tr><td>LocaleResolver, LocaleContextResolver</td><td>提供国际化支持</td></tr><tr><td>ThemeResolver</td><td>主题解析器</td></tr><tr><td>MultipartResolver</td><td>文件上传相关的抽象类</td></tr><tr><td>FlashMapManager</td><td>通常用于重定向，保存和获取 <code>FlashMap</code>，可将属性保存到 FlashMap 中，重定向时从一个请求传递到另一个请求</td></tr></tbody></table><p>以上 9 个接口/类称为 Spring MVC 的 9 大组件。</p><p>Servlet 容器启动过程中，会检查 DispatcherServlet，看是否有上述 9 大组件的自定义实现。如果有，则进行配置；如果没有，则使用<a href="https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/resources/org/springframework/web/servlet/DispatcherServlet.properties" target="_blank" rel="noreferrer">默认配置</a>处理请求。</p><br><h4 id="请求处理流程" tabindex="-1">请求处理流程 <a class="header-anchor" href="#请求处理流程" aria-label="Permalink to &quot;请求处理流程&quot;">​</a></h4><p>1、当请求来到 DispatcherServlet，WebApplicationContext 会作为一个属性绑定在请求中，提供给其他组件使用，默认被绑定在 <code>DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE</code> 属性中；</p><p>2、如果需要 LocaleResolver，则将 LocaleResolver 绑定到请求上，以便让流程中的其他步骤在处理请求时使用（渲染视图、准备数据等）；</p><p>3、如果需要 ThemeResolver，则绑定到请求上；</p><p>4、如果指定 MultipartResolver，将请求包装成 MultipartHttpServletRequest；</p><p>5、查找合适的 handler。如果找到，将会运行一条与当前请求相关联的执行链（pre-processor/post-processor/controller），以准备渲染 model；对于带注解的 Controller，可以在 HandlerAdapter 中呈现响应而不是返回视图；</p><p>6、如果有 model 返回，则渲染对应的 view；如果没有 model 返回（可能是前/后置处理器拦截了该请求），则无需渲染 view，因为请求已经完成了</p><br><h3 id="web-mvc-config" tabindex="-1">Web MVC Config <a class="header-anchor" href="#web-mvc-config" aria-label="Permalink to &quot;Web MVC Config&quot;">​</a></h3><p>可以使用 @EnableWebMvc 注解来开启 Spring Web MVC 配置，xml 文件中使用 <code>&lt;mvc:annotation-driven&gt;</code> 来代替。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableWebMvc</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebConfig</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableWebMvc</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebConfig</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>如果想要扩展配置，可以自定义实现 WebMvcConfigurer 接口，并重写对应的方法</p><ul><li><p>addFormatters 自定义类型转换</p></li><li><p>addInterceptors 自定义拦截器</p></li><li><p>addCorsMappings 自定义跨域请求</p></li><li><p>configurePathMatch 自定义映射路径</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 加上统一前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">configurer.</span><span style="color:#B392F0;">addPathPrefix</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/api&quot;</span><span style="color:#E1E4E8;">, HandlerTypePredicate.</span><span style="color:#B392F0;">forAnnotation</span><span style="color:#E1E4E8;">(RestController.class));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 加上统一前缀</span></span>
<span class="line"><span style="color:#24292E;">configurer.</span><span style="color:#6F42C1;">addPathPrefix</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/api&quot;</span><span style="color:#24292E;">, HandlerTypePredicate.</span><span style="color:#6F42C1;">forAnnotation</span><span style="color:#24292E;">(RestController.class));</span></span></code></pre></div></li><li><p>...</p></li></ul><br><h3 id="路径匹配" tabindex="-1">路径匹配 <a class="header-anchor" href="#路径匹配" aria-label="Permalink to &quot;路径匹配&quot;">​</a></h3><p>Servlet API 依据 Servlet 映射，将完整的请求路径切分为 contextPath，servletPath 和 pathInfo 三部分。Spring MVC 在排除了 contextPath 和 servletMapping 这两个前缀路径之后，需要判断使用哪个 handler 来处理该请求。Spring MVC 在 5.3 版本引入 PathPatternParser 来解析请求路径，并在 6.0 版本正式启用。</p><br><h3 id="interceptor" tabindex="-1">Interceptor <a class="header-anchor" href="#interceptor" aria-label="Permalink to &quot;Interceptor&quot;">​</a></h3><p>所有的 HandlerMapping 实现类都支持使用拦截器进行拦截。所有的 Interceptor 都必须实现 HandlerInterceptor，并实现其中的三个方法：</p><ul><li>preHandle，handler 执行之前</li><li>postHandle，handler 执行之后</li><li>afterCompletion，request 请求完成之后</li></ul><blockquote><p>注意：在实现 preHandle 方法的时候需要返回 true/false 表示放行或者打断当前请求。返回 true 该请求才能被后续操作处理；如果返回 false，DispatcherServlet 则认为当前 Interceptor 有能力处理好当前请求，不会再将该请求在执行链上往下传递。</p></blockquote><br><h3 id="exception" tabindex="-1">Exception <a class="header-anchor" href="#exception" aria-label="Permalink to &quot;Exception&quot;">​</a></h3><p>如果在请求映射或者请求处理的过程中出现异常，DispatcherServlet 会把异常请求委托给 HandlerExceptionResolver 来处理。Spring 实现了一系列子类：</p><table><thead><tr><th>实现类</th><th>说明</th></tr></thead><tbody><tr><td>SimpleMappingExceptionResolver</td><td>处理视图渲染异常</td></tr><tr><td>DefaultHandlerExceptionResolver</td><td>处理 Spring MVC 内部异常</td></tr><tr><td>ResponseStatusExceptionResolver</td><td>处理标注 @ResponseStatus 注解的异常，并将响应状态和 HTTP 响应码映射</td></tr><tr><td>ExceptionHandlerExceptionResolver</td><td>处理 @Controller 或者 @ControllerAdvice 类中标注有 @ExceptionHandler 注解的方法出现的异常</td></tr></tbody></table><h3 id="异常责任链" tabindex="-1">异常责任链 <a class="header-anchor" href="#异常责任链" aria-label="Permalink to &quot;异常责任链&quot;">​</a></h3><p>通过在配置中声明多个 HandlerExceptionResolver，并根据需要设置它们的顺序属性来形成一个异常解析器链。顺序属性越高，异常解析器的位置就越靠后。如果前面的异常解析器无法处理，会将该异常提供给后续的解析器尝试，如果异常最后仍然无法解决，将会抛给 Servlet 容器。</p><br><h3 id="视图解析" tabindex="-1">视图解析 <a class="header-anchor" href="#视图解析" aria-label="Permalink to &quot;视图解析&quot;">​</a></h3><blockquote><p>Spring MVC 定义了 ViewResolver 和 View 接口，可以在浏览器中渲染模型，不需要绑定到特定的视图技术。ViewResolver 提供了视图名称和实际视图之间的映射</p></blockquote><p>Spring MVC 视图解析器支持重定向和转发操作：</p><ul><li>重定向 <code>redirect:</code></li><li>转发 <code>forward:</code></li></ul><blockquote><p>ContentNegotiatingViewResolver 不会自己解析视图，而是根据内容将请求委托给其他视图解析器。</p></blockquote><br><h2 id="filter" tabindex="-1">Filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;Filter&quot;">​</a></h2><p>Spring Web MVC 模块实现了几个常用的 Filter</p><ul><li><p>Form Data</p><p>FormContentFilter 可以拦截 <code>application/x-www-form-urlencoded</code> 类型的 HTTP PUT/PATCH/DELETE 请求</p></li><li><p>Forwarded Headers，Header 内容转发</p></li><li><p>Shallow ETag</p><p>通过缓存保存响应内容，并计算出 MD5 来创建一个 Shallow ETag。客户端下次发送时，比较两个请求的 MD5，如果两者相等，则返回 304（NOT_MODIFIED）</p></li><li><p>CORS</p><p>Spring MVC 通过 Controller 上的 @CorsFilter 注解为 CORS 配置提供了细粒度的支持（CorsFilter 的优先级应该总是最前面的）</p></li></ul><br><h2 id="controller" tabindex="-1">Controller <a class="header-anchor" href="#controller" aria-label="Permalink to &quot;Controller&quot;">​</a></h2><ul><li>@Controller，标注在类上，表示当前类是一个 <em>Controller</em></li><li>@RestController，由 @Controller 和 @ResponseBody 组合成的复合注解</li></ul><h2 id="requestmapping" tabindex="-1">RequestMapping <a class="header-anchor" href="#requestmapping" aria-label="Permalink to &quot;RequestMapping&quot;">​</a></h2><p>@RequestMapping 标注在类或方法上，支持多个参数 URL/HTTP 方法/请求参数/请求头/媒体类型</p><p><strong>存在 5 个变种</strong></p><ul><li><code>@GetMapping</code></li><li><code>@PostMapping</code></li><li><code>@PutMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PatchMapping</code></li></ul><br><p>在 Sprign MVC 中可以使用 <code>@GetMapping</code> 或者 <code>@RequestMapping(method = RequestMethod.GET)</code> 两种方法来发起 GET 请求（其他几种请求同理）</p><blockquote><p>注意：在一些 API 工具如 Postman/Apifox 等允许 GET 请求携带 json 请求体，但在编码中这“应该”是不被允许的。之所以说是“应该”，因为 Spring 框架并没有明令禁止这种做法，也不会抛出异常，但是如果 GET 请求和 <code>@RequestBody</code> 一起使用则可能会出现 <em>[405] Method Not Allow</em> 之类的错误。</p></blockquote><br><h2 id="请求处理方法" tabindex="-1">请求处理方法 <a class="header-anchor" href="#请求处理方法" aria-label="Permalink to &quot;请求处理方法&quot;">​</a></h2><h3 id="方法参数" tabindex="-1">方法参数 <a class="header-anchor" href="#方法参数" aria-label="Permalink to &quot;方法参数&quot;">​</a></h3><p><strong>默认参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>WebRequest/NativeWebRequest</td><td>对请求参数以及请求和会话属性的通用访问</td></tr><tr><td>ServletRequest/ServletResponse</td><td>当前处理的请求/响应</td></tr><tr><td>HttpSession</td><td>当前链接会话（线程不安全，当前链接共享同一个 Session）</td></tr><tr><td>PushBuilder</td><td>Servlet 4.0 开始，用于编程式 HTTP/2 资源推送</td></tr><tr><td>Principal</td><td>当前认证的用户，可能是一个特定的 Principal 实现类</td></tr><tr><td>HttpMethod</td><td>当前请求类型</td></tr><tr><td>Locale</td><td>当前请求 Locale</td></tr><tr><td>TimeZone/ZoneId</td><td>当前请求 TimeZone/ZoneId</td></tr><tr><td>InputStream/Reader</td><td>用于访问 Servlet API 暴露的原始请求体</td></tr><tr><td>OutputStream/Writer</td><td>用于访问 Servlet API 暴露的原始响应体</td></tr></tbody></table><br><p><strong>自定义参数</strong></p><ul><li><p><code>HttpEntity&lt;B&gt;</code></p><p>用于访问请求头和请求体，<code>&lt;B&gt;</code> 表示请求体类型，会使用 HttpMessageConverter 对请求体进行转换</p></li><li><p>@PathVariable，URI 路径变量</p></li><li><p>@RequestParam，请求携带的参数（包括文件）</p></li><li><p>@RequestHeader，访问请求头</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/demo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">RequestHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">) String encoding, </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">RequestHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Keep-Alive&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> keepAlive) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/demo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">RequestHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Accept-Encoding&quot;</span><span style="color:#24292E;">) String encoding, </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">RequestHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Keep-Alive&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> keepAlive) {}</span></span></code></pre></div></li><li><p>@CookieValue，访问请求携带的 Cookie</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/demo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">CookieValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JSESSIONID&quot;</span><span style="color:#E1E4E8;">) String cookie) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/demo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">CookieValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JSESSIONID&quot;</span><span style="color:#24292E;">) String cookie) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>@RequestBody，访问 HTTP 请求体，并通过 HttpMessageConverter 将请求体转换成指定对象</p></li><li><p>@RequestAttribute，标注在方法参数中，从 Request 中获取对应的属性值</p></li><li><p>@SessionAttribute，标注在方法参数中，从 Session 中获取对应的属性值</p></li><li><p>@MatrixVariable</p><p>用于访问 URI 路径中的 key-value 对，使用 <code>;</code> 分割。如请求 <code>GET /pets/42;q=11;r=22</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/pets/{petId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findPet</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String petId, @</span><span style="color:#F97583;">MatrixVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> q) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// petId == 42</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// q == 11</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GET /owners/42;q=11/pets/21;q=22</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/owners/{ownerId}/pets/{petId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findPet</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">MatrixVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;q&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">pathVar</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ownerId&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> q1,</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">MatrixVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;q&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">pathVar</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;petId&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> q2) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// q1 == 11</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// q2 == 22</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GET /owners/42;q=11;r=12/pets/21;q=22;s=23</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/owners/{ownerId}/pets/{petId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findPet</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">MatrixVariable</span><span style="color:#E1E4E8;"> MultiValueMap</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> matrixVars,</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">MatrixVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">pathVar</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;petId&quot;</span><span style="color:#E1E4E8;">) MultiValueMap</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> petMatrixVars) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// matrixVars: [&quot;q&quot; : [11,22], &quot;r&quot; : 12, &quot;s&quot; : 23]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// petMatrixVars: [&quot;q&quot; : 22, &quot;s&quot; : 23]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/pets/{petId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findPet</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> String petId, @</span><span style="color:#D73A49;">MatrixVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> q) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// petId == 42</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// q == 11</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GET /owners/42;q=11/pets/21;q=22</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/owners/{ownerId}/pets/{petId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findPet</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">MatrixVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;q&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">pathVar</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ownerId&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> q1,</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">MatrixVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;q&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">pathVar</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;petId&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> q2) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// q1 == 11</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// q2 == 22</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GET /owners/42;q=11;r=12/pets/21;q=22;s=23</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/owners/{ownerId}/pets/{petId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findPet</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">MatrixVariable</span><span style="color:#24292E;"> MultiValueMap</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> matrixVars,</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">MatrixVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">pathVar</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;petId&quot;</span><span style="color:#24292E;">) MultiValueMap</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> petMatrixVars) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// matrixVars: [&quot;q&quot; : [11,22], &quot;r&quot; : 12, &quot;s&quot; : 23]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// petMatrixVars: [&quot;q&quot; : 22, &quot;s&quot; : 23]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>Map/Model/ModelMap，和视图相关，可以将变量信息保存到 Map/Model/ModelMap 中，在视图中读取</p></li><li><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-modelattrib-method-args" target="_blank" rel="noreferrer">@ModelAttribute</a></p><p>和视图相关，可以使用 @ModelAttribute 注释来访问 Model 中的属性，或者如果不存在，则实例化该属性</p></li><li><p>@RequestPart，用于获取上传的文件数据</p></li><li><p>...</p></li></ul><br><h3 id="方法返回值" tabindex="-1">方法返回值 <a class="header-anchor" href="#方法返回值" aria-label="Permalink to &quot;方法返回值&quot;">​</a></h3><ul><li>String</li><li>void</li><li>@ResponseBody</li><li><code>ResponseEntity&lt;B&gt;</code></li><li>HttpHeaders，仅返回 Header，无响应体</li><li>View</li><li>Map/Model</li><li>...</li></ul><blockquote><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-return-types" target="_blank" rel="noreferrer">Return Values</a></p></blockquote><br><h3 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h3><blockquote><p>对于 Java 原生类型之外的类型，需要自定义类型转换器，将其转换成需要的对象实例</p></blockquote><br><h3 id="json-支持" tabindex="-1">JSON 支持 <a class="header-anchor" href="#json-支持" aria-label="Permalink to &quot;JSON 支持&quot;">​</a></h3><blockquote><p>Spring MVC Web 提供对 Jackson JSON 的支持</p></blockquote><br><h4 id="json-views" tabindex="-1">JSON Views <a class="header-anchor" href="#json-views" aria-label="Permalink to &quot;JSON Views&quot;">​</a></h4><blockquote><p>Spring MVC 为 Jackson 的序列化视图提供了内置支持，它只允许渲染一个对象中所有字段的子集。可以使用 Jackson 的 @JsonView 注解来激活一个序列化视图类。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">JsonView</span><span style="color:#E1E4E8;">(User.WithoutPasswordView.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;eric&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;7!jd#h23&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WithoutPasswordView</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WithPasswordView</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WithoutPasswordView</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String username;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String password;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> username;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> password;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">JsonView</span><span style="color:#E1E4E8;">(WithoutPasswordView.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getUsername</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.username;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">JsonView</span><span style="color:#E1E4E8;">(WithPasswordView.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getPassword</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.password;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">JsonView</span><span style="color:#24292E;">(User.WithoutPasswordView.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eric&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;7!jd#h23&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WithoutPasswordView</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WithPasswordView</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WithoutPasswordView</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String username;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String password;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">password</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> username;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">JsonView</span><span style="color:#24292E;">(WithoutPasswordView.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">JsonView</span><span style="color:#24292E;">(WithPasswordView.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.password;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h2 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h2><p>@ExceptionHandler 注解可以标注在 @Controller 和 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-controller-advice" target="_blank" rel="noreferrer">@ControllerAdvice</a> 类上，用来处理标注类方法出现的异常。对于匹配的异常类型，最好将目标异常作为方法参数来声明。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 处理此类方法中出现的 IOException</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ExceptionHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 缩小异常处理范围</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 只处理 IOException 的子异常：FileSystemException 和 RemoteException</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ExceptionHandler</span><span style="color:#E1E4E8;">({FileSystemException.class, RemoteException.class})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 处理此类方法中出现的 IOException</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 缩小异常处理范围</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 只处理 IOException 的子异常：FileSystemException 和 RemoteException</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">({FileSystemException.class, RemoteException.class})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><p><strong>@ControllerAdvice</strong></p><p>从 Spring MVC 5.3 开始，@ControllerAdvice 中标注有 @ExceptionHandler 的方法可以用来处理任何从 Controller/Handler 中抛出的异常，可以借助这个特性来实现全局异常处理。</p><p>@ControllerAdvice 和 @RestControllerAdvice 都是 Spring MVC 中的元注解，@RestControllerAdvice 是 @ControllerAdvice 和 @ResponseBody 组成的复合注解。</p><p>在启动的时候 RequestMappingHandlerMapping 和 ExceptionHandlerExceptionResolver 就开始扫描标有 @ControllerAdvice 的类，并在运行时应用。</p><p>异常只会被捕获一次，@ControllerAdvice 中标注有 @ExceptionHandler 的全局异常处理方法优先级低于类自身实现的标注 @ExceptionHandler 的方法。</p><p>如果存在多个 @ControllerAdvice 标注的类，可以在 @ControllerAdvice 中声明当前类处理的根异常，类方法中再缩小异常处理范围。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ControllerAdvice</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GlobalIOExceptionHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ExceptionHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { FileSystemException.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleFileSystemException</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, HttpServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ExceptionHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { FileUploadIOException.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleFileUploadException</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, HttpServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ExceptionHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { IOException.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleRootIOException</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, HttpServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ControllerAdvice</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GlobalIOExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { FileSystemException.class })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleFileSystemException</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { FileUploadIOException.class })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleFileUploadException</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { IOException.class })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleRootIOException</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Spring MVC 会根据异常最精确匹配来处理该异常，如果出现 FileUploadIOException，会交给 handleFileUploadException 方法来进行处理。</p><blockquote><p>异常处理方法<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-exceptionhandler-args" target="_blank" rel="noreferrer">参数</a>和<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-exceptionhandler-return-values" target="_blank" rel="noreferrer">返回值</a>与请求处理方法类似</p></blockquote><br><h2 id="异步请求" tabindex="-1">异步请求 <a class="header-anchor" href="#异步请求" aria-label="Permalink to &quot;异步请求&quot;">​</a></h2><p>首先将 Servlet 容器的异步请求支持开启</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Wrapper servlet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tomcat.</span><span style="color:#B392F0;">addServlet</span><span style="color:#E1E4E8;">(context, </span><span style="color:#9ECBFF;">&quot;dispatcherServlet&quot;</span><span style="color:#E1E4E8;">, dispatcherServlet);</span></span>
<span class="line"><span style="color:#E1E4E8;">servlet.</span><span style="color:#B392F0;">setLoadOnStartup</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">servlet.</span><span style="color:#B392F0;">addMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 开启异步请求支持</span></span>
<span class="line"><span style="color:#E1E4E8;">servlet.</span><span style="color:#B392F0;">setAsyncSupported</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Wrapper servlet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tomcat.</span><span style="color:#6F42C1;">addServlet</span><span style="color:#24292E;">(context, </span><span style="color:#032F62;">&quot;dispatcherServlet&quot;</span><span style="color:#24292E;">, dispatcherServlet);</span></span>
<span class="line"><span style="color:#24292E;">servlet.</span><span style="color:#6F42C1;">setLoadOnStartup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">servlet.</span><span style="color:#6F42C1;">addMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/*&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 开启异步请求支持</span></span>
<span class="line"><span style="color:#24292E;">servlet.</span><span style="color:#6F42C1;">setAsyncSupported</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span></code></pre></div><br><h3 id="方法返回值-1" tabindex="-1">方法返回值 <a class="header-anchor" href="#方法返回值-1" aria-label="Permalink to &quot;方法返回值&quot;">​</a></h3><blockquote><p>不管是返回 Callable 或者 DeferredResult，Servlet 容器都需要开启异步请求支持</p></blockquote><ul><li><p>Callable</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/callable&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Callable</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCallable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Before callable&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Callable&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; callable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// do something</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;callable do something&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;testCallable() callable execute Done&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;After callable&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> callable;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/callable&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Callable</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCallable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Before callable&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Callable&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; callable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// do something</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;callable do something&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;testCallable() callable execute Done&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;After callable&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> callable;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div></li><li><p>DeferredResult</p><p>一旦在 Servlet 容器中启用异步请求处理功能，控制器方法可以用 DeferredResult 包裹任何支持的控制器方法的返回值。返回的时候结果可能还没得到，可以将 DeferredResult 保存起来，在别的地方设置结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DeferredResult</span><span style="color:#E1E4E8;">&gt; defs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/getDef&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DeferredResult</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDeferred</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    DeferredResult&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; def </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> DeferredResult&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    defs.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getDeferred&quot;</span><span style="color:#E1E4E8;">, def);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> def;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/setDef&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSomething</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    DeferredResult def </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defs.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getDeferred&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    def.</span><span style="color:#B392F0;">setResult</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[TestController] - doSomething()&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DeferredResult</span><span style="color:#24292E;">&gt; defs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/getDef&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DeferredResult</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDeferred</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    DeferredResult&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; def </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> DeferredResult&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    defs.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getDeferred&quot;</span><span style="color:#24292E;">, def);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> def;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/setDef&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    DeferredResult def </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defs.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getDeferred&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    def.</span><span style="color:#6F42C1;">setResult</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[TestController] - doSomething()&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先执行 <code>GET /getDef</code> 请求，此时 DeferredResult 还未设置值，请求会一直循环等待。调用 <code>GET /setDef</code> 请求后，DeferredResult 的值设置成功，<code>GET /getDef</code> 请求获取到结果，结束等待。</p></li></ul><h3 id="执行流程" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程" aria-label="Permalink to &quot;执行流程&quot;">​</a></h3><p><strong>DeferredResult</strong></p><ul><li>Controller 返回 DeferredResult，并将其保存起来；</li><li>Spring MVC 调用 <code>request.startAsync()</code>；</li><li>同时 DispatcherServlet 和所有配置的过滤器退出请求处理线程，但响应仍然开放；</li><li>应用程序从某个线程设置 DeferredResult，Spring MVC 将请求分派回 Servlet 容器；</li><li>DispatcherServlet 被再次调用，处理异步生成的返回值。</li></ul><br><p><strong>Callable</strong></p><ul><li>Controller 返回 Callable；</li><li>Spring MVC 调用 <code>request.startAsync()</code>，并另外开启线程，执行 Callable；</li><li>同时，DispatcherServlet 和所有配置的过滤器退出请求处理线程，但响应仍然开放；</li><li>最终，Callable 产生一个结果，Spring MVC 将请求转发回 Servlet 容器以完成处理；</li><li>DispatcherServlet 再次被调用，并且处理从 Callable 中异步生成的返回值。</li></ul><br><h3 id="异步-spring-mvc-与-spring-webflux" tabindex="-1">异步 Spring MVC 与 Spring WebFlux <a class="header-anchor" href="#异步-spring-mvc-与-spring-webflux" aria-label="Permalink to &quot;异步 Spring MVC 与 Spring WebFlux&quot;">​</a></h3><ul><li><p>从<strong>设计</strong>上看</p><p>Servlet API 是为了实现 Filter-Servlet 链的单次通过而构建的。异步请求处理可以让应用程序退出 Filter-Servlet 链，但保留响应以供进一步处理。</p><p>Spring MVC 异步支持围绕该机制而建立。当一个控制器返回 DeferredResult 时，Filter-Servlet 链将被退出，并释放 Servlet 容器线程。当 DeferredResult 被设置时，会发出 ASYNC dispatch (到相同的 URL) ，在其中再映射一遍 Controller，但不是执行它；而是使用 DeferredResult 值(就好像 Controller 返回了它) 来重新处理流程。</p><p>相比之下，Spring WebFlux 不建立在 Servlet API 上的，不需要这样的异步请求处理功能，因为它在设计上就是异步的。</p></li><li><p><strong>编程模型</strong>角度上看</p><p>从编程模型的角度来看，Spring MVC 和 Spring WebFlux 都支持异步和 Reactive 类型作为控制器方法的返回值。但是 Spring MVC 对响应的单独写入仍然是阻塞的，而 WebFlux 依赖于非阻塞的 I/O，不需要为每次写入增加一个线程。</p></li><li><p>从<strong>配置</strong>的角度来看，异步请求处理功能必须在 Servlet 容器级别启用；WebFlux 则原生支持。</p></li></ul><br><h2 id="跨域请求" tabindex="-1">跨域请求 <a class="header-anchor" href="#跨域请求" aria-label="Permalink to &quot;跨域请求&quot;">​</a></h2><p>Spring MVC 的 HandlerMapping 实现提供了对 CORS 的内置支持。在成功地将一个请求映射到一个 Controller 后， HandlerMapping 会检查给定请求和 Controller 的 CORS 配置并采取进一步的行动。预检请求被直接处理，而实际的 CORS 请求会被拦截、验证，并设置必要的 CORS 响应头。</p><p>可以使用 @CrossOrigin 注解，标注在对应的 Controller 或对应的方法上，让该类/方法支持跨域请求。</p><br><h3 id="crossorigin" tabindex="-1">@CrossOrigin <a class="header-anchor" href="#crossorigin" aria-label="Permalink to &quot;@CrossOrigin&quot;">​</a></h3><p><strong>默认配置</strong></p><p>默认情况下，@CrossOrigin 允许</p><ul><li>All origins</li><li>All headers</li><li>All HTTP methods</li></ul><br><p><strong>标注位置</strong></p><ul><li><p>标注在类上</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CrossOrigin</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">origins</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://domain.com&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">maxAge</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3600</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountController</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CrossOrigin</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">origins</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://domain.com&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">maxAge</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3600</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountController</span><span style="color:#24292E;"> {}</span></span></code></pre></div></li><li><p>标注在方法上</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CrossOrigin</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/{id}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Account </span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> Long id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CrossOrigin</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/{id}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Account </span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> Long id) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>同时标注在类和方法上</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CrossOrigin</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">maxAge</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3600</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">CrossOrigin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://domain2.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/{id}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Account </span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> Long </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CrossOrigin</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">maxAge</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3600</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">CrossOrigin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://domain2.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/{id}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Account </span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> Long </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><br><h3 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to &quot;全局配置&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableWebMvc</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addCorsMappings</span><span style="color:#E1E4E8;">(CorsRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        registry.</span><span style="color:#B392F0;">addMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/api/**&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">allowedOrigins</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://domain2.com&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 最好设置准确的主机名，而不是 *</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">allowedMethods</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PUT&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;DELETE&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">allowedHeaders</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;header1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;header2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;header3&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">exposedHeaders</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;header1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;header2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">allowCredentials</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">maxAge</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3600</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Add more mappings...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableWebMvc</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addCorsMappings</span><span style="color:#24292E;">(CorsRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        registry.</span><span style="color:#6F42C1;">addMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/api/**&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowedOrigins</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://domain2.com&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 最好设置准确的主机名，而不是 *</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowedMethods</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PUT&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;DELETE&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowedHeaders</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;header1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;header2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;header3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">exposedHeaders</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;header1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;header2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowCredentials</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">maxAge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3600</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Add more mappings...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="cors-filter" tabindex="-1">CORS Filter <a class="header-anchor" href="#cors-filter" aria-label="Permalink to &quot;CORS Filter&quot;">​</a></h3><blockquote><p>...</p></blockquote><br><h2 id="原理解析" tabindex="-1">原理解析 <a class="header-anchor" href="#原理解析" aria-label="Permalink to &quot;原理解析&quot;">​</a></h2><h3 id="核心接口-类" tabindex="-1">核心接口/类 <a class="header-anchor" href="#核心接口-类" aria-label="Permalink to &quot;核心接口/类&quot;">​</a></h3><ul><li>DispatcherServlet</li><li>HandlerMapping</li><li>HandlerAdapter</li></ul><br><h4 id="dispatcherservlet-1" tabindex="-1">DispatcherServlet <a class="header-anchor" href="#dispatcherservlet-1" aria-label="Permalink to &quot;DispatcherServlet&quot;">​</a></h4><p>配置 DispatcherServlet 需要用到 WebApplicationContext（ApplicationContext 的子类）。WebApplicationContext 是 Spring 为 Web 应用提供的配置接口，在程序运行时，该接口是只读的，可以进行重载（如果子类允许）。</p><p>WebApplicationContext 为 ApplicationContext 接口增加了一个 getServletContext 方法。</p><br><h3 id="请求流程" tabindex="-1">请求流程 <a class="header-anchor" href="#请求流程" aria-label="Permalink to &quot;请求流程&quot;">​</a></h3><p>DispatcherServlet 在 onRefresh 方法调用一系列初始化逻辑，比如 initHandlerMappings 和 initHandlerExceptionResolvers 等组件的初始化。</p><blockquote><p>接收到请求：</p><p>-&gt; DispatcherServlet#doService -&gt; doDispatch -&gt; getHandler</p><p>-&gt; HandlerMapping#getHandler</p><p>-&gt; DispatcherServlet#getHandlerAdapter</p><p>-&gt; HandlerAdapter#handle // 真正执行目标方法</p><p>-&gt; DispatcherServlet#processDispatchResult</p></blockquote><blockquote><p><strong>具体流程</strong></p><ul><li>请求发送 -&gt; DispatcherServlet，DispatcherServlet 作为请求分发器，收到请求后将请求委派给其他组件处理</li><li>DispatcherServlet -&gt; HandlerMapping，HandlerMapping 会把请求映射为 HandlerExecutionChain 对象（其中包含 Handler 和 Interceptor）</li><li>DispatcherServlet -&gt; HandlerAdapter，把 Handler 包装成 Adapter，以支持执行不同 Handler</li><li>HandlerAdapter#handle 适配器执行目标方法，并返回一个 ModelAndView 对象</li><li>ViewResolver -&gt; 解析 ModelAndView 对象，并渲染对应的视图</li></ul></blockquote><p><img src="`+p+'" alt="image-20230425184556819"></p><br><h3 id="请求执行流程" tabindex="-1">请求执行流程 <a class="header-anchor" href="#请求执行流程" aria-label="Permalink to &quot;请求执行流程&quot;">​</a></h3><p><img src="'+e+`" alt="image-20200509124942393"></p><h3 id="流程细节" tabindex="-1">流程细节 <a class="header-anchor" href="#流程细节" aria-label="Permalink to &quot;流程细节&quot;">​</a></h3><h3 id="dodispatch" tabindex="-1">doDispatch <a class="header-anchor" href="#dodispatch" aria-label="Permalink to &quot;doDispatch&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">处理向处理程序的实际分派。 处理程序将通过依次应用servlet的HandlerMappings获得。 通过查询servlet已安装HandlerAdapters 来找到第一个支持处理程序类的HandlerAdapter。 所有HTTP方法均由该方法处理。由HandlerAdapters或处理程序自己决定可接受的方法。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doDispatch</span><span style="color:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">   HttpServletRequest processedRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request;</span></span>
<span class="line"><span style="color:#E1E4E8;">   HandlerExecutionChain mappedHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> multipartRequestParsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   WebAsyncManager asyncManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebAsyncUtils.</span><span style="color:#B392F0;">getAsyncManager</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ModelAndView mv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Exception dispatchException </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 检查是否为文件上传请求</span></span>
<span class="line"><span style="color:#E1E4E8;">         processedRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkMultipart</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">         multipartRequestParsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (processedRequest </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> request);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 确定处理当前请求的handler（Controller）</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 即：根据当前请求url找到能处理的类</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Determine handler for the current request.</span></span>
<span class="line"><span style="color:#E1E4E8;">         mappedHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHandler</span><span style="color:#E1E4E8;">(processedRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 如果找不到能处理当前请求的类(Controller/Handler)则404或者抛异常</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mappedHandler </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">noHandlerFound</span><span style="color:#E1E4E8;">(processedRequest, response);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 确定能执行当前请求的处理器适配器（RequestMappingHandlerAdapter）</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Determine handler adapter for the current request.</span></span>
<span class="line"><span style="color:#E1E4E8;">         HandlerAdapter ha </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHandlerAdapter</span><span style="color:#E1E4E8;">(mappedHandler.</span><span style="color:#B392F0;">getHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Process last-modified header, if supported by the handler.</span></span>
<span class="line"><span style="color:#E1E4E8;">         String method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isGet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(method);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isGet </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;HEAD&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(method)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> lastModified </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ha.</span><span style="color:#B392F0;">getLastModified</span><span style="color:#E1E4E8;">(request, mappedHandler.</span><span style="color:#B392F0;">getHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServletWebRequest</span><span style="color:#E1E4E8;">(request, response).</span><span style="color:#B392F0;">checkNotModified</span><span style="color:#E1E4E8;">(lastModified) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> isGet) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mappedHandler.</span><span style="color:#B392F0;">applyPreHandle</span><span style="color:#E1E4E8;">(processedRequest, response)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 处理器适配器来执行目标方法。处理器（Handler）/控制器（Controller）的方法被调用</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 将目标方法执行完后的返回值作为视图名，设置保存到ModelAndView中</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 无论目标方法内部如何工作，处理器适配器都会将执行完成之后的信息封装为ModelAndView</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Actually invoke the handler.</span></span>
<span class="line"><span style="color:#E1E4E8;">         mv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ha.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(processedRequest, response, mappedHandler.</span><span style="color:#B392F0;">getHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 判断当前方法是否是异步方法，如果是直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (asyncManager.</span><span style="color:#B392F0;">isConcurrentHandlingStarted</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 如果没有视图名，则设置一个默认的视图名。即请求的路径名</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">applyDefaultViewName</span><span style="color:#E1E4E8;">(processedRequest, mv);</span></span>
<span class="line"><span style="color:#E1E4E8;">         mappedHandler.</span><span style="color:#B392F0;">applyPostHandle</span><span style="color:#E1E4E8;">(processedRequest, response, mv);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         dispatchException </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// As of 4.3, we&#39;re processing Errors thrown from handler methods as well,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// making them available for @ExceptionHandler methods and other scenarios.</span></span>
<span class="line"><span style="color:#E1E4E8;">         dispatchException </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NestedServletException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Handler dispatch failed&quot;</span><span style="color:#E1E4E8;">, err);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 转发来到目标页面</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 根据方法最终执行完成之后的ModelAndView转发到相应的页面，并且将ModelAndView中的数据封装到请求域中</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">processDispatchResult</span><span style="color:#E1E4E8;">(processedRequest, response, mappedHandler, mv, dispatchException);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">triggerAfterCompletion</span><span style="color:#E1E4E8;">(processedRequest, response, mappedHandler, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">triggerAfterCompletion</span><span style="color:#E1E4E8;">(processedRequest, response, mappedHandler,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NestedServletException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Handler processing failed&quot;</span><span style="color:#E1E4E8;">, err));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (asyncManager.</span><span style="color:#B392F0;">isConcurrentHandlingStarted</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Instead of postHandle and afterCompletion</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mappedHandler </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            mappedHandler.</span><span style="color:#B392F0;">applyAfterConcurrentHandlingStarted</span><span style="color:#E1E4E8;">(processedRequest, response);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Clean up any resources used by a multipart request.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (multipartRequestParsed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">cleanupMultipart</span><span style="color:#E1E4E8;">(processedRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">处理向处理程序的实际分派。 处理程序将通过依次应用servlet的HandlerMappings获得。 通过查询servlet已安装HandlerAdapters 来找到第一个支持处理程序类的HandlerAdapter。 所有HTTP方法均由该方法处理。由HandlerAdapters或处理程序自己决定可接受的方法。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doDispatch</span><span style="color:#24292E;">(HttpServletRequest request, HttpServletResponse response) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">   HttpServletRequest processedRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request;</span></span>
<span class="line"><span style="color:#24292E;">   HandlerExecutionChain mappedHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> multipartRequestParsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   WebAsyncManager asyncManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebAsyncUtils.</span><span style="color:#6F42C1;">getAsyncManager</span><span style="color:#24292E;">(request);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      ModelAndView mv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      Exception dispatchException </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 检查是否为文件上传请求</span></span>
<span class="line"><span style="color:#24292E;">         processedRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkMultipart</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">         multipartRequestParsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (processedRequest </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> request);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 确定处理当前请求的handler（Controller）</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 即：根据当前请求url找到能处理的类</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Determine handler for the current request.</span></span>
<span class="line"><span style="color:#24292E;">         mappedHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHandler</span><span style="color:#24292E;">(processedRequest);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 如果找不到能处理当前请求的类(Controller/Handler)则404或者抛异常</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mappedHandler </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">noHandlerFound</span><span style="color:#24292E;">(processedRequest, response);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 确定能执行当前请求的处理器适配器（RequestMappingHandlerAdapter）</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Determine handler adapter for the current request.</span></span>
<span class="line"><span style="color:#24292E;">         HandlerAdapter ha </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHandlerAdapter</span><span style="color:#24292E;">(mappedHandler.</span><span style="color:#6F42C1;">getHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Process last-modified header, if supported by the handler.</span></span>
<span class="line"><span style="color:#24292E;">         String method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isGet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(method);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isGet </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;HEAD&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(method)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> lastModified </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ha.</span><span style="color:#6F42C1;">getLastModified</span><span style="color:#24292E;">(request, mappedHandler.</span><span style="color:#6F42C1;">getHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServletWebRequest</span><span style="color:#24292E;">(request, response).</span><span style="color:#6F42C1;">checkNotModified</span><span style="color:#24292E;">(lastModified) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> isGet) {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mappedHandler.</span><span style="color:#6F42C1;">applyPreHandle</span><span style="color:#24292E;">(processedRequest, response)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 处理器适配器来执行目标方法。处理器（Handler）/控制器（Controller）的方法被调用</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 将目标方法执行完后的返回值作为视图名，设置保存到ModelAndView中</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 无论目标方法内部如何工作，处理器适配器都会将执行完成之后的信息封装为ModelAndView</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Actually invoke the handler.</span></span>
<span class="line"><span style="color:#24292E;">         mv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ha.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(processedRequest, response, mappedHandler.</span><span style="color:#6F42C1;">getHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 判断当前方法是否是异步方法，如果是直接返回</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (asyncManager.</span><span style="color:#6F42C1;">isConcurrentHandlingStarted</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 如果没有视图名，则设置一个默认的视图名。即请求的路径名</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">applyDefaultViewName</span><span style="color:#24292E;">(processedRequest, mv);</span></span>
<span class="line"><span style="color:#24292E;">         mappedHandler.</span><span style="color:#6F42C1;">applyPostHandle</span><span style="color:#24292E;">(processedRequest, response, mv);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         dispatchException </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">err</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// As of 4.3, we&#39;re processing Errors thrown from handler methods as well,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// making them available for @ExceptionHandler methods and other scenarios.</span></span>
<span class="line"><span style="color:#24292E;">         dispatchException </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NestedServletException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Handler dispatch failed&quot;</span><span style="color:#24292E;">, err);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 转发来到目标页面</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 根据方法最终执行完成之后的ModelAndView转发到相应的页面，并且将ModelAndView中的数据封装到请求域中</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">processDispatchResult</span><span style="color:#24292E;">(processedRequest, response, mappedHandler, mv, dispatchException);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">triggerAfterCompletion</span><span style="color:#24292E;">(processedRequest, response, mappedHandler, ex);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">err</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">triggerAfterCompletion</span><span style="color:#24292E;">(processedRequest, response, mappedHandler,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NestedServletException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Handler processing failed&quot;</span><span style="color:#24292E;">, err));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (asyncManager.</span><span style="color:#6F42C1;">isConcurrentHandlingStarted</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Instead of postHandle and afterCompletion</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mappedHandler </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            mappedHandler.</span><span style="color:#6F42C1;">applyAfterConcurrentHandlingStarted</span><span style="color:#24292E;">(processedRequest, response);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Clean up any resources used by a multipart request.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (multipartRequestParsed) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">cleanupMultipart</span><span style="color:#24292E;">(processedRequest);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>总结</strong></p><ol><li><p>发送请求，DispatcherServlet 收到请求</p></li><li><p>调用 doDispatch() 处理请求</p><ol><li><p><code>getHandler(processedRequest);</code>，返回一条执行链（HandlerExecutionChain）。根据当前请求地址找到能处理此请求的handler（对应的Controller类）。</p><p><strong>根据当前请求，在HandlerMapping中找到这个请求的映射信息，获取目标处理器类</strong></p></li><li><p><code>getHandlerAdapter(mappedHandler.getHandler());</code>，返回（RequestMappingHandlerAdapter）。</p><p><strong>根据获取到的目标处理器类，找到当前能执行当前处理器类的的处理器适配器HandlerAdapter</strong></p></li><li><p><code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>调用处理器适配器的handler()方法利用反射执行目标方法</p></li><li><p>目标方法执行完成之后会返回一个ModelAndView对象</p></li><li><p>根据ModelAndView的信息转发到相应的页面，并将ModelAndView的信息封装到请求域中</p></li></ol></li></ol><h3 id="gethandler" tabindex="-1">getHandler <a class="header-anchor" href="#gethandler" aria-label="Permalink to &quot;getHandler&quot;">​</a></h3><p>怎么根据当前请求找到相应的类来处理？</p><p>getHandler()返回相应目标处理器的执行链</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> HandlerExecutionChain </span><span style="color:#B392F0;">getHandler</span><span style="color:#E1E4E8;">(HttpServletRequest request) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// HandlerMapping处理器映射器，保存了每个处理器（Handler）能处理哪些映射信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (HandlerMapping mapping </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         HandlerExecutionChain handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapping.</span><span style="color:#B392F0;">getHandler</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handler </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> HandlerExecutionChain </span><span style="color:#6F42C1;">getHandler</span><span style="color:#24292E;">(HttpServletRequest request) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// HandlerMapping处理器映射器，保存了每个处理器（Handler）能处理哪些映射信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (HandlerMapping mapping </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings) {</span></span>
<span class="line"><span style="color:#24292E;">         HandlerExecutionChain handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapping.</span><span style="color:#6F42C1;">getHandler</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handler </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> handler;</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="gethandleradapter" tabindex="-1">getHandlerAdapter <a class="header-anchor" href="#gethandleradapter" aria-label="Permalink to &quot;getHandlerAdapter&quot;">​</a></h3><p>如何找到目标处理器类的适配器？</p><p>需要用适配器来执行目标方法</p><p><img src="`+o+`" alt="image-20200510091142500"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> HandlerAdapter </span><span style="color:#B392F0;">getHandlerAdapter</span><span style="color:#E1E4E8;">(Object handler) throws ServletException {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerAdapters </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (HandlerAdapter adapter </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerAdapters) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (adapter.</span><span style="color:#B392F0;">supports</span><span style="color:#E1E4E8;">(handler)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> adapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServletException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No adapter for handler [&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> handler </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> HandlerAdapter </span><span style="color:#6F42C1;">getHandlerAdapter</span><span style="color:#24292E;">(Object handler) throws ServletException {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerAdapters </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (HandlerAdapter adapter </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerAdapters) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (adapter.</span><span style="color:#6F42C1;">supports</span><span style="color:#24292E;">(handler)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> adapter;</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServletException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No adapter for handler [&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="九大组件初始化" tabindex="-1">九大组件初始化 <a class="header-anchor" href="#九大组件初始化" aria-label="Permalink to &quot;九大组件初始化&quot;">​</a></h3><blockquote><p><strong>何为九大组件？</strong></p><p>SpringMVC 工作的时候的关键位置都是由这些组件完成的。</p><p>共同点：九大组件全部都是接口；接口就是规范，可自定义实现类，提供了强大的扩展性。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** MultipartResolver used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	文件上传解析器。与文件上传有关</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MultipartResolver multipartResolver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** LocaleResolver used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	区域信息解析器。与国际化有关</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> LocaleResolver localeResolver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** ThemeResolver used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	主题解析器。实现主题效果更换</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ThemeResolver themeResolver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of HandlerMappings used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	处理器映射器。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">HandlerMapping</span><span style="color:#E1E4E8;">&gt; handlerMappings;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of HandlerAdapters used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	处理器适配器。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">HandlerAdapter</span><span style="color:#E1E4E8;">&gt; handlerAdapters;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of HandlerExceptionResolvers used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	处理器异常解析器。与SpringMVC的异常解析功能有关</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">HandlerExceptionResolver</span><span style="color:#E1E4E8;">&gt; handlerExceptionResolvers;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** RequestToViewNameTranslator used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	请求到视图名转换器。若没有跳转到的试图，则默认将请求地址转换为视图名</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RequestToViewNameTranslator viewNameTranslator;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** FlashMapManager used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	FlashMap管理器。SpringMVC中允许携带数据重定向功能。</span></span>
<span class="line"><span style="color:#6A737D;">	数据取出即销毁。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> FlashMapManager flashMapManager;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of ViewResolvers used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	视图解析器。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ViewResolver</span><span style="color:#E1E4E8;">&gt; viewResolvers;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** MultipartResolver used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	文件上传解析器。与文件上传有关</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MultipartResolver multipartResolver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** LocaleResolver used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	区域信息解析器。与国际化有关</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LocaleResolver localeResolver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** ThemeResolver used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	主题解析器。实现主题效果更换</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ThemeResolver themeResolver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of HandlerMappings used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	处理器映射器。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">HandlerMapping</span><span style="color:#24292E;">&gt; handlerMappings;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of HandlerAdapters used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	处理器适配器。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">HandlerAdapter</span><span style="color:#24292E;">&gt; handlerAdapters;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of HandlerExceptionResolvers used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	处理器异常解析器。与SpringMVC的异常解析功能有关</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">HandlerExceptionResolver</span><span style="color:#24292E;">&gt; handlerExceptionResolvers;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** RequestToViewNameTranslator used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	请求到视图名转换器。若没有跳转到的试图，则默认将请求地址转换为视图名</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RequestToViewNameTranslator viewNameTranslator;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** FlashMapManager used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	FlashMap管理器。SpringMVC中允许携带数据重定向功能。</span></span>
<span class="line"><span style="color:#6A737D;">	数据取出即销毁。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> FlashMapManager flashMapManager;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** List of ViewResolvers used by this servlet.</span></span>
<span class="line"><span style="color:#6A737D;">	视图解析器。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ViewResolver</span><span style="color:#24292E;">&gt; viewResolvers;</span></span></code></pre></div><p><strong>初始化细节</strong></p><p>有些组件在容器中是使用类型查找的，有些组件是根据ID查找的。</p><p>如果在容器中没有找到需要的组件，则使用默认配置的组件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * org.springframework.web.servlet.DispatcherServlet#initStrategies</span></span>
<span class="line"><span style="color:#6A737D;"> * 初始化此servlet使用的策略对象。可以在子类中重写，以初始化其他策略对象。</span></span>
<span class="line"><span style="color:#6A737D;"> * Initialize the strategy objects that this servlet uses.</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initStrategies</span><span style="color:#E1E4E8;">(ApplicationContext context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initMultipartResolver</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initLocaleResolver</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initThemeResolver</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initHandlerMappings</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initHandlerAdapters</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initHandlerExceptionResolvers</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initRequestToViewNameTranslator</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initViewResolvers</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">initFlashMapManager</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * org.springframework.web.servlet.DispatcherServlet#initStrategies</span></span>
<span class="line"><span style="color:#6A737D;"> * 初始化此servlet使用的策略对象。可以在子类中重写，以初始化其他策略对象。</span></span>
<span class="line"><span style="color:#6A737D;"> * Initialize the strategy objects that this servlet uses.</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initStrategies</span><span style="color:#24292E;">(ApplicationContext context) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initMultipartResolver</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initLocaleResolver</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initThemeResolver</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initHandlerMappings</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initHandlerAdapters</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initHandlerExceptionResolvers</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initRequestToViewNameTranslator</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initViewResolvers</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">initFlashMapManager</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 初始化HandlerMappings</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initHandlerMappings</span><span style="color:#E1E4E8;">(ApplicationContext context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// this.detectAllHandlerMappings默认为true</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.detectAllHandlerMappings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 在ApplicationContext中查找所有HandlerMappings，包括父类上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span>
<span class="line"><span style="color:#E1E4E8;">      Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HandlerMapping</span><span style="color:#E1E4E8;">&gt; matchingBeans </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            BeanFactoryUtils.</span><span style="color:#B392F0;">beansOfTypeIncludingAncestors</span><span style="color:#E1E4E8;">(context, HandlerMapping.class, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">matchingBeans.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(matchingBeans.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// We keep HandlerMappings in sorted order.</span></span>
<span class="line"><span style="color:#E1E4E8;">         AnnotationAwareOrderComparator.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         HandlerMapping hm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(hm);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (NoSuchBeanDefinitionException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Ignore, we&#39;ll add a default HandlerMapping later.</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// Ensure we have at least one HandlerMapping, by registering</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// a default HandlerMapping if no other mappings are found.</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerMappings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefaultStrategies</span><span style="color:#E1E4E8;">(context, HandlerMapping.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isTraceEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         logger.</span><span style="color:#B392F0;">trace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No HandlerMappings declared for servlet &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getServletName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">&quot;&#39;: using default strategies from DispatcherServlet.properties&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 初始化HandlerMappings</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initHandlerMappings</span><span style="color:#24292E;">(ApplicationContext context) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// this.detectAllHandlerMappings默认为true</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.detectAllHandlerMappings) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 在ApplicationContext中查找所有HandlerMappings，包括父类上下文</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span>
<span class="line"><span style="color:#24292E;">      Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HandlerMapping</span><span style="color:#24292E;">&gt; matchingBeans </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            BeanFactoryUtils.</span><span style="color:#6F42C1;">beansOfTypeIncludingAncestors</span><span style="color:#24292E;">(context, HandlerMapping.class, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">matchingBeans.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(matchingBeans.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// We keep HandlerMappings in sorted order.</span></span>
<span class="line"><span style="color:#24292E;">         AnnotationAwareOrderComparator.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         HandlerMapping hm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(hm);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (NoSuchBeanDefinitionException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Ignore, we&#39;ll add a default HandlerMapping later.</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// Ensure we have at least one HandlerMapping, by registering</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// a default HandlerMapping if no other mappings are found.</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerMappings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDefaultStrategies</span><span style="color:#24292E;">(context, HandlerMapping.class);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isTraceEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         logger.</span><span style="color:#6F42C1;">trace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No HandlerMappings declared for servlet &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getServletName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#032F62;">&quot;&#39;: using default strategies from DispatcherServlet.properties&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="目标方法执行" tabindex="-1">目标方法执行 <a class="header-anchor" href="#目标方法执行" aria-label="Permalink to &quot;目标方法执行&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> ModelAndView </span><span style="color:#B392F0;">invokeHandlerMethod</span><span style="color:#E1E4E8;">(HttpServletRequest request,</span></span>
<span class="line"><span style="color:#E1E4E8;">      HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 将原生的request, response包装成webRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">   ServletWebRequest webRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServletWebRequest</span><span style="color:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取参数绑定工厂</span></span>
<span class="line"><span style="color:#E1E4E8;">      WebDataBinderFactory binderFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDataBinderFactory</span><span style="color:#E1E4E8;">(handlerMethod);</span></span>
<span class="line"><span style="color:#E1E4E8;">      ModelFactory modelFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModelFactory</span><span style="color:#E1E4E8;">(handlerMethod, binderFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      ServletInvocableHandlerMethod invocableMethod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createInvocableHandlerMethod</span><span style="color:#E1E4E8;">(handlerMethod);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.argumentResolvers </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 设置处理方法的参数解析器</span></span>
<span class="line"><span style="color:#E1E4E8;">         invocableMethod.</span><span style="color:#B392F0;">setHandlerMethodArgumentResolvers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.argumentResolvers);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.returnValueHandlers </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 设置处理方法的返回值处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">         invocableMethod.</span><span style="color:#B392F0;">setHandlerMethodReturnValueHandlers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.returnValueHandlers);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 设置参数绑定工厂</span></span>
<span class="line"><span style="color:#E1E4E8;">      invocableMethod.</span><span style="color:#B392F0;">setDataBinderFactory</span><span style="color:#E1E4E8;">(binderFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 设置参数名的发现者</span></span>
<span class="line"><span style="color:#E1E4E8;">      invocableMethod.</span><span style="color:#B392F0;">setParameterNameDiscoverer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parameterNameDiscoverer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      ModelAndViewContainer mavContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModelAndViewContainer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      mavContainer.</span><span style="color:#B392F0;">addAllAttributes</span><span style="color:#E1E4E8;">(RequestContextUtils.</span><span style="color:#B392F0;">getInputFlashMap</span><span style="color:#E1E4E8;">(request));</span></span>
<span class="line"><span style="color:#E1E4E8;">      modelFactory.</span><span style="color:#B392F0;">initModel</span><span style="color:#E1E4E8;">(webRequest, mavContainer, invocableMethod);</span></span>
<span class="line"><span style="color:#E1E4E8;">      mavContainer.</span><span style="color:#B392F0;">setIgnoreDefaultModelOnRedirect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ignoreDefaultModelOnRedirect);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      AsyncWebRequest asyncWebRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebAsyncUtils.</span><span style="color:#B392F0;">createAsyncWebRequest</span><span style="color:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="color:#E1E4E8;">      asyncWebRequest.</span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.asyncRequestTimeout);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      WebAsyncManager asyncManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebAsyncUtils.</span><span style="color:#B392F0;">getAsyncManager</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">      asyncManager.</span><span style="color:#B392F0;">setTaskExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.taskExecutor);</span></span>
<span class="line"><span style="color:#E1E4E8;">      asyncManager.</span><span style="color:#B392F0;">setAsyncWebRequest</span><span style="color:#E1E4E8;">(asyncWebRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">      asyncManager.</span><span style="color:#B392F0;">registerCallableInterceptors</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.callableInterceptors);</span></span>
<span class="line"><span style="color:#E1E4E8;">      asyncManager.</span><span style="color:#B392F0;">registerDeferredResultInterceptors</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deferredResultInterceptors);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (asyncManager.</span><span style="color:#B392F0;">hasConcurrentResult</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         Object result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> asyncManager.</span><span style="color:#B392F0;">getConcurrentResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         mavContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ModelAndViewContainer) asyncManager.</span><span style="color:#B392F0;">getConcurrentResultContext</span><span style="color:#E1E4E8;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">         asyncManager.</span><span style="color:#B392F0;">clearConcurrentResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         LogFormatUtils.</span><span style="color:#B392F0;">traceDebug</span><span style="color:#E1E4E8;">(logger, traceOn </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String formatted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LogFormatUtils.</span><span style="color:#B392F0;">formatValue</span><span style="color:#E1E4E8;">(result, </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">traceOn);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Resume with async result [&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> formatted </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">         });</span></span>
<span class="line"><span style="color:#E1E4E8;">         invocableMethod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocableMethod.</span><span style="color:#B392F0;">wrapConcurrentResult</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 执行目标方法</span></span>
<span class="line"><span style="color:#E1E4E8;">      invocableMethod.</span><span style="color:#B392F0;">invokeAndHandle</span><span style="color:#E1E4E8;">(webRequest, mavContainer);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (asyncManager.</span><span style="color:#B392F0;">isConcurrentHandlingStarted</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModelAndView</span><span style="color:#E1E4E8;">(mavContainer, modelFactory, webRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      webRequest.</span><span style="color:#B392F0;">requestCompleted</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> ModelAndView </span><span style="color:#6F42C1;">invokeHandlerMethod</span><span style="color:#24292E;">(HttpServletRequest request,</span></span>
<span class="line"><span style="color:#24292E;">      HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 将原生的request, response包装成webRequest</span></span>
<span class="line"><span style="color:#24292E;">   ServletWebRequest webRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServletWebRequest</span><span style="color:#24292E;">(request, response);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取参数绑定工厂</span></span>
<span class="line"><span style="color:#24292E;">      WebDataBinderFactory binderFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDataBinderFactory</span><span style="color:#24292E;">(handlerMethod);</span></span>
<span class="line"><span style="color:#24292E;">      ModelFactory modelFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getModelFactory</span><span style="color:#24292E;">(handlerMethod, binderFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      ServletInvocableHandlerMethod invocableMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createInvocableHandlerMethod</span><span style="color:#24292E;">(handlerMethod);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.argumentResolvers </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 设置处理方法的参数解析器</span></span>
<span class="line"><span style="color:#24292E;">         invocableMethod.</span><span style="color:#6F42C1;">setHandlerMethodArgumentResolvers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.argumentResolvers);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.returnValueHandlers </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 设置处理方法的返回值处理器</span></span>
<span class="line"><span style="color:#24292E;">         invocableMethod.</span><span style="color:#6F42C1;">setHandlerMethodReturnValueHandlers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.returnValueHandlers);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 设置参数绑定工厂</span></span>
<span class="line"><span style="color:#24292E;">      invocableMethod.</span><span style="color:#6F42C1;">setDataBinderFactory</span><span style="color:#24292E;">(binderFactory);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 设置参数名的发现者</span></span>
<span class="line"><span style="color:#24292E;">      invocableMethod.</span><span style="color:#6F42C1;">setParameterNameDiscoverer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.parameterNameDiscoverer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      ModelAndViewContainer mavContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModelAndViewContainer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      mavContainer.</span><span style="color:#6F42C1;">addAllAttributes</span><span style="color:#24292E;">(RequestContextUtils.</span><span style="color:#6F42C1;">getInputFlashMap</span><span style="color:#24292E;">(request));</span></span>
<span class="line"><span style="color:#24292E;">      modelFactory.</span><span style="color:#6F42C1;">initModel</span><span style="color:#24292E;">(webRequest, mavContainer, invocableMethod);</span></span>
<span class="line"><span style="color:#24292E;">      mavContainer.</span><span style="color:#6F42C1;">setIgnoreDefaultModelOnRedirect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ignoreDefaultModelOnRedirect);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      AsyncWebRequest asyncWebRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebAsyncUtils.</span><span style="color:#6F42C1;">createAsyncWebRequest</span><span style="color:#24292E;">(request, response);</span></span>
<span class="line"><span style="color:#24292E;">      asyncWebRequest.</span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.asyncRequestTimeout);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      WebAsyncManager asyncManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebAsyncUtils.</span><span style="color:#6F42C1;">getAsyncManager</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">      asyncManager.</span><span style="color:#6F42C1;">setTaskExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.taskExecutor);</span></span>
<span class="line"><span style="color:#24292E;">      asyncManager.</span><span style="color:#6F42C1;">setAsyncWebRequest</span><span style="color:#24292E;">(asyncWebRequest);</span></span>
<span class="line"><span style="color:#24292E;">      asyncManager.</span><span style="color:#6F42C1;">registerCallableInterceptors</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.callableInterceptors);</span></span>
<span class="line"><span style="color:#24292E;">      asyncManager.</span><span style="color:#6F42C1;">registerDeferredResultInterceptors</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deferredResultInterceptors);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (asyncManager.</span><span style="color:#6F42C1;">hasConcurrentResult</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         Object result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> asyncManager.</span><span style="color:#6F42C1;">getConcurrentResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         mavContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ModelAndViewContainer) asyncManager.</span><span style="color:#6F42C1;">getConcurrentResultContext</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">         asyncManager.</span><span style="color:#6F42C1;">clearConcurrentResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         LogFormatUtils.</span><span style="color:#6F42C1;">traceDebug</span><span style="color:#24292E;">(logger, traceOn </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String formatted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogFormatUtils.</span><span style="color:#6F42C1;">formatValue</span><span style="color:#24292E;">(result, </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">traceOn);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Resume with async result [&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> formatted </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         });</span></span>
<span class="line"><span style="color:#24292E;">         invocableMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocableMethod.</span><span style="color:#6F42C1;">wrapConcurrentResult</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 执行目标方法</span></span>
<span class="line"><span style="color:#24292E;">      invocableMethod.</span><span style="color:#6F42C1;">invokeAndHandle</span><span style="color:#24292E;">(webRequest, mavContainer);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (asyncManager.</span><span style="color:#6F42C1;">isConcurrentHandlingStarted</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getModelAndView</span><span style="color:#24292E;">(mavContainer, modelFactory, webRequest);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      webRequest.</span><span style="color:#6F42C1;">requestCompleted</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invokeAndHandle</span><span style="color:#E1E4E8;">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object... providedArgs) throws Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 执行目标方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object returnValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invokeForRequest</span><span style="color:#E1E4E8;">(webRequest, mavContainer, providedArgs);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">setResponseStatus</span><span style="color:#E1E4E8;">(webRequest);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (returnValue </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRequestNotModified</span><span style="color:#E1E4E8;">(webRequest) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getResponseStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> mavContainer.</span><span style="color:#B392F0;">isRequestHandled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">disableContentCachingIfNecessary</span><span style="color:#E1E4E8;">(webRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">         mavContainer.</span><span style="color:#B392F0;">setRequestHandled</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getResponseStatusReason</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      mavContainer.</span><span style="color:#B392F0;">setRequestHandled</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   mavContainer.</span><span style="color:#B392F0;">setRequestHandled</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   Assert.</span><span style="color:#B392F0;">state</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.returnValueHandlers </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;No return value handlers&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.returnValueHandlers.</span><span style="color:#B392F0;">handleReturnValue</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            returnValue, </span><span style="color:#B392F0;">getReturnValueType</span><span style="color:#E1E4E8;">(returnValue), mavContainer, webRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isTraceEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         logger.</span><span style="color:#B392F0;">trace</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">formatErrorForReturnValue</span><span style="color:#E1E4E8;">(returnValue), ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invokeAndHandle</span><span style="color:#24292E;">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span>
<span class="line"><span style="color:#24292E;">      Object... providedArgs) throws Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 执行目标方法</span></span>
<span class="line"><span style="color:#24292E;">   Object returnValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invokeForRequest</span><span style="color:#24292E;">(webRequest, mavContainer, providedArgs);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">setResponseStatus</span><span style="color:#24292E;">(webRequest);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (returnValue </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isRequestNotModified</span><span style="color:#24292E;">(webRequest) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getResponseStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> mavContainer.</span><span style="color:#6F42C1;">isRequestHandled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">disableContentCachingIfNecessary</span><span style="color:#24292E;">(webRequest);</span></span>
<span class="line"><span style="color:#24292E;">         mavContainer.</span><span style="color:#6F42C1;">setRequestHandled</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getResponseStatusReason</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">      mavContainer.</span><span style="color:#6F42C1;">setRequestHandled</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   mavContainer.</span><span style="color:#6F42C1;">setRequestHandled</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   Assert.</span><span style="color:#6F42C1;">state</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.returnValueHandlers </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;No return value handlers&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.returnValueHandlers.</span><span style="color:#6F42C1;">handleReturnValue</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            returnValue, </span><span style="color:#6F42C1;">getReturnValueType</span><span style="color:#24292E;">(returnValue), mavContainer, webRequest);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isTraceEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         logger.</span><span style="color:#6F42C1;">trace</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">formatErrorForReturnValue</span><span style="color:#24292E;">(returnValue), ex);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.cnblogs.com/lovozcf/p/14289531.html" target="_blank" rel="noreferrer">内置tomcat整合springMVC</a></p>`,200),c=[r];function E(y,i,d,u,F,g){return n(),a("div",null,c)}const v=s(t,[["render",E]]);export{A as __pageData,v as default};

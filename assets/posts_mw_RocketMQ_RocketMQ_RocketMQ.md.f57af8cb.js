import{_ as n,o as a,c as l,Q as p}from"./chunks/framework.b41230ea.js";const s="/assets/image-20210709151314177.2e7bd777.png",o="/assets/image-20230418211817701.33066e90.png",e="/assets/messagefilter0-ad2c8360f54b9a622238f8cffea12068.74476234.png",t="/assets/messagefilter-09e82bf396d7c4100ed742e8d0d2c185.deb31a3e.png",r="/assets/consumerprogress-da5f38e59a7fcb4ff40325b0f7fbf8a3.63a8a435.png",c="/assets/updateprogress-02d1a9de72aa4f72c3b1e1c6e03d2407.14a9d830.png",E="/assets/consumerprogress1-07d9f77dd7e62f2250330ed36f36fe3c.d053ebe9.png",y="/assets/lifecyclefornormal-e8a2a7e42a0722f681eb129b51e1bd66.0e4d780b.png",i="/assets/lifecyclefordelay-2ce8278df69cd026dd11ffd27ab09a17.e0924447.png",u="/assets/image-20220218172405186.731a6eda.png",d="/assets/image-20220218173727271.dedcac6b.png",F="/assets/image-20220218163903672.45167b21.png",g="/assets/lifecyclefortrans-fe4a49f1c9fdae5d590a64546722036f.43f43a4e.png",v=JSON.parse('{"title":"RocketMQ","description":"RocketMQ 是一个分布式的中间件服务，采用异步通信模型和发布/订阅消息传输模型。","frontmatter":{"description":"RocketMQ 是一个分布式的中间件服务，采用异步通信模型和发布/订阅消息传输模型。","tag":["RocketMQ","MQ","中间件"]},"headers":[],"relativePath":"posts/mw/RocketMQ/RocketMQ/RocketMQ.md","filePath":"posts/mw/RocketMQ/RocketMQ/RocketMQ.md","lastUpdated":1700722361000}'),h={name:"posts/mw/RocketMQ/RocketMQ/RocketMQ.md"},m=p(`<h1 id="rocketmq" tabindex="-1">RocketMQ <a class="header-anchor" href="#rocketmq" aria-label="Permalink to &quot;RocketMQ&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><em>为何需要 MQ？它能帮助我们做什么？</em></p><p>1、异步解耦，两个互相调用的系统之间解耦。</p><p>2、削峰，在系统遇到流量激增的情况下，消息队列可以将业务分散处理，保证系统的稳定性。</p><p>3、顺序收发，保证消息的 FIFO。</p><br><p><em>引入 MQ 又会带来什么问题？</em></p><p>1、系统可用性降低。外部依赖增加，一旦 MQ 宕机，就会对系统业务造成影响，要考虑高可用性。</p><p>2、系统复杂度提高。系统之间的远程调用从 RPC 变成了通过 MQ 进行异步调用。需要考虑消息是否被重复消费，怎么处理丢失消息，怎么保证消息传递的顺序性。</p><p>3、保证一致性问题。若是某个业务由多个系统一起完成，A 系统完成业务，通过 MQ 给 B、C、D 三个系统发送消息，如果 B 和 C 系统处理成功，D 系统处理失败，如何保证消息数据处理的一致性？此时就要考虑事务消息。</p><br><p><a href="https://juejin.cn/post/6844903511235231757" target="_blank" rel="noreferrer">RocketMQ 优势对比</a></p><p><a href="https://juejin.cn/post/6844904170651172871" target="_blank" rel="noreferrer">RocketMQ 与其他 MQ 的区别</a></p><br><h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h2><p><a href="https://rocketmq.apache.org/dowloading/releases/" target="_blank" rel="noreferrer">下载</a></p><p><a href="https://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noreferrer">Quick Start</a></p><br><p><strong>Windows 启动和关闭</strong></p><p>1、设置系统环境变量</p><p>2、设置系统环境变量</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ROCKETMQ_HOME=&quot;rocketmq 解压目录&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">NAMESRV_ADDR=&quot;localhost:9876&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ROCKETMQ_HOME=&quot;rocketmq 解压目录&quot;</span></span>
<span class="line"><span style="color:#24292e;">NAMESRV_ADDR=&quot;localhost:9876&quot;</span></span></code></pre></div><p>3、启动 NameServer</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">\\bin\\mqnamesrv.cmd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;">\\bin\\mqnamesrv.cmd</span></span></code></pre></div><p>4、启动 Broker</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">\\bin\\mqbroker.cmd </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:9876</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">autoCreateTopicEnable=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;">\\bin\\mqbroker.cmd </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:9876</span><span style="color:#24292E;"> </span><span style="color:#032F62;">autoCreateTopicEnable=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>5、关闭服务，直接关闭命令窗口即可（先关闭 Broker，再关闭 NameServer）</p><br><p><strong>Linux 启动和关闭</strong></p><p>1、修改 <code>rocketmq/bin/runserver.sh</code> 和 <code>runbroker.sh</code> 设置合适的 JVM 参数。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># runserver.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">JAVA_OPT</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">JAVA_OPT</span><span style="color:#9ECBFF;">} -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># runbroker.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">JAVA_OPT</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">JAVA_OPT</span><span style="color:#9ECBFF;">} -server -Xms256m -Xmx256m -Xmn128m&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># runserver.sh</span></span>
<span class="line"><span style="color:#24292E;">JAVA_OPT</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">JAVA_OPT</span><span style="color:#032F62;">} -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># runbroker.sh</span></span>
<span class="line"><span style="color:#24292E;">JAVA_OPT</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">JAVA_OPT</span><span style="color:#032F62;">} -server -Xms256m -Xmx256m -Xmn128m&quot;</span></span></code></pre></div><p>2、启动 NameServer</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 以后台运行的方式启动 nameserver，需要注意带的是公网 IP，而不是 localhost</span></span>
<span class="line"><span style="color:#B392F0;">nohup</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sh</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bin/mqnamesrv</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">公网IP:9876</span><span style="color:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="color:#6A737D;"># 从日志查看是否成功启动，tial -f</span></span>
<span class="line"><span style="color:#6A737D;"># control+c 退出日志</span></span>
<span class="line"><span style="color:#B392F0;">tail</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/logs/rocketmqlogs/namesrv.log</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 以后台运行的方式启动 nameserver，需要注意带的是公网 IP，而不是 localhost</span></span>
<span class="line"><span style="color:#6F42C1;">nohup</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin/mqnamesrv</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">公网IP:9876</span><span style="color:#24292E;"> &amp;</span></span>
<span class="line"><span style="color:#6A737D;"># 从日志查看是否成功启动，tial -f</span></span>
<span class="line"><span style="color:#6A737D;"># control+c 退出日志</span></span>
<span class="line"><span style="color:#6F42C1;">tail</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/logs/rocketmqlogs/namesrv.log</span></span></code></pre></div><p>4、启动 Broker</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 以后台运行的方式启动 broker，并连接到 nameserver</span></span>
<span class="line"><span style="color:#6A737D;"># 修改 conf/broker.conf，添加 brokerIP1=公网IP</span></span>
<span class="line"><span style="color:#B392F0;">nohup</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sh</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bin/mqbroker</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nameserver公网IP:9876</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">conf/broker.conf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">autoCreateTopicEnable=</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="color:#6A737D;"># 查看是否启动成功</span></span>
<span class="line"><span style="color:#B392F0;">tail</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/logs/rocketmqlogs/broker.log</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 以后台运行的方式启动 broker，并连接到 nameserver</span></span>
<span class="line"><span style="color:#6A737D;"># 修改 conf/broker.conf，添加 brokerIP1=公网IP</span></span>
<span class="line"><span style="color:#6F42C1;">nohup</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin/mqbroker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nameserver公网IP:9876</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">conf/broker.conf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">autoCreateTopicEnable=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> &amp;</span></span>
<span class="line"><span style="color:#6A737D;"># 查看是否启动成功</span></span>
<span class="line"><span style="color:#6F42C1;">tail</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/logs/rocketmqlogs/broker.log</span></span></code></pre></div><p>5、关闭服务</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 先关闭 broker</span></span>
<span class="line"><span style="color:#B392F0;">sh</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bin/mqshutdown</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">broker</span></span>
<span class="line"><span style="color:#6A737D;"># 再关闭 nameserver</span></span>
<span class="line"><span style="color:#B392F0;">sh</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bin/mqshutdown</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">namesrv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 先关闭 broker</span></span>
<span class="line"><span style="color:#6F42C1;">sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin/mqshutdown</span><span style="color:#24292E;"> </span><span style="color:#032F62;">broker</span></span>
<span class="line"><span style="color:#6A737D;"># 再关闭 nameserver</span></span>
<span class="line"><span style="color:#6F42C1;">sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin/mqshutdown</span><span style="color:#24292E;"> </span><span style="color:#032F62;">namesrv</span></span></code></pre></div><br><p>测试消息发送与消费测试（Windows 为例）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 发送</span></span>
<span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">\\bin\\tools.cmd </span><span style="color:#9ECBFF;">org.apache.rocketmq.example.quickstart.Producer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 消费</span></span>
<span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">\\bin\\tools.cmd  </span><span style="color:#9ECBFF;">org.apache.rocketmq.example.quickstart.Consumer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 发送</span></span>
<span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;">\\bin\\tools.cmd </span><span style="color:#032F62;">org.apache.rocketmq.example.quickstart.Producer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 消费</span></span>
<span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;">\\bin\\tools.cmd  </span><span style="color:#032F62;">org.apache.rocketmq.example.quickstart.Consumer</span></span></code></pre></div><br><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="主要角色" tabindex="-1">主要角色 <a class="header-anchor" href="#主要角色" aria-label="Permalink to &quot;主要角色&quot;">​</a></h3><p>RocketMQ 主要包含以下角色：</p><ul><li>NameServer，提供轻量级的服务发现和路由；</li><li>Broker 负责存储消息；</li><li>Producer 负责生产消息；</li><li>Consumer 负责消费消息；</li><li>Group，具有相同角色组成 Group，分为 <em>Producer Group</em> 和 <em>Consumer Group</em>。如果原生产者交易崩溃，Broker 可以联系同一个组的不同生产者进行提交或回退交易。</li></ul><p><img src="`+s+'" alt="image-20210709151314177"></p><br><h4 id="nameserver" tabindex="-1">NameServer <a class="header-anchor" href="#nameserver" aria-label="Permalink to &quot;NameServer&quot;">​</a></h4><p>命名服务。类似于注册中心（Zookeeper/Eureka），提供轻量级的服务发现和路由。主要进行 Broker 管理和路由信息管理，保存 Topic、消息队列等信息。</p><p>NameServer 接受来自 Broker 群集的注册，并提供检测信号机制以检查 Broker 是否还存在。多个 NameServer 实例组成集群。</p><blockquote><p>集群中的 NameServer 节点之间相互独立，不会进行信息交换。</p></blockquote><br><h4 id="broker" tabindex="-1">Broker <a class="header-anchor" href="#broker" aria-label="Permalink to &quot;Broker&quot;">​</a></h4><p>消息存储中心，接收来自生产者的消息并存储，提供给消费者读取。单个 Broker 节点与所有的 NameServer 节点保持长连接及心跳，并会定时将 Topic 信息注册到 NameServer。Broker 负责消息存储，以 Topic 为维度支持轻量级的队列。</p><br><h4 id="生产者" tabindex="-1">生产者 <a class="header-anchor" href="#生产者" aria-label="Permalink to &quot;生产者&quot;">​</a></h4><p>负责产生消息，并向 Broker 发送消息，发送过程支持快速失败并且延迟低。生产者支持分布式部署，分布式生产者通过多种负载平衡模式将消息发送到 Broker 集群。支持三种方式发送消息：同步、异步和单向。</p><br><h4 id="消费者" tabindex="-1">消费者 <a class="header-anchor" href="#消费者" aria-label="Permalink to &quot;消费者&quot;">​</a></h4><p>负责消费消息，消费者从 Broker 拉取信息。RocketMQ 的消费者支持<strong>推/拉</strong>模型，还支持集群使用和消息广播。</p><br><h3 id="消息模型" tabindex="-1">消息模型 <a class="header-anchor" href="#消息模型" aria-label="Permalink to &quot;消息模型&quot;">​</a></h3><p><strong>主题</strong>（Topic）</p><p>负责消息存储（逻辑上），表示<strong>消息的第一级类型</strong>，是最细粒度的订阅单位。每个 Broker 定义多个 Topic，每个 Topic 中的消息也可以<strong>分片</strong>存储在不同 Broker 上。Topic 一般为领域范围，比如交易和物流，是两个不同的领域，可以分为两个 Topic。</p><blockquote><p>一个消费者组可以订阅多个 Topic 的消息，同一个组中的消费者必须订阅相同的 Topic。（可以看下面的图理解）</p></blockquote><br><p><em><strong>Message Queue</strong></em></p><p>消息队列，Topic 被划分为一个或多个消息队列。负责存储消息的物理地址。所有消息队列都是持久化的，消息队列的引入使得消息的存储可以分布式集群化，具有了水平扩展能力。相当于 Kafka 中的 Partition。</p><br><p><strong>标签</strong>（Tag）</p><p>可以看作子主题，表示<strong>消息的第二级类型</strong>，可以使用相同的 Topic，不同的 Tag 来表示同一业务模块的不同任务的消息，比如交易消息又可以分为：交易创建消息，交易完成消息等。</p><br><p><strong>消息</strong>（Message）</p><p>Message 必须包含一个 Topic，可选的 Tag。</p><br><blockquote><p>*注意：同一个消费者组的消费者必须具有完全相同的 Topic 订阅。</p><p><img src="'+o+`" alt="image-20230418211817701"></p><p>因为 RocketMQ 中消息队列在分配消息的时候是以消费组为单位的，而组又会根据每个消费者的消费情况进行负载均衡消费分配，而不会在意消费者订阅了哪个主题。</p><p>假设存在 TopicA 和 TopicB，以及 ConsumerA 和 ConsumerB，ConsumerA 订阅 TopicB，ConsumerB 订阅 TopicA。当有 TopicA 或 TopicB 消息分发到消费者组时，消费者组不关注哪个消费者订阅了哪个 Topic，它只会将消息均匀分配给群组内的消费者。此时可能会将 TopicA 的消息分发给 ConsumerA，但是 ConsumerA 并没有订阅该主题，就可能会报错：<em>the consumer&#39;s subscription not exist</em>。</p></blockquote><br><h3 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h3><p>1、启动 NameServer。等待 Broker/Producer/Consumer 连接。</p><p>2、启动 Broker，注册到每一个 NameServer。</p><p>注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。Broker 跟所有的 NameServer 保持长连接，定时发送心跳包。心跳包中包含当前 Broker 信息（IP/端口等）以及存储所有 Topic 信息。</p><p>3、创建 Topic。</p><p>收发消息前先创建 Topic ，需要指定该 Topic 要存储在哪些 Broker上，也可以在发送消息时自动创建Topic。</p><p>4、Producer 生产消息。</p><p>Producer 启动后先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中获取当前消息发送的 Topic 存在哪些 Broker 上。然后跟对应的 Broker 建立长连接，并定时向 Broker 定时发送心跳。</p><blockquote><p>Producer 可直接向 Broker 发消息，但是只能发送到 Broker 集群中的 Master。</p></blockquote><p>5、Consumer 消费消息。</p><p>Consumer 启动后先跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在哪些 Broker 上。然后直接跟 Broker 建立连接通道，开始消费消息。</p><blockquote><p>与 Producer 不同：Consumer 可同时向 Broker 的 Master 和 Broker Slave 建立长连接，既可以从 Master 订阅消息，也可以向 Slave 订阅消息。</p></blockquote><br><p>了解完 RocketMQ 的基本概念和整体流程，接下来开始上手操作</p><br><h2 id="消息生产" tabindex="-1">消息生产 <a class="header-anchor" href="#消息生产" aria-label="Permalink to &quot;消息生产&quot;">​</a></h2><blockquote><p>RocketMQ 生产者生产的消息分为：同步消息、异步消息和单向消息。</p></blockquote><br><h3 id="生产步骤" tabindex="-1">生产步骤 <a class="header-anchor" href="#生产步骤" aria-label="Permalink to &quot;生产步骤&quot;">​</a></h3><ol><li>创建生产者，指定生产者组；</li><li>指定 NameServer；</li><li>启动生产者；</li><li>创建消息对象，设置主题 Topic、Tag 和消息体；</li><li>发送消息。</li></ol><br><p><strong>依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;rocketmq-client&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;依赖版本需要和部署的 RocketMQ 版本一致&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;rocketmq-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;依赖版本需要和部署的 RocketMQ 版本一致&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><br><h3 id="同步消息" tabindex="-1">同步消息 <a class="header-anchor" href="#同步消息" aria-label="Permalink to &quot;同步消息&quot;">​</a></h3><blockquote><p>同步消息使用的较为广泛，如：重要的消息通知、短信。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 同步消息生产者</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncProducer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MQClientException, MQBrokerException, RemotingException, InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1、创建消息生产者 Producer，指定生产者组名</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultMQProducer producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMQProducer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;group_default&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2、指定 NameServer 地址，集群使用分号隔开：mqhost1:9876;mqhost2:9876；mqhost3:9876</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">setNamesrvAddr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost:9876&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 3、启动 Producer</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 4、创建消息对象，指定主题 Topic、Tag 和消息体</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">             * 创建消息对象</span></span>
<span class="line"><span style="color:#6A737D;">             * topic 消息主题</span></span>
<span class="line"><span style="color:#6A737D;">             * tags 消息Tag</span></span>
<span class="line"><span style="color:#6A737D;">             * body 消息内容</span></span>
<span class="line"><span style="color:#6A737D;">             */</span></span>
<span class="line"><span style="color:#E1E4E8;">            Message msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic_default&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;tag_default&quot;</span><span style="color:#E1E4E8;">,  (</span><span style="color:#9ECBFF;">&quot;hello, this is msg for rocketmq.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i).</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(StandardCharsets.UTF_8));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//  5、发送消息，超时时间 10000ms。最好加上超时时间，否则可能发送报错</span></span>
<span class="line"><span style="color:#E1E4E8;">            SendResult sendResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sendResult.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 6、关闭 Producer</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 同步消息生产者</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncProducer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> MQClientException, MQBrokerException, RemotingException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建消息生产者 Producer，指定生产者组名</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;group_default&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、指定 NameServer 地址，集群使用分号隔开：mqhost1:9876;mqhost2:9876；mqhost3:9876</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、启动 Producer</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、创建消息对象，指定主题 Topic、Tag 和消息体</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">             * 创建消息对象</span></span>
<span class="line"><span style="color:#6A737D;">             * topic 消息主题</span></span>
<span class="line"><span style="color:#6A737D;">             * tags 消息Tag</span></span>
<span class="line"><span style="color:#6A737D;">             * body 消息内容</span></span>
<span class="line"><span style="color:#6A737D;">             */</span></span>
<span class="line"><span style="color:#24292E;">            Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic_default&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;tag_default&quot;</span><span style="color:#24292E;">,  (</span><span style="color:#032F62;">&quot;hello, this is msg for rocketmq.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(StandardCharsets.UTF_8));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//  5、发送消息，超时时间 10000ms。最好加上超时时间，否则可能发送报错</span></span>
<span class="line"><span style="color:#24292E;">            SendResult sendResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(msg, </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sendResult.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 6、关闭 Producer</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="异步消息" tabindex="-1">异步消息 <a class="header-anchor" href="#异步消息" aria-label="Permalink to &quot;异步消息&quot;">​</a></h3><blockquote><p>异步消息通常用在对响应时间敏感的业务场景，发送不能容忍长时间的等待的消息。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 异步发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SendCallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发送成功回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSuccess</span><span style="color:#E1E4E8;">(SendResult </span><span style="color:#FFAB70;">sendResult</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sendResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发送异常回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onException</span><span style="color:#E1E4E8;">(Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 异步发送消息</span></span>
<span class="line"><span style="color:#24292E;">producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(msg, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SendCallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发送成功回调函数</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSuccess</span><span style="color:#24292E;">(SendResult </span><span style="color:#E36209;">sendResult</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sendResult);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发送异常回调函数</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onException</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><br><h3 id="单向消息" tabindex="-1">单向消息 <a class="header-anchor" href="#单向消息" aria-label="Permalink to &quot;单向消息&quot;">​</a></h3><blockquote><p>适用于某些耗时非常短且不怎么关心消息发送结果的场景，例如日志收集。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 单向消息生产者</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnewayProducer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MQClientException, RemotingException, InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 发送单向消息</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">sendOneway</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 单向消息生产者</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnewayProducer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> MQClientException, RemotingException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 发送单向消息</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">sendOneway</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="负载均衡" tabindex="-1">负载均衡 <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;负载均衡&quot;">​</a></h3><p>生产者的负载均衡：先从 NameServer 获取关于 Broker 的路由信息，生产消息后通过轮询算法向不同队列投放消息，以达到负载均衡的效果。</p><br><h2 id="消息消费" tabindex="-1">消息消费 <a class="header-anchor" href="#消息消费" aria-label="Permalink to &quot;消息消费&quot;">​</a></h2><br><h3 id="消费步骤" tabindex="-1">消费步骤 <a class="header-anchor" href="#消费步骤" aria-label="Permalink to &quot;消费步骤&quot;">​</a></h3><ol><li>创建消费者，指定消费者要消费的组名</li><li>指定 NameServer 地址</li><li>指定主题 Topic 和 Tag</li><li>注册消息监听器，设置回调函数，处理消息</li><li>启动消费者</li></ol><br><h3 id="推拉消费" tabindex="-1">推拉消费 <a class="header-anchor" href="#推拉消费" aria-label="Permalink to &quot;推拉消费&quot;">​</a></h3><p><strong>推拉消费模式</strong></p><ul><li><p><strong>Push</strong></p><p>Push 模式是 <strong>MQ 主动</strong>推送信息，有信息就推送，但是可能会推送太多消息，导致消费者的消费速度跟不上推送速度</p></li><li><p><strong>Pull</strong></p><p>Pull 模式是<strong>客户端主动</strong>向 MQ 请求数据，主动权在客户端，取消息的过程需要自定义实现。先拉取数据再消费，不会因为推送太快而处理不及时</p></li></ul><br><p><strong>两种模式的区别</strong></p><ul><li><p>推模式指的是客户端与服务端建立长连接，服务端直接通过长连接通道推送到客户端。优点是及时，一旦有数据变更，客户端立马能感知到；</p><p>推模式对客户端来说逻辑简单，不需要关心有无数据这些逻辑处理。缺点是不知道客户端的数据消费能力，可能导致数据积压在客户端，来不及处理。</p></li><li><p>拉模式指的是客户端主动向服务端发出请求，拉取相关数据。优点是此过程由客户端发起请求，不存在推模式中数据积压的问题。缺点是消息消费可能不够及时，对客户端来说需要考虑数据拉取相关逻辑，何时拉取，拉取的频率怎么控制等等。</p><p>拉模式中，为了保证消息消费的实时性，采取了长轮询消息服务器拉取消息的方式。每隔一定时间，客户端向服务端发起一次请求，服务端有数据就返回数据，服务端如果此时没有数据，保持连接。等到有数据返回，或者超时返回。</p><p>长轮询的好处是可以减少无效请求，保证消息的实时性，又不会造成客户端积压</p></li></ul><br><p><strong>推拉消费者</strong></p><p>RocketMQ 的消费者被分为两类：MQPullConsumer 和 MQPushConsumer。<strong>本质都是拉模式</strong>，消费者轮询从 MQ 拉取消息。</p><ul><li>拉模式消费者<strong>主动从消息服务器拉取</strong>信息，只要批量拉取到消息，消费者就会启动消费过程，所以 Pull 称为主动消费型</li><li>推模式消费者封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现，称为被动消费类型。但从实现上看，是从消息服务器中拉取消息，而且 Push 模式首先要注册消费监听器，当监听器处触发后才开始消费消息</li></ul><br><h3 id="消息消费粒度" tabindex="-1">消息消费粒度 <a class="header-anchor" href="#消息消费粒度" aria-label="Permalink to &quot;消息消费粒度&quot;">​</a></h3><ul><li>队列维度：同一消费者分组内的多个消费者将按照队列粒度消费消息，即每个队列仅被一个消费者消费</li><li>消息维度：同一消费者分组内的多个消费者将按照消息粒度平均分摊主题中的所有消息，即同一个队列中的消息，可被平均分配给多个消费者共同消费</li></ul><br><h3 id="消费者分类" tabindex="-1">消费者分类 <a class="header-anchor" href="#消费者分类" aria-label="Permalink to &quot;消费者分类&quot;">​</a></h3><table><thead><tr><th></th><th>PushConsumer</th><th>SimpleConsumer</th><th>PullConsumer</th></tr></thead><tbody><tr><td>实现方式</td><td>使用监听器回调接口返回消费结果，消费者仅允许在监听器范围内处理消费逻辑</td><td>业务方自行实现消息处理，并主动调用接口返回消费结果</td><td>业务方自行按队列拉取消息，并可选择性地提交消费结果</td></tr><tr><td>消费并发度</td><td>由服务端管理消费并发度</td><td>由业务方消费逻辑自行管理消费线程</td><td>由业务方消费逻辑自行管理消费线程</td></tr><tr><td>负载均衡粒度</td><td>5.0 版本是消息粒度，更均衡，早期版本是队列维度</td><td>消息粒度，更均衡</td><td>队列粒度，吞吐性能更好，但容易不均衡</td></tr><tr><td>接口灵活度</td><td>高度封装，不够灵活</td><td>原子接口，可灵活自定义</td><td>原子接口，可灵活自定义</td></tr><tr><td>适用场景</td><td>适用于无自定义流程的业务消息开发场景</td><td>适用于需要高度自定义业务流程的业务开发场景</td><td>仅推荐在流处理框架场景下集成使用</td></tr></tbody></table><br><h3 id="消费者负载均衡" tabindex="-1">消费者负载均衡 <a class="header-anchor" href="#消费者负载均衡" aria-label="Permalink to &quot;消费者负载均衡&quot;">​</a></h3><blockquote><p>多个消费者同时存在的情况下，默认为 CLUSTERING 模式</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageModel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">BROADCASTING</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;BROADCASTING&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 广播模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">CLUSTERING</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CLUSTERING&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 集群/负载均衡模式</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageModel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">BROADCASTING</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;BROADCASTING&quot;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 广播模式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">CLUSTERING</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CLUSTERING&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 集群/负载均衡模式</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><p><strong>集群模式 CLUSTERING</strong></p><blockquote><p>或称负载均衡模式，使用集群消费模式时，RocketMQ 认为任意一条消息只需要被集群内的任意一个消费者处理即可</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 消息消费者</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultConsumer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MQClientException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1、创建消费者 Consumer，制定消费者组名</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultMQPushConsumer consumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMQPushConsumer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;group_default&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2、指定 nameserver 地址</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">setNamesrvAddr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost:9876&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 3、指定订阅的主题 topic 和 tag，若是多个 tag 使用 || 隔开，所有 tag 使用 * 号</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic_default&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 4、设置回调函数，处理消息</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// new MessageListenerOrderly 顺序消费，有序地使用消息意味着消息的消费顺序与生产者为每个消息队列发送消息的顺序相同</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// new MessageListenerConcurrently 并行消费，在此模式下不再保证消息顺序，消费的最大并行数量受每个消费者客户端指定的线程池限制。</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">registerMessageListener</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageListenerConcurrently</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 接收消息内容</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ConsumeConcurrentlyStatus </span><span style="color:#B392F0;">consumeMessage</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">MessageExt</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">msgs</span><span style="color:#E1E4E8;">, ConsumeConcurrentlyContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (MessageExt msg </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> msgs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(msg.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 5、启动消费者</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 消息消费者</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultConsumer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> MQClientException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建消费者 Consumer，制定消费者组名</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQPushConsumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;group_default&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、指定 nameserver 地址</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、指定订阅的主题 topic 和 tag，若是多个 tag 使用 || 隔开，所有 tag 使用 * 号</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic_default&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、设置回调函数，处理消息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// new MessageListenerOrderly 顺序消费，有序地使用消息意味着消息的消费顺序与生产者为每个消息队列发送消息的顺序相同</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// new MessageListenerConcurrently 并行消费，在此模式下不再保证消息顺序，消费的最大并行数量受每个消费者客户端指定的线程池限制。</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">registerMessageListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListenerConcurrently</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 接收消息内容</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConsumeConcurrentlyStatus </span><span style="color:#6F42C1;">consumeMessage</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">MessageExt</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">msgs</span><span style="color:#24292E;">, ConsumeConcurrentlyContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (MessageExt msg </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> msgs) {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 5、启动消费者</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><p><strong>广播模式 BROADCASTING</strong></p><blockquote><p>当使用广播消费模式时，RocketMQ 会将每条消息推送给所有的消费者，保证消息至少被每个消费者消费一次</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 设置消费模</span></span>
<span class="line"><span style="color:#E1E4E8;">consumer.</span><span style="color:#B392F0;">setMessageModel</span><span style="color:#E1E4E8;">(MessageModel.BROADCASTING);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设置消费模</span></span>
<span class="line"><span style="color:#24292E;">consumer.</span><span style="color:#6F42C1;">setMessageModel</span><span style="color:#24292E;">(MessageModel.BROADCASTING);</span></span></code></pre></div><br><h3 id="消息过滤" tabindex="-1">消息过滤 <a class="header-anchor" href="#消息过滤" aria-label="Permalink to &quot;消息过滤&quot;">​</a></h3><blockquote><p>RocketMQ 的消息过滤功能通过生产者和消费者对消息的属性、标签进行定义，并在 RocketMQ 服务端根据过滤条件进行筛选匹配，将符合条件的消息投递给消费者进行消费</p></blockquote><p><img src="`+e+`" alt="消息过滤"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// producer</span></span>
<span class="line"><span style="color:#E1E4E8;">Message message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(SimpleMQConstant.TOPIC_DEFAULT, </span><span style="color:#9ECBFF;">&quot;tag_filter&quot;</span><span style="color:#E1E4E8;">, ...);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// consumer</span></span>
<span class="line"><span style="color:#E1E4E8;">DefaultMQPushConsumer consumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMQPushConsumer</span><span style="color:#E1E4E8;">(...);</span></span>
<span class="line"><span style="color:#E1E4E8;">consumer.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TOPIC&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tagA || tagB || tagC&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// producer</span></span>
<span class="line"><span style="color:#24292E;">Message message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(SimpleMQConstant.TOPIC_DEFAULT, </span><span style="color:#032F62;">&quot;tag_filter&quot;</span><span style="color:#24292E;">, ...);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// consumer</span></span>
<span class="line"><span style="color:#24292E;">DefaultMQPushConsumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumer</span><span style="color:#24292E;">(...);</span></span>
<span class="line"><span style="color:#24292E;">consumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TOPIC&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tagA || tagB || tagC&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><br><p><strong>使用场景</strong></p><p>电商交易场景为例，从客户下单到收到商品这一过程会生产一系列消息：</p><ul><li>订单消息</li><li>支付消息</li><li>物流消息</li></ul><p>这些消息会发送到名称为 Trade_Topic 的 Topic 中，被各个不同的下游系统所订阅：</p><ul><li>支付系统：订阅支付消息</li><li>物流系统：订阅物流消息</li><li>交易成功率分析系统：需订阅订单和支付消息</li><li>实时计算系统：需要订阅所有和交易相关的消息</li></ul><p><img src="`+t+'" alt="Tag过滤"></p><br><p><strong>Tag 使用事项</strong></p><ul><li>Tag 由生产者发送消息时设置，每条消息允许设置一个 Tag 标签；</li><li>Tag 使用可见字符，建议长度不超过 128 个字符</li></ul><br><p><strong>Tag 匹配规则</strong></p><ul><li>单 Tag 精确匹配</li><li>多 Tag 匹配，使用两个竖线（||）隔开，例如 Tag1||Tag2||Tag3</li><li>全部匹配，使用星号（*）作为全匹配表达式</li></ul><blockquote><p><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/07messagefilter#sql%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4" target="_blank" rel="noreferrer">SQL 属性过滤</a></p></blockquote><br><h3 id="消费顺序" tabindex="-1">消费顺序 <a class="header-anchor" href="#消费顺序" aria-label="Permalink to &quot;消费顺序&quot;">​</a></h3><ul><li><p><strong>Orderly 顺序消费</strong>，有序地消费消息，消息的消费顺序与生产者发送消息的顺序相同；</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageListenerOrderly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageListener</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListenerOrderly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListener</span><span style="color:#24292E;"> {}</span></span></code></pre></div></li><li><p><strong>Concurrently 并行消费</strong>，不保证消息顺序，消费的最大并行数量受每个消费者客户端指定的线程池限制。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageListenerConcurrently</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageListener</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListenerConcurrently</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListener</span><span style="color:#24292E;"> {}</span></span></code></pre></div></li></ul><br><h3 id="消费进度" tabindex="-1">消费进度 <a class="header-anchor" href="#消费进度" aria-label="Permalink to &quot;消费进度&quot;">​</a></h3><p>在 RocketMQ 中，所有消息队列都是持久化，长度无限的数据结构。长度无限是指队列中的每个存储单元都是定长，访问存储单元可以使用 Offset 来访问。也可以认为消息队列是一个长度无限的数组，Offset 就是下标，Offset 为 64 位的 Java Long 类型。</p><p>消息是按到达服务端的先后顺序存储在指定主题的多个队列中，每条消息在队列中都有一个唯一的 Long 类型坐标，这个坐标被定义为消息位点。任意一个消息队列在逻辑上都是无限存储，即消息位点会从 0 到 <code>Long.MAX</code> 无限增加。通过主题、队列和位点就可以定位任意一条消息的位置。</p><p><img src="'+r+'" alt="消息位点"></p><p>RocketMQ 定义队列中最早一条消息的位点为最小消息位点（MinOffset）；最新一条消息的位点为最大消息位点（MaxOffset）。虽然消息队列逻辑上是无限存储，但由于服务端物理节点的存储空间有限，RocketMQ 会滚动删除队列中存储最早的消息。因此，消息的最小消费位点和最大消费位点会一直递增变化。</p><p><img src="'+c+'" alt="消费位点更新"></p><p><strong>消费点位</strong></p><p>RocketMQ 领域模型为发布订阅模式，每个主题的队列都可以被多个消费者分组订阅。若某条消息被某个消费者消费后直接被删除，则其他订阅了该主题的消费者将无法消费该消息。</p><p>RocketMQ 通过消费位点管理消息的消费进度。每条消息被某个消费者消费完成后不会立即在队列中删除，RocketMQ 会基于每个消费者分组维护一份消费记录，该记录指定消费者分组消费某一个队列时，消费过的最新一条消息的位点，即消费位点。</p><blockquote><p>消息消费完成后不马上删除消息是为了后续可以进行消息的回溯消费。</p></blockquote><p>当消费者客户端离线，又再次重新上线时，会严格按照服务端保存的消费进度继续处理消息。如果服务端保存的历史位点信息已过期被删除，此时消费位点向前移动至服务端存储的最小位点。</p><blockquote><p>消费位点的保存和恢复是基于 RocketMQ 服务端的存储实现，和任何消费者无关。因此 RocketMQ 支持跨消费者的消费进度恢复。</p></blockquote><p>队列中消息位点 MinOffset、MaxOffset 和每个消费者分组的消费位点 ConsumerOffset 的关系如下：</p><p><img src="'+E+'" alt="消费点位"></p><p><strong>消费位点初始值</strong></p><p>消费位点初始值指的是首次启动消费者时，服务端保存的消费位点的初始值。RocketMQ 定义消费位点的初始值为消费者首次获取消息时最大的消息位点，相当于消费者将从队列中最新的消息开始消费。</p><p><strong>重置消费点位</strong></p><ul><li>初始消费位点不符合需求：因初始消费位点为当前队列的最大消息位点，即客户端会直接从最新消息开始消费。若业务上线时需要消费部分历史消息，可以通过重置消费位点功能消费到指定时刻前的消息；</li><li>消费堆积快速清理：当下游消费系统性能不足或消费速度小于生产速度时，会产生大量堆积消息。若这部分堆积消息可以丢弃，可以通过重置消费位点快速将消费位点更新到指定位置，绕过这部分堆积的消息，减少下游处理压力；</li><li>业务回溯，纠正处理：由于业务消费逻辑出现异常，消息被错误处理。若希望重新消费已被处理的消息，可以通过重置消费位点快速将消费位点更新到历史指定位置，实现消费回溯。</li></ul><br><h3 id="回溯消费" tabindex="-1">回溯消费 <a class="header-anchor" href="#回溯消费" aria-label="Permalink to &quot;回溯消费&quot;">​</a></h3><p>回溯消费是指消费者已经消费成功的消息，由于业务上需求需要重新消费。</p><p>在 RocketMQ 在向消费者投递消息成功后，<strong>消息仍会保留</strong>，并且重新消费一般是按照时间维度。例如由于消费者系统故障，恢复后需要重新消费 1 小时前的数据，那么 Broker 要提供一种机制，可以按照时间维度来回退消费进度。</p><br><h3 id="消息堆积" tabindex="-1">消息堆积 <a class="header-anchor" href="#消息堆积" aria-label="Permalink to &quot;消息堆积&quot;">​</a></h3><p>消息堆积意味着生产者发送的消息太多，消费者处理不过来。可以对生产者端服务进行限流，也可以增加多个消费者来进行消费。堆积问题排查可以从消费者入手，查看是否是消费者出现消费错误，或者某个线程消费过程中产生了死锁等。</p><br><h3 id="重复消费" tabindex="-1">重复消费 <a class="header-anchor" href="#重复消费" aria-label="Permalink to &quot;重复消费&quot;">​</a></h3><p>RocketMQ 不保证消息不重复，如果需要保证严格的不重复消息，需要在业务端去重</p><p>1、消费端处理消息的业务逻辑保持幂等性</p><p>2、保证每条消息都有唯一编号且保证消息处理成功与去重表的日志同时出现</p><br><h3 id="消费重试" tabindex="-1">消费重试 <a class="header-anchor" href="#消费重试" aria-label="Permalink to &quot;消费重试&quot;">​</a></h3><p>消费重试指的是，消费者在消费某条消息失败后，RocketMQ 会根据重试策略重新消费该消息，超过一次定数后若还未消费成功，则该消息将不再继续重试，直接被发送到死信队列中。</p><p><strong>触发条件</strong></p><ul><li>消费失败，包括消费者返回消息失败状态标识或抛出非预期异常</li><li>消息处理超时，包括在 PushConsumer 中排队超时</li></ul><p><strong>重试策略</strong></p><ul><li>重试过程状态机：控制消息在重试流程中的状态和变化逻辑</li><li>重试间隔：上一次消费失败或超时后，下次重新尝试消费的间隔时间</li><li>最大重试次数：消息可被重试消费的最大次数</li></ul><p><strong>最大重试次数</strong></p><p>例如，最大重试次数为 3 次，则该消息最多可被投递 4 次，1 次为原始消息，3 次为重试投递次数。</p><br><h3 id="消费速度慢" tabindex="-1">消费速度慢 <a class="header-anchor" href="#消费速度慢" aria-label="Permalink to &quot;消费速度慢&quot;">​</a></h3><ul><li>提高消费并行度。同一个 ConsumerGroup 下，通过增加 Consumer 实例数量来提高并行度；提高单个 Consumer 的消费并行线程，PushConsumer 为例 <code>PushConsumerBuilder.setConsumptionThreadCount()</code> 设置线程数</li><li>批量消费</li><li>重置消息点位，跳过非重要消息。发生消息堆积时，如果消费速度一直追不上发送速度，如果业务对数据要求不高的话，可以选择丢弃不重要的消息</li><li>优化业务系统中消息的消费逻辑</li></ul><br><h3 id="消息丢失" tabindex="-1">消息丢失 <a class="header-anchor" href="#消息丢失" aria-label="Permalink to &quot;消息丢失&quot;">​</a></h3><blockquote><p><a href="https://juejin.cn/post/7039959533707329566" target="_blank" rel="noreferrer">RocketMQ 如何防止消息丢失？</a></p></blockquote><br><h2 id="消息类型" tabindex="-1">消息类型 <a class="header-anchor" href="#消息类型" aria-label="Permalink to &quot;消息类型&quot;">​</a></h2><br><h3 id="普通消息" tabindex="-1">普通消息 <a class="header-anchor" href="#普通消息" aria-label="Permalink to &quot;普通消息&quot;">​</a></h3><blockquote><p>普通消息一般应用于微服务解耦、事件驱动、数据集成等场景，这些场景大多数要求数据传输通道具有可靠传输的能力，且对消息的处理时机、处理顺序没有特别要求。</p></blockquote><p><strong>使用场景</strong></p><ul><li>服务解耦</li><li>数据传输</li></ul><br><p><strong>生命周期</strong></p><ul><li>初始化：消息被生产者构建并完成初始化，待发送到服务端；</li><li>待消费：消息被发送到服务端，对消费者可见，等待消费者消费；</li><li>消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，RocketMQ 会对消息进行重试处理；</li><li>消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。 RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费；</li><li>消息删除：RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li></ul><p><img src="'+y+'" alt="普通生命周期"></p><br><h3 id="定时-延时消息" tabindex="-1">定时/延时消息 <a class="header-anchor" href="#定时-延时消息" aria-label="Permalink to &quot;定时/延时消息&quot;">​</a></h3><blockquote><p>定时消息是 RocketMQ 提供的一种高级消息类型，消息被发送至服务端后，在指定时间后才能被消费者消费。通过设置一定的定时时间可以实现分布式场景的延时调度触发效果。</p></blockquote><p><strong>使用场景</strong></p><ul><li>分布式定时调度</li><li>任务超时处理</li></ul><p><strong>生命周期</strong></p><ul><li>初始化</li><li><strong>定时中</strong>：<strong>消息被发送到服务端，和普通消息不同的是，服务端不会直接构建消息索引，而是会将定时消息单独存储在定时存储系统中，等待定时时刻到达</strong>；</li><li>待消费：定时时刻到达后，服务端将消息重新写入普通存储引擎，对下游消费者可见，等待消费者消费的状态；</li><li>消费中</li><li>消费提交</li><li>消息删除</li></ul><p><img src="'+i+`" alt="定时消息生命周期"></p><blockquote><p>在电商项目中，提交了一个订单之后发送指定时间的延时消息，等到指定时间之后检查订单状态，若是未付款就取消订单，释放库存</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// org/apache/rocketmq/store/config/MessageStoreConfig.java 共 18 个级别</span></span>
<span class="line"><span style="color:#6A737D;">// private String messageDelayLevel = &quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// rocketmq 仅支持几个固定的延时的时间，3 对应 10s</span></span>
<span class="line"><span style="color:#E1E4E8;">msg.</span><span style="color:#B392F0;">setDelayTimeLevel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// org/apache/rocketmq/store/config/MessageStoreConfig.java 共 18 个级别</span></span>
<span class="line"><span style="color:#6A737D;">// private String messageDelayLevel = &quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// rocketmq 仅支持几个固定的延时的时间，3 对应 10s</span></span>
<span class="line"><span style="color:#24292E;">msg.</span><span style="color:#6F42C1;">setDelayTimeLevel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span></code></pre></div><br><h3 id="顺序消息" tabindex="-1">顺序消息 <a class="header-anchor" href="#顺序消息" aria-label="Permalink to &quot;顺序消息&quot;">​</a></h3><blockquote><p>消息有序是指可以按照消息发送的顺序来消费，即 <code>FIFO</code> 消费。RocketMQ 可以严格的保证消息有序，可以分为分区有序或者全局有序。</p></blockquote><p>在默认情况下，消息发送会采取轮询方式把消息发送到不同的消息队列，消费的时候从多个队列拉取消息，这种情况下发送和消费是不能保证顺序的。</p><p>如果控制发送的顺序，消息依次发送到同一个队列中，消费的时候该队列上依次拉取，这样就可以保证消息的有序消费。</p><p>当参与发送和消费的消息队列只有一个，则是<strong>全局有序</strong>；如果有多个消息队列参与，则是<strong>分区有序</strong>，即相对某个队列，消息都是有序的。</p><br><p><strong>使用场景</strong></p><ul><li>有序事件处理</li><li>撮合交易</li><li>数据实时增量同步</li></ul><br><p><strong>生命周期</strong></p><ul><li>初始化</li><li>待消费：消息被发送到服务端，对消费者可见，等待消费者消费的状态；</li><li>消费中</li><li>消费提交</li><li>消息删除</li></ul><br><p><strong>使用限制</strong></p><ul><li>顺序消息仅支持使用 MessageType 为 FIFO 的主题</li></ul><br><p><strong>实现</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// OrderStep 订单步骤实体类</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> orderId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String desc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">OrderStep</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">buildOrders</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">OrderStep</span><span style="color:#E1E4E8;">&gt; orderSteps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        OrderStep orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1100L create payment push done</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2200L create payment</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 3300L create payment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1100L</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;create&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderSteps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2200L</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;create&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderSteps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1100L</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;payment&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderSteps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3300</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;create&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderSteps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1100L</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;push&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderSteps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2200L</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;payment&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderSteps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        orderStep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderStep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1100L</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;done&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderSteps.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderSteps;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// OrderStep 订单步骤实体类</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> orderId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String desc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">OrderStep</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">buildOrders</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">OrderStep</span><span style="color:#24292E;">&gt; orderSteps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        OrderStep orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1100L create payment push done</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2200L create payment</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3300L create payment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1100L</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;create&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderSteps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2200L</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;create&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderSteps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1100L</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;payment&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderSteps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3300</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;create&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderSteps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1100L</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;push&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderSteps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2200L</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;payment&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderSteps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderStep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderStep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1100L</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;done&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderSteps.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(orderStep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderSteps;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// OrderProducer 顺序消息生产</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderProducer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> MQClientException, MQBrokerException, RemotingException, InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultMQProducer producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMQProducer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;group_default_order&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">setNamesrvAddr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost:9876&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 构建数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">OrderStep</span><span style="color:#E1E4E8;">&gt; orderSteps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OrderStep.</span><span style="color:#B392F0;">buildOrders</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (OrderStep order </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> orderSteps) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Message msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic_default_order&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tag_default_order&quot;</span><span style="color:#E1E4E8;">, order.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(StandardCharsets.UTF_8));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">             * Message msg 消息对象</span></span>
<span class="line"><span style="color:#6A737D;">             * MessageQueueSelector selector 消息队列的选择器</span></span>
<span class="line"><span style="color:#6A737D;">             * Object arg 消息队列的业务标识（订单ID）</span></span>
<span class="line"><span style="color:#6A737D;">             */</span></span>
<span class="line"><span style="color:#E1E4E8;">            SendResult sendResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageQueueSelector</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MessageQueue </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">MessageQueue</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">mqs</span><span style="color:#E1E4E8;">, Message </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 根据订单ID选择对应的 Queue</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 就能将同一个订单消息发送到唯一的一个 Queue</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 从而保证消费者消费的顺序性</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">) arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> queueIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderId </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> mqs.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mqs.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) queueIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }, order.</span><span style="color:#B392F0;">getOrderId</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sendResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// OrderProducer 顺序消息生产</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderProducer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> MQClientException, MQBrokerException, RemotingException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;group_default_order&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 构建数据</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">OrderStep</span><span style="color:#24292E;">&gt; orderSteps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OrderStep.</span><span style="color:#6F42C1;">buildOrders</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发送消息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (OrderStep order </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> orderSteps) {</span></span>
<span class="line"><span style="color:#24292E;">            Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic_default_order&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tag_default_order&quot;</span><span style="color:#24292E;">, order.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(StandardCharsets.UTF_8));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">             * Message msg 消息对象</span></span>
<span class="line"><span style="color:#6A737D;">             * MessageQueueSelector selector 消息队列的选择器</span></span>
<span class="line"><span style="color:#6A737D;">             * Object arg 消息队列的业务标识（订单ID）</span></span>
<span class="line"><span style="color:#6A737D;">             */</span></span>
<span class="line"><span style="color:#24292E;">            SendResult sendResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(msg, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageQueueSelector</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MessageQueue </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">MessageQueue</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">mqs</span><span style="color:#24292E;">, Message </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 根据订单ID选择对应的 Queue</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 就能将同一个订单消息发送到唯一的一个 Queue</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 从而保证消费者消费的顺序性</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">) arg;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> queueIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderId </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> mqs.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mqs.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) queueIndex);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }, order.</span><span style="color:#6F42C1;">getOrderId</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sendResult);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="批量消息" tabindex="-1">批量消息 <a class="header-anchor" href="#批量消息" aria-label="Permalink to &quot;批量消息&quot;">​</a></h3><blockquote><p>批量发送消息能显著提高传递小消息的性能。限制是这些批量消息应该有相同的 Topic，相同的 <code>waitStoreMsgOK</code>，而且不能是延时消息。此外，一批消息的总大小不应超过 4 MB。</p></blockquote><p><strong>发送批量消息</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">Message</span><span style="color:#E1E4E8;">&gt; messageList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Message msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic_default_batch&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tag_default_batch&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#9ECBFF;">&quot;hello, this is msg from batch producer. NO.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i).</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#E1E4E8;">    messageList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(messageList, </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt; messageList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic_default_batch&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tag_default_batch&quot;</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;hello, this is msg from batch producer. NO.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">    messageList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(messageList, </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>消息列表分割</strong></p><blockquote><p>不确定消息是否超过了大小限制（4 MB），最好把消息列表分割一下</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListSplitter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Iterator</span><span style="color:#E1E4E8;">&lt;List&lt;</span><span style="color:#F97583;">Message</span><span style="color:#E1E4E8;">&gt;&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> SIZE_LIMIT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Message</span><span style="color:#E1E4E8;">&gt; messages;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> currIndex;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListSplitter</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Message</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">messages</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.messages </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> messages;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> currIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> messages.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Message</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> startIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStartIndex</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nextIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> startIndex;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> totalSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (; nextIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> messages.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); nextIndex</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Message message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> messages.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(nextIndex); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> tmpSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calcMessageSize</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tmpSize </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> totalSize </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> SIZE_LIMIT) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                totalSize </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> tmpSize; </span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Message</span><span style="color:#E1E4E8;">&gt; subList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> messages.</span><span style="color:#B392F0;">subList</span><span style="color:#E1E4E8;">(startIndex, nextIndex); </span></span>
<span class="line"><span style="color:#E1E4E8;">        currIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextIndex;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> subList;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStartIndex</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Message currMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> messages.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(currIndex); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> tmpSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calcMessageSize</span><span style="color:#E1E4E8;">(currMessage); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(tmpSize </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> SIZE_LIMIT) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            currIndex </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            Message message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> messages.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(curIndex); </span></span>
<span class="line"><span style="color:#E1E4E8;">            tmpSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calcMessageSize</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> currIndex; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calcMessageSize</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> tmpSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.</span><span style="color:#B392F0;">getTopic</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> message.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            tmpSize </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        tmpSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmpSize </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 增加日志的开销 20 字节</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tmpSize; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 把大的消息分裂成若干个小的消息</span></span>
<span class="line"><span style="color:#E1E4E8;">ListSplitter splitter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListSplitter</span><span style="color:#E1E4E8;">(messages);</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (splitter.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;</span><span style="color:#F97583;">Message</span><span style="color:#E1E4E8;">&gt;  listItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> splitter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(listItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 处理error</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListSplitter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Iterator</span><span style="color:#24292E;">&lt;List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt;&gt; { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> SIZE_LIMIT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt; messages;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> currIndex;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListSplitter</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">messages</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.messages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> messages;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> currIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> messages.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> startIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStartIndex</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nextIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> startIndex;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> totalSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (; nextIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> messages.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); nextIndex</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            Message message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> messages.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(nextIndex); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tmpSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calcMessageSize</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tmpSize </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> totalSize </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SIZE_LIMIT) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                totalSize </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> tmpSize; </span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt; subList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> messages.</span><span style="color:#6F42C1;">subList</span><span style="color:#24292E;">(startIndex, nextIndex); </span></span>
<span class="line"><span style="color:#24292E;">        currIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextIndex;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> subList;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStartIndex</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Message currMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> messages.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(currIndex); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tmpSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calcMessageSize</span><span style="color:#24292E;">(currMessage); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(tmpSize </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> SIZE_LIMIT) {</span></span>
<span class="line"><span style="color:#24292E;">            currIndex </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            Message message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> messages.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(curIndex); </span></span>
<span class="line"><span style="color:#24292E;">            tmpSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calcMessageSize</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> currIndex; </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calcMessageSize</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tmpSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message.</span><span style="color:#6F42C1;">getTopic</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            tmpSize </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        tmpSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmpSize </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加日志的开销 20 字节</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tmpSize; </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 把大的消息分裂成若干个小的消息</span></span>
<span class="line"><span style="color:#24292E;">ListSplitter splitter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListSplitter</span><span style="color:#24292E;">(messages);</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (splitter.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt;  listItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> splitter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(listItem);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 处理error</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="事务消息" tabindex="-1">事务消息 <a class="header-anchor" href="#事务消息" aria-label="Permalink to &quot;事务消息&quot;">​</a></h3><br><h4 id="分布式事务" tabindex="-1">分布式事务 <a class="header-anchor" href="#分布式事务" aria-label="Permalink to &quot;分布式事务&quot;">​</a></h4><blockquote><p>事务的参与者、资源服务器以及事务管理器分别位于分布式系统的不同节点上，因此称为分布式事务。事务操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。比如微服务电商交易、跨行转账等。</p><p>分布式事务的实现方式有很多，可以采用 InnoDB 提供的原生的事务支持（XA 事务协议），也可以采用消息队列来实现分布式事务的最终一致性。</p></blockquote><br><h5 id="cap-理论" tabindex="-1">CAP 理论 <a class="header-anchor" href="#cap-理论" aria-label="Permalink to &quot;CAP 理论&quot;">​</a></h5><p>不同于本地事务的 ACID 特性，分布式事务主要特性为 CAP：</p><ul><li><p>C（一致性）</p><p>分布式系统中，要保证某个节点更新了数据之后，其他节点都能读取到这个最新的数据。如果有某个节点没有读取到，那就是分布式不一致。</p></li><li><p>A（可用性）</p><p>非故障的节点在合理的时间内返回合理的响应（不是错误和超时的响应）。可用性的关键：合理的时间；合理的响应。</p><p>合理的时间指的是请求不能无限被阻塞，应该在合理的时间返回；合理的响应指的是请求应该得到明确并正确的返回结果，这里的正确指的是应该返回 200，而不是返回 404。</p></li><li><p>P（分区容错性）</p><p>在一个服务集群中，有一个服务网络出现了问题，要保证该集群仍然能正常工作。</p></li></ul><br><p><strong>CAP 如何选择？</strong></p><p>在分布式系统中，分区（服务集群）肯定存在，因此必定需要满足 P。此外，网络环境不是 100% 可靠的，此时就需要在 A 和 C 之间进行选择：</p><ul><li>如果需要保证高可用，就需要适当削弱一致性；</li><li>如果要保证一致性，就需要适当削弱可用性。</li></ul><p>注意，这里用的是“削弱”，而不是“放弃”，还是需要使用一些别的手段来保证 A 或者 C 的。比如，使用快速失败/响应机制来保证 A；使用日志等手段来保证 C。</p><p>CAP 三者不能同时存在，只能满足 AP 或者 CP 原则：</p><ul><li>对于 CP 来说，就是追求强一致性和分区容错性；</li><li>对于 AP 来说，就是追求分区容错性和可用性，AP 是很多分布式系统设计时的选择。</li></ul><br><h5 id="base-理论" tabindex="-1">BASE 理论 <a class="header-anchor" href="#base-理论" aria-label="Permalink to &quot;BASE 理论&quot;">​</a></h5><p>BASE 是 <em>Basically Available</em>（基本可用）、<em>Soft state</em>（软状态）和 <em>Eventually consistent</em> （最终一致性）三个短语的缩写，是对 CAP 中 AP 的一个扩展。</p><ul><li>基本可用，分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用</li><li>软状态，允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是 CAP 中的不一致</li><li>最终一致性，最终一致是指经过一段时间后，所有节点数据都将会达到一致</li></ul><p>BASE 和 ACID 是相反的，它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</p><br><h5 id="_2pc" tabindex="-1">2PC <a class="header-anchor" href="#_2pc" aria-label="Permalink to &quot;2PC&quot;">​</a></h5><blockquote><p>两段提交（2PC）是基于 XA 协议实现的分布式事务。</p></blockquote><blockquote><p>2PC 分为两个阶段：<strong>准备和提交</strong>。</p><ul><li><p>准备阶段：事务协调者给每个事务参与者发送准备命令，每个参与者收到命令之后执行相关事务操作。可以认为除了事务的提交，其他关于事务的操作都做了。每个参与者会返回响应告知协调者自己是否准备成功。</p><p>在 2PC 中事务协调者有超时机制，若是事务协调者在第一阶段未收到个别参与者的响应，等待一定时间后就会认为事务失败，会发送回滚命令。</p></li><li><p>提交阶段：协调者根据收集的响应，如果有参与者响应准备失败，那么协调者就向所有参与者发送回滚命令，反之发送提交命令。</p></li></ul></blockquote><blockquote><p><strong>优点</strong>：2PC 对业务侵⼊很小，可以像使⽤本地事务⼀样使⽤基于 XA 协议的分布式事务，能够严格保障事务 ACID 特性。</p><p><strong>缺点</strong></p><ul><li>2PC 是一个强一致性的<strong>同步阻塞</strong>协议，事务执⾏过程中需要将所需资源全部锁定，比较适⽤于执⾏时间确定的短事务。</li><li><strong>单点故障问题</strong>，一旦事务协调者出现故障，事务参与者会一直处于锁定资源的状态。</li><li>或者只有一部分参与者提交成功，导致<strong>数据不一致</strong>。</li></ul></blockquote><br><h5 id="_3pc" tabindex="-1">3PC <a class="header-anchor" href="#_3pc" aria-label="Permalink to &quot;3PC&quot;">​</a></h5><blockquote><p><strong>三段提交</strong>是 2PC 的一种改进版本。2PC 当协调者崩溃时，参与者不能做出最后的选择，就会一直保持阻塞锁定资源。</p><p>为解决两阶段提交协议的阻塞问题：3PC 在协调者和参与者中都引入了超时机制，协调者出现故障后，参与者不会一直阻塞。而且在第一阶段和第二阶段中又插入了一个预提交阶段，保证了在最后提交阶段之前各参与节点的状态是一致的。</p></blockquote><blockquote><p>3PC 分为三个阶段：<strong>准备、预提交和提交</strong></p><ul><li><p>准备阶段：协调者会先检查参与者是否能接受事务请求进行事务操作。如果参与者全部响应成功则进入下一阶段。</p></li><li><p>预提交阶段：协调者向所有参与者发送预提交命令，询问是否可以进行事务的预提交操作。参与者接收到预提交请求后，如果成功的执行了事务操作，则返回成功响应，进入最终提交阶段；如果有参与者中有向协调者发送了失败响应，或因网络造成超时，协调者没有收到该参与者的响应，协调者会向所有参与者发送 <code>abort</code> 命令，参与者收到 <code>abort</code> 命令后中断事务的执行。</p></li><li><p>提交阶段：如果前两个阶段中所有参与者的响应反馈均是 YES，协调者向所有参与者发送提交命令正式提交事务，如协调者没有接收到参与者发送的 ACK 响应，会向所有参与者发送 <code>abort</code> 命令，执行事务的中断。</p></li></ul></blockquote><blockquote><p>虽然 3PC 用超时机制解决了协调者故障后参与者的阻塞问题，但也多了一次网络通信，性能上反而变得更差。</p></blockquote><br><h5 id="tcc" tabindex="-1">TCC <a class="header-anchor" href="#tcc" aria-label="Permalink to &quot;TCC&quot;">​</a></h5><blockquote><p>TCC（<em>Try Confirm Cancel</em>）又称<strong>补偿事务</strong>，与 2PC 相似，事务处理流程也很相似，但 2PC 是应用于在数据库层面，TCC 则可以理解为在应用层面的 2PC，需要自定义编写业务逻辑来实现。</p><p>TCC 核心思想是：<strong>针对每个操作（Try）都要注册一个与其对应的确认（Confirm）和补偿（Cancel）</strong>。</p></blockquote><blockquote><p><strong>TCC 流程</strong></p><p>TCC 的实现分为<strong>两个阶段</strong>，需要在业务层面需要写对应的<strong>三个方法</strong>（Try、Confirm、Cancel），主要用于处理跨数据库、跨服务的业务操作的数据一致性问题。</p><ul><li><p>第一阶段是 Try，负责<strong>资源检查和预留</strong>，完成所有业务检查（一致性），预留必须业务资源（准隔离性）；</p></li><li><p>第二阶段是 Confirm 或 Cancel。Confirm 执行真正的业务操作，Cancel 执行预留资源的取消，回滚到初始状态。以下单扣库存为例，Try 阶段去占库存，Confirm 阶段则实际扣库存，如果库存扣减失败 Cancel 阶段进行回滚，释放库存。</p></li></ul></blockquote><blockquote><p><strong>TCC 注意点</strong></p><ul><li><strong>幂等问题</strong>，因为网络调用无法保证请求一定能到达，所以都会有重调机制，因此对于 Try、Confirm、Cancel 三个方法都需要幂等实现，避免重复执行产生错误；</li><li><strong>空回滚问题</strong>，指的是 Try 方法由于网络问题超时了，此时事务管理器就会发出 Cancel 命令，那么需要支持在未执行 Try 的情况下能正常的 Cancel；</li><li><strong>悬挂问题</strong>，指 Try 方法由于网络阻塞超时触发了事务管理器发出了 Cancel 命令，<strong>但是执行了 Cancel 命令之后 Try 请求到了</strong>。对于事务管理器来说这时候事务已经是结束了的，到达的 Try 操作就被<strong>悬挂</strong>了，所以空回滚之后还需要将操作记录，防止 Try 的再调用。</li></ul></blockquote><blockquote><p><strong>TCC 优缺点</strong></p><p>TCC <strong>不存在资源阻塞的问题</strong>，因为每个方法都直接进行事务的提交，一旦出现异常通过则 Cancel 来进行回滚补偿，这也就是常说的补偿性事务。</p><p>TCC <strong>对业务的侵入性很强</strong>，需要三个方法来支持，而且这种模式并不能很好地被复用。还要考虑到网络波动等原因，为保证请求一定送达都会有重试机制。</p><p>TCC 适用于一些强隔离性和强一致性，并且执行时间较短的业务。</p></blockquote><br><h5 id="本地消息表" tabindex="-1">本地消息表 <a class="header-anchor" href="#本地消息表" aria-label="Permalink to &quot;本地消息表&quot;">​</a></h5><blockquote><p>本地消息就是利用了<strong>本地事务</strong>，在数据库中存放一个本地事务消息表，在进行本地事务操作时加入了本地消息的插入，<strong>业务执行和消息放入消息表这两个操作放在同一个事务中提交</strong>。</p><p>本地事务执行成功，消息也插入成功。然后再调用其他服务，如果调用成功就修改本地消息的状态。<strong>核心思路是将分布式事务拆分成本地事务进行处理，并通过消息的方式来异步执行。</strong></p><p>通过在事务发起方新建事务消息表，事务发起方处理业务和记录事务消息在本地事务中完成，轮询事务消息表的数据发送事务消息，事务被动方基于消息中间件消费事务消息表中的事务。这样可以避免以下两种情况导致的数据不一致性：业务处理成功、事务消息发送失败；业务处理失败、事务消息发送成功。</p></blockquote><br><p><strong>整体流程</strong></p><p><img src="`+u+'" alt="image-20220218172405186"></p><blockquote><p><strong>流程中必要的容错处理</strong></p><ul><li>步骤 1 出错，由于在处理的是本地事务，直接本地回滚即可</li><li>步骤 2 或 3 出错，由于事务主动方本地保存了消息，只需要轮询失败的消息，重新通过消息中间件发送，事务被动方重新读取消息处理业务即可</li><li>事务被动方业务上处理失败，事务被动方可以发消息给事务主动方回滚事务</li><li>如果事务被动方已经消费了消息，事务主动方需要回滚事务的话，需要发消息通知事务主动方进行回滚事务</li></ul></blockquote><blockquote><p><strong>消息事务优缺点</strong></p><p>从应用设计开发的角度实现了消息数据的可靠性，消息数据的可靠性不依赖于消息中间件，弱化了对 MQ 中间件特性的依赖。并且方案轻量，容易实现。</p><p>但消息数据与业务数据同库，占用业务系统资源。与具体的业务场景绑定，耦合性强，不可公用。业务系统在使用关系型数据库的情况下，消息服务性能会受到关系型数据库并发性能的局限。</p></blockquote><br><h4 id="rocketmq-事务消息" tabindex="-1">RocketMQ 事务消息 <a class="header-anchor" href="#rocketmq-事务消息" aria-label="Permalink to &quot;RocketMQ 事务消息&quot;">​</a></h4><blockquote><p>分布式事务消息（确保数据的最终一致性，大量引入 MQ 的分布式事务，既可以实现系统之间的解耦，又可以保证最终的数据一致性，减少系统间的交互）</p></blockquote><p>RocketMQ 的事务消息也可以认为是两阶段提交。</p><p>在事务开始的时候会先发送一个半消息（Half）给 Broker。半消息对消费者是不可见的，也不是保存在要发送的队列中，而是一个特殊队列。发送完半消息之后执行本地事务，再根据本地事务的执行结果来决定是向 Broker 发送提交消息，还是发送回滚消息。</p><p>如果发送<strong>提交或者回滚</strong>消息失败，Broker 会定时的向生产者回查这个事务是否成功。具体的生产者只需要暴露一个接口，通过这个接口 Broker 就可以知道事务执行的状态。</p><p>如果没成功就返回未知，因为有可能事务还在执行，会进行多次查询；如果成功，就将半消息恢复到正常要发送的队列中，消费者就可以消费这条消息了。</p><p><img src="'+d+'" alt="image-20220218173727271"></p><p><strong>事务消息状态</strong></p><ul><li>提交，<code>LocalTransactionState.COMMIT_MESSAGE</code>，提交事务，它允许消费者消费此消息；</li><li>回滚，<code>LocalTransactionState.ROLLBACK_MESSAGE</code>，回滚事务，它代表该消息将被删除，不允许被消费；</li><li>中间状态，<code>LocalTransactionState.UNKNOW</code>，中间状态，它代表需要检查（回查）消息队列来确定状态。</li></ul><br><p><strong>事务消息投递流程</strong></p><p><img src="'+F+'" alt="image-20220218163903672"></p><ol><li>生产者将消息发送至 RocketMQ 服务端，RocketMQ 服务端将消息持久化成功之后，向生产者返回 Ack 确认消息已经发送成功，此时消息被标记为&quot;暂不能投递&quot;，这种状态下的消息即为半事务消息；</li><li>生产者开始执行本地事务逻辑；</li><li>生产者根据本地事务执行结果向服务端提交二次确认结果（Commit 或 Rollback），服务端收到确认结果后处理逻辑如下： <ul><li>二次确认结果为 Commit：服务端将半事务消息标记为可投递，并投递给消费者；</li><li>二次确认结果为 Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。</li></ul></li><li>若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为 Unknown 未知状态，经过固定时间后，服务端将对生产者发起消息回查；</li><li>生产者收到消息回查后，检查对应事务执行的最终结果；</li><li>生产者根据检查到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。</li></ol><br><p><strong>事务消息生命周期</strong></p><p><img src="'+g+`" alt="事务消息生命周期"></p><ul><li>初始化：半事务消息被生产者构建并完成初始化，待发送到服务端的状态；</li><li>事务待提交：半事务消息被发送到服务端，和普通消息不同，并不会直接被服务端持久化，而是会被单独存储到事务存储系统中，等待第二阶段本地事务返回执行结果后再提交。此时消息对下游消费者不可见；</li><li>消息回滚：第二阶段如果事务执行结果明确为回滚，服务端会将半事务消息回滚，该事务消息流程终止；</li><li>提交待消费：第二阶段如果事务执行结果明确为提交，服务端会将半事务消息重新存储到普通存储系统中，此时消息对下游消费者可见，等待被消费者获取并消费；</li><li>消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。 此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，RocketMQ 会对消息进行重试处理；</li><li>消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费；</li><li>消息删除：RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li></ul><br><p><strong>使用限制</strong></p><ul><li>事务消息仅支持在 MessageType 为 Transaction 的主题内使用；</li><li>事务消息保证本地主分支事务和下游消息发送事务的一致性，但不保证消息消费结果和上游事务的一致性。需要下游业务分支自行保证消息正确处理，建议消费端做好<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/10consumerretrypolicy" target="_blank" rel="noreferrer">消费重试</a>；</li><li>事务消息为最终一致性，即在消息提交到下游消费端处理完成之前，下游分支和上游事务之间的状态会不一致；</li><li>事务消息的命周期存在超时机制，即半事务消息被生产者发送服务端后，如果在指定时间内服务端无法确认提交或者回滚状态，则消息默认会被回滚。</li></ul><br><p><strong>使用注意</strong></p><ul><li><p><strong>避免大量未决事务导致超时</strong></p><p>RocketMQ 支持在事务提交阶段异常的情况下发起事务回查，保证事务一致性。但生产者应该尽量避免本地事务返回未知结果。大量的事务检查会导致系统性能受损，容易导致事务处理延迟。</p></li><li><p><strong>正确处理&quot;进行中&quot;的事务</strong></p><p>消息回查时，对于正在进行中的事务不要返回 Rollback 或 Commit 结果，应继续保持 Unknown 的状态。 一般出现消息回查时事务正在处理的原因为：事务执行较慢，消息回查太快。解决方案如下：一、将第一次事务回查时间设置较大一些，但可能导致依赖回查的事务提交延迟较大；二、程序能正确识别正在进行中的事务。</p></li></ul><br><p><strong>发送事务消息</strong></p><p>1、实现事务监听端口</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 事务消息监听器</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionListenerImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 全局事务标识</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AtomicInteger transIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 本地事务表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; localTransMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 执行本地事务，并根据事务执行结果返回不同状态</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> LocalTransactionState </span><span style="color:#B392F0;">executeLocalTransaction</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行本地事务操作</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;********************&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始执行本地事务&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transIndex.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String transactionId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> msg.</span><span style="color:#B392F0;">getTransactionId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        localTransMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(transactionId, status);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;本地事务执行完成，返回状态： UNKNOW&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更新本地消息表，Id为 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> transactionId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            localTransMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(transactionId, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LocalTransactionState.UNKNOW;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( r </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;本地事务执行完成，返回状态： COMMIT_MESSAGE&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更新本地消息表，Id为 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> transactionId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            localTransMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(transactionId, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LocalTransactionState.COMMIT_MESSAGE;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;本地事务执行完成，返回状态： ROLLBACK_MESSAGE&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;更新本地消息表，Id为 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> transactionId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            localTransMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(transactionId, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LocalTransactionState.ROLLBACK_MESSAGE;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 检查本地事务状态，并回复消息队列（Message Queue）的事务状态检查请求</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> LocalTransactionState </span><span style="color:#B392F0;">checkLocalTransaction</span><span style="color:#E1E4E8;">(MessageExt </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;********************&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String transactionId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> msg.</span><span style="color:#B392F0;">getTransactionId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Id为 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> transactionId </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; 的事务消息状态不确定，回查本地事务表...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Integer status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> localTransMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(msg.</span><span style="color:#B392F0;">getTransactionId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> status) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (status) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LocalTransactionState.UNKNOW;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LocalTransactionState.COMMIT_MESSAGE;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LocalTransactionState.ROLLBACK_MESSAGE;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LocalTransactionState.COMMIT_MESSAGE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 事务消息监听器</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionListenerImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 全局事务标识</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AtomicInteger transIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 本地事务表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ConcurrentHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; localTransMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 执行本地事务，并根据事务执行结果返回不同状态</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> LocalTransactionState </span><span style="color:#6F42C1;">executeLocalTransaction</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行本地事务操作</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;********************&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;开始执行本地事务&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transIndex.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String transactionId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> msg.</span><span style="color:#6F42C1;">getTransactionId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        localTransMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(transactionId, status);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;本地事务执行完成，返回状态： UNKNOW&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;更新本地消息表，Id为 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> transactionId);</span></span>
<span class="line"><span style="color:#24292E;">            localTransMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(transactionId, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LocalTransactionState.UNKNOW;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">( r </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;本地事务执行完成，返回状态： COMMIT_MESSAGE&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;更新本地消息表，Id为 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> transactionId);</span></span>
<span class="line"><span style="color:#24292E;">            localTransMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(transactionId, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LocalTransactionState.COMMIT_MESSAGE;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;本地事务执行完成，返回状态： ROLLBACK_MESSAGE&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;更新本地消息表，Id为 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> transactionId);</span></span>
<span class="line"><span style="color:#24292E;">            localTransMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(transactionId, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LocalTransactionState.ROLLBACK_MESSAGE;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 检查本地事务状态，并回复消息队列（Message Queue）的事务状态检查请求</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> LocalTransactionState </span><span style="color:#6F42C1;">checkLocalTransaction</span><span style="color:#24292E;">(MessageExt </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;********************&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String transactionId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> msg.</span><span style="color:#6F42C1;">getTransactionId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Id为 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> transactionId </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 的事务消息状态不确定，回查本地事务表...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Integer status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localTransMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getTransactionId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> status) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (status) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LocalTransactionState.UNKNOW;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LocalTransactionState.COMMIT_MESSAGE;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LocalTransactionState.ROLLBACK_MESSAGE;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LocalTransactionState.COMMIT_MESSAGE;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><p>2、创建事务消息生产者</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 事务消息生产者</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionProducer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TransactionListenerImpl listener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionListenerImpl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        TransactionMQProducer producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionMQProducer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;gp_default&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">setNamesrvAddr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost:9876&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ThreadPoolExecutor executor </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">), Executors.</span><span style="color:#B392F0;">defaultThreadFactory</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ThreadPoolExecutor.</span><span style="color:#B392F0;">AbortPolicy</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">setExecutorService</span><span style="color:#E1E4E8;">(executor);</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer.</span><span style="color:#B392F0;">setTransactionListener</span><span style="color:#E1E4E8;">(listener);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            producer.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Message msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tp_default&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tg_trans&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;KEY&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        (</span><span style="color:#9ECBFF;">&quot;hi, this is transaction msg from TransactionProducer &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i).</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(RemotingHelper.DEFAULT_CHARSET));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                TransactionSendResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> producer.</span><span style="color:#B392F0;">sendMessageInTransaction</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;********************&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;发送第 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot; 条消息 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (MQClientException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (UnsupportedEncodingException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            producer.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 事务消息生产者</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionProducer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        TransactionListenerImpl listener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionListenerImpl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        TransactionMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;gp_default&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ThreadPoolExecutor executor </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, TimeUnit.SECONDS, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">), Executors.</span><span style="color:#6F42C1;">defaultThreadFactory</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadPoolExecutor.</span><span style="color:#6F42C1;">AbortPolicy</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setExecutorService</span><span style="color:#24292E;">(executor);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setTransactionListener</span><span style="color:#24292E;">(listener);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tp_default&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tg_trans&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;KEY&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i,</span></span>
<span class="line"><span style="color:#24292E;">                        (</span><span style="color:#032F62;">&quot;hi, this is transaction msg from TransactionProducer &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(RemotingHelper.DEFAULT_CHARSET));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                TransactionSendResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">sendMessageInTransaction</span><span style="color:#24292E;">(msg, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;********************&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;发送第 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; 条消息 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (MQClientException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (UnsupportedEncodingException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h2 id="消息存储" tabindex="-1">消息存储 <a class="header-anchor" href="#消息存储" aria-label="Permalink to &quot;消息存储&quot;">​</a></h2><blockquote><p>RocketMQ 中<a href="https://rocketmq.apache.org/zh/docs/domainModel/03messagequeue" target="_blank" rel="noreferrer">队列</a>的定义，消息按照达到服务器的先后顺序被存储到队列中，理论上每个队列都支持无限存储。但是在实际部署场景中，服务端节点的物理存储空间有限，消息无法做到永久存储。因此，在实际使用中需要考虑以下问题，消息在服务端中的存储以什么维度为判定条件？消息存储以什么粒度进行管理？消息存储超过限制后如何处理？这些问题都是由消息存储和过期清理机制来定义的。</p></blockquote><blockquote><p><strong>消息存储的关键问题</strong></p><ul><li>存储管理的粒度：RocketMQ <strong>按存储节点管理</strong>消息的存储时长，并不是按照主题或队列粒度来管理</li><li>存储判断依据：消息存储按照存储时间作为判断依据，相对于消息数量、消息大小等条件，使用存储时间作为判断依据，更利于业务方对消息数据的价值进行评估</li><li>存储和消费状态无关：RocketMQ 的消息存储是按照消息的生产时间计算，和消息是否被消费无关。</li></ul></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/_GXaJfRn11F_TiyOQKQ2Ew" target="_blank" rel="noreferrer">消息存储模型</a></p></blockquote><br><h3 id="零拷贝" tabindex="-1">零拷贝 <a class="header-anchor" href="#零拷贝" aria-label="Permalink to &quot;零拷贝&quot;">​</a></h3><ul><li>mmap（<em>Memory Map</em>），是一种内存映射文件的方法，将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的对映关系。内核缓冲区和应用缓冲区共享，从而减少了从读缓冲区到用户缓冲区的一次 CPU 拷贝。</li><li>sendfile</li></ul><br><h3 id="落盘机制" tabindex="-1">落盘机制 <a class="header-anchor" href="#落盘机制" aria-label="Permalink to &quot;落盘机制&quot;">​</a></h3><blockquote><p>RocketMQ 先将消息写到 PageCache，再写入磁盘</p></blockquote><ul><li>异步</li><li>同步</li></ul><blockquote><p><a href="https://juejin.cn/post/6844904149725741064" target="_blank" rel="noreferrer">RocketMQ 消息存储和查询原理</a></p></blockquote><p>稍后补充。。。</p><br><h2 id="消息清理" tabindex="-1">消息清理 <a class="header-anchor" href="#消息清理" aria-label="Permalink to &quot;消息清理&quot;">​</a></h2><p>当出现以下几种情况下时就会触发消息清理：</p><ul><li>存储的消息将最多保存 3 天，超过 3 天未使用的消息将被删除</li><li>手动执行删除</li><li>默认每天凌晨 4 点会自动清理过期的文件</li><li>当磁盘空间占用率默认达到 75% 之后，会自动清理过期文件</li><li>当磁盘空间占用率默认达到 85% 之后，无论这个文件是否过期，都会被清理掉</li></ul><br><h2 id="集群搭建" tabindex="-1">集群搭建 <a class="header-anchor" href="#集群搭建" aria-label="Permalink to &quot;集群搭建&quot;">​</a></h2><blockquote><p>保证高可用</p></blockquote><br><p><strong>集群特点</strong></p><ul><li>NameServer 是一个几乎无状态节点，可集群部署，节点之间无任何信息同步</li><li>Broker 部署相对复杂，Broker 分为 Master 和 Slave。Master 可以部署多个，一个 Master 可以对应多个Slave；一个 Slave 只能对应一个 Master。Master 与 Slave 对应关系通过指定相同的 BrokerName，不同的 BrokerID来定义，BrokerId 为 0 表示 Master，非 0 表示 Slave；一般来说生产者生产的消息发送到 Master， Master 和 Slave 之间进行消息同步，消费者从 Slave 读取消息。每个 Broker 与 NameServer 集群中所有节点建立长链接，定时注册 Topic 信息到所有 NameServer</li><li>Producer 与 NameServer 集群中的其中一个节点（随机选择）建立长链接，定期从 NameServer 获取 Topic 路由信息，并向提供 Topic 服务的 Master 建立长链接，且定时向 Master 发送心跳。Producer 完全无状态，可集群部署。</li><li>Consumer 与 NameServer 集群中的其中一个节点（随机选择）建立长链接，定期从 NameServer 获取 Topic 路由信息，并向提供 Topic 服务的 Master、Slave 建立长链接，且定时向 Master、Slave 发送心跳。Consumer 既可以从 Master 订阅消息，也可以从 Slave 订阅消息，订阅规则由 Broker 配置决定</li></ul><br><h3 id="集群模式" tabindex="-1">集群模式 <a class="header-anchor" href="#集群模式" aria-label="Permalink to &quot;集群模式&quot;">​</a></h3><h4 id="单-master" tabindex="-1">单 Master <a class="header-anchor" href="#单-master" aria-label="Permalink to &quot;单 Master&quot;">​</a></h4><blockquote><p>风险较大，一旦 Broker 重启或者宕机，会导致整个系统服务不可用。</p></blockquote><br><h4 id="多-master" tabindex="-1">多 Master <a class="header-anchor" href="#多-master" aria-label="Permalink to &quot;多 Master&quot;">​</a></h4><blockquote><p>无 Slave，所有 Broker 都是 Master，例如 2 个 Master 或者 3 个 Master</p></blockquote><p>优点：配置简单，单个 Master 宕机或重启对应用无影响，性能最好</p><p>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会收到影响</p><br><h4 id="多-master-slave" tabindex="-1">多 Master/Slave <a class="header-anchor" href="#多-master-slave" aria-label="Permalink to &quot;多 Master/Slave&quot;">​</a></h4><p><strong>异步</strong></p><blockquote><p>每个 Master 配置一个 Slave，有多对 Master-Slave，采用<strong>异步复制</strong>方式，主备有短暂消息延迟（毫秒级）</p></blockquote><p>优点：即使磁盘损坏，消息丢失的非常少，且实时性不会受到影响。同时 Master 宕机后，消费者仍然可以从 Slave 消费，而且此过程对应用透明，不需人工干预，性能和多 Master 模式几乎一样。</p><p>缺点：Master 宕机，磁盘损坏情况下会丢失少量信息</p><br><p><strong>同步</strong></p><blockquote><p>每个 Master 配置一个 Slave，有多对 Master-Slave，采用<strong>同步双写</strong>方式，即只有主备都写成功，才向应用返回成功</p></blockquote><p>优点：数据与服务都无单点故障，Master 宕机情况下，消息无延迟，服务可用性与数据可用性都非常高</p><p>缺点：性能比异步复制略低，发送单个消息的 RT 略高，且目前版本在主节点宕机后，备机不能自动切换为主机</p><br><h3 id="双主双从集群" tabindex="-1">双主双从集群 <a class="header-anchor" href="#双主双从集群" aria-label="Permalink to &quot;双主双从集群&quot;">​</a></h3><h4 id="集群搭建-1" tabindex="-1">集群搭建 <a class="header-anchor" href="#集群搭建-1" aria-label="Permalink to &quot;集群搭建&quot;">​</a></h4><ol><li>配置 hosts</li><li>关闭防火墙（开发环境）/开放端口（线上环境）</li><li>配置环境变量（export rocketmq）</li><li>创建消息存储路径</li><li>修改 Broker 配置文件</li><li>分别启动 Master1，Slave2，Master2，Slave1</li></ol><h4 id="总体结构" tabindex="-1">总体结构 <a class="header-anchor" href="#总体结构" aria-label="Permalink to &quot;总体结构&quot;">​</a></h4><p>双主双从，同步双写</p><p><img src="`+s+`" alt="image-20210709151314177"></p><h4 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h4><ol><li>启动 NameServer，启动后监听端口，等待 Broker、Producer、Consumer 连接；</li><li>Broker 启动，跟所有的 NameServer 保持长链接，定时发送心跳包。心跳包中包含当前 Broker 信息（IP 和端口等信息）以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系；</li><li>创建 Topic，创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上，也可以在发送消息时自动创建 Topic；</li><li>生产消息，生产者启动时先跟 NameServer 集群中的其中一台建立长链接，并从 NameServer 中获取当前发送的 Topic 存在哪些 Broker 上，轮询从队列列表中选择一个队列，与队列所在的 Broker 建立长链接，向该 Broker 发消息；</li><li>消息消费，消费者跟其中一台 NameServer 建立长链接，获取当前订阅 Topic 存在哪些 Broker 上，然后直接跟 Broker 建立连接通道，开始消费消息。</li></ol><br><h2 id="dledger" tabindex="-1">Dledger <a class="header-anchor" href="#dledger" aria-label="Permalink to &quot;Dledger&quot;">​</a></h2><blockquote><p>DLedger（<em>Distributed Ledger</em>）是一套基于 Raft 协议的分布式日志存储组件，部署 RocketMQ 时可以根据需要选择使用 DLeger 来替换原生的副本存储机制。</p><p>DLedger 通过在多个节点之间复制和同步日志数据，实现了消息队列的高可用性和持久化存储。Dledger 采用主从架构，其中一个节点作为主节点，负责处理写入请求；其他节点作为从节点，负责复制和同步主节点的日志数据。</p></blockquote><blockquote><p>Dledger 提供了以下主要功能：</p><ol><li>分布式日志存储：Dledger 将消息数据以日志的形式持久化存储在各个节点的本地磁盘上，实现了消息的持久化存储。</li><li>日志复制和同步：Dledger 使用主从架构，主节点负责处理写入请求，并将写入的日志数据复制到从节点，从节点负责同步主节点的日志数据，实现了数据的复制和同步，保障了数据的一致性和高可用性。</li><li>日志刷盘和持久化：Dledger 使用基于文件的存储方式，通过定期将内存中的数据刷写到磁盘上，实现了消息数据的持久化存储。</li><li>日志索引和检索：Dledger 提供了索引和检索功能，可以根据消息的物理偏移量或逻辑偏移量快速定位和检索消息数据。</li><li>容错和恢复：Dledger 提供了容错和恢复机制，当主节点故障或出现网络分区时，系统会自动进行主节点切换和数据复制，保障了系统的高可用性和数据的安全性。</li><li>高性能：Dledger 设计了高效的数据结构和存储方式，采用了零拷贝和异步 IO 等技术，以实现高性能的消息存储和复制。</li></ol></blockquote><br><h2 id="rocketmq-console" tabindex="-1">RocketMQ Console <a class="header-anchor" href="#rocketmq-console" aria-label="Permalink to &quot;RocketMQ Console&quot;">​</a></h2><blockquote><p>RabbitMQ 监控平台</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/apache/rocketmq-externals.git</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rocketmq-console</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改 rocketmq-console 配置文件 application.properties 中的 nameserver 等内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 打包</span></span>
<span class="line"><span style="color:#B392F0;">mvn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clean</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Dmaven.test.skip=true</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target</span></span>
<span class="line"><span style="color:#6A737D;"># 运行</span></span>
<span class="line"><span style="color:#B392F0;">java</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-jar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rocketmq-xxxxxx.jar</span></span>
<span class="line"><span style="color:#6A737D;"># 访问 http://localhost:8080</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/apache/rocketmq-externals.git</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rocketmq-console</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改 rocketmq-console 配置文件 application.properties 中的 nameserver 等内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 打包</span></span>
<span class="line"><span style="color:#6F42C1;">mvn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clean</span><span style="color:#24292E;"> </span><span style="color:#032F62;">package</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Dmaven.test.skip=true</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target</span></span>
<span class="line"><span style="color:#6A737D;"># 运行</span></span>
<span class="line"><span style="color:#6F42C1;">java</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-jar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rocketmq-xxxxxx.jar</span></span>
<span class="line"><span style="color:#6A737D;"># 访问 http://localhost:8080</span></span></code></pre></div><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="#">RocketMQ</a></p><p><a href="https://github.com/apache/rocketmq/tree/master/docs/cn" target="_blank" rel="noreferrer">RocketMQ Docs CN</a></p><p><a href="https://juejin.cn/post/6844904127403671566" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904127403671566</a></p><p><a href="https://juejin.cn/post/6844904008629354504" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904008629354504</a></p><p><a href="https://juejin.cn/post/6874788280378851335" target="_blank" rel="noreferrer">https://juejin.cn/post/6874788280378851335</a></p><p><a href="https://juejin.cn/post/6844904087390011405" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904087390011405</a></p><p><a href="https://juejin.cn/post/6844904018322391054" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904018322391054</a></p><p><a href="https://juejin.cn/post/6899609320313339911" target="_blank" rel="noreferrer">https://juejin.cn/post/6899609320313339911</a></p><p><a href="https://www.jianshu.com/p/cc5c10221aa1" target="_blank" rel="noreferrer">https://www.jianshu.com/p/cc5c10221aa1</a></p><p><a href="https://juejin.cn/post/6944894142652612638" target="_blank" rel="noreferrer">RocketMQ 高级进阶知识</a></p><p><a href="https://www.jianshu.com/p/cc5c10221aa1" target="_blank" rel="noreferrer">RocketMQ 事务消息机制</a></p><p><a href="https://blog.csdn.net/qq_27529917/article/details/79802406" target="_blank" rel="noreferrer">RocketMQ 事务消息回查设计方案</a></p><p><a href="https://www.cnblogs.com/huangying2124/p/11702761.html" target="_blank" rel="noreferrer">RocketMQ 事务消息学习及刨坑过程</a></p><p><a href="#">分布式事务</a></p><p><a href="https://juejin.cn/post/6844903647197806605" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903647197806605</a></p><p><a href="https://juejin.cn/post/6899645923024355336" target="_blank" rel="noreferrer">https://juejin.cn/post/6899645923024355336</a></p><p><a href="https://juejin.cn/post/7022800217518899237" target="_blank" rel="noreferrer">https://juejin.cn/post/7022800217518899237</a></p><p><a href="https://juejin.cn/post/6867040340797292558" target="_blank" rel="noreferrer">https://juejin.cn/post/6867040340797292558</a></p><p><a href="https://www.jianshu.com/p/abbc80706ded" target="_blank" rel="noreferrer">订阅关系一致</a></p>`,424),C=[m];function A(b,D,k,q,B,S){return a(),l("div",null,C)}const f=n(h,[["render",A]]);export{v as __pageData,f as default};

import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.519d889f.js";const p="/assets/components.4de4964d.png",o="/assets/image-20230623163413683.c1e99a7b.png",C=JSON.parse('{"title":"Netty","description":"基于 Java NIO 封装的网络框架","frontmatter":{"description":"基于 Java NIO 封装的网络框架","tag":["Netty"]},"headers":[],"relativePath":"posts/mw/Netty/Netty.md","filePath":"posts/mw/Netty/Netty.md","lastUpdated":1699262313000}'),e={name:"posts/mw/Netty/Netty.md"},t=l(`<h1 id="netty" tabindex="-1">Netty <a class="header-anchor" href="#netty" aria-label="Permalink to &quot;Netty&quot;">​</a></h1><blockquote><p>基于 Java NIO 封装的网络框架</p></blockquote><blockquote><p>关于 IO 模型的演变以及多路复用可以看看<a href="https://mp.weixin.qq.com/s/zAh1yD5IfwuoYdrZ1tGf5Q" target="_blank" rel="noreferrer">这篇文章</a>，很详细。</p></blockquote><br><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><h3 id="创建服务器" tabindex="-1">创建服务器 <a class="header-anchor" href="#创建服务器" aria-label="Permalink to &quot;创建服务器&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoServer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">port</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// NioEventLoopGroup 用来处理 I/O 操作的多线程事件循环器</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// boss 接收到信息后注册到 worker 上，由 worker 来处理数据</span></span>
<span class="line"><span style="color:#E1E4E8;">      NioEventLoopGroup boss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 接收连接</span></span>
<span class="line"><span style="color:#E1E4E8;">      NioEventLoopGroup worker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 处理连接</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        	</span><span style="color:#6A737D;">// 启动 NIO 服务的辅助启动类</span></span>
<span class="line"><span style="color:#E1E4E8;">          ServerBootstrap server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerBootstrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        	</span><span style="color:#6A737D;">// Set the EventLoopGroup for the parent (acceptor) and the child (client)</span></span>
<span class="line"><span style="color:#E1E4E8;">          server.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(boss, worker)</span></span>
<span class="line"><span style="color:#E1E4E8;">            			</span><span style="color:#6A737D;">// The Class which is used to create Channel instances</span></span>
<span class="line"><span style="color:#E1E4E8;">                  .</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  .</span><span style="color:#B392F0;">childHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">SocketChannel</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                          ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoServerChannelHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                      }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  })</span></span>
<span class="line"><span style="color:#E1E4E8;">            			</span><span style="color:#6A737D;">// Allow to specify a ChannelOption which is used for the Channel instances once they got created</span></span>
<span class="line"><span style="color:#E1E4E8;">                  .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.SO_BACKLOG, </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            			</span><span style="color:#6A737D;">// Allow to specify a ChannelOption which is used for the Channel instances once they get created (after the acceptor accepted the Channel)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  .</span><span style="color:#B392F0;">childOption</span><span style="color:#E1E4E8;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// start</span></span>
<span class="line"><span style="color:#E1E4E8;">          ChannelFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(port).</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;server started, listen on port &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> port);</span></span>
<span class="line"><span style="color:#E1E4E8;">          future.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">closeFuture</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 阻塞直到 future 关闭</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          boss.</span><span style="color:#B392F0;">shutdownGracefully</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          worker.</span><span style="color:#B392F0;">shutdownGracefully</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoServer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">port</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// NioEventLoopGroup 用来处理 I/O 操作的多线程事件循环器</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// boss 接收到信息后注册到 worker 上，由 worker 来处理数据</span></span>
<span class="line"><span style="color:#24292E;">      NioEventLoopGroup boss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 接收连接</span></span>
<span class="line"><span style="color:#24292E;">      NioEventLoopGroup worker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 处理连接</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        	</span><span style="color:#6A737D;">// 启动 NIO 服务的辅助启动类</span></span>
<span class="line"><span style="color:#24292E;">          ServerBootstrap server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        	</span><span style="color:#6A737D;">// Set the EventLoopGroup for the parent (acceptor) and the child (client)</span></span>
<span class="line"><span style="color:#24292E;">          server.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(boss, worker)</span></span>
<span class="line"><span style="color:#24292E;">            			</span><span style="color:#6A737D;">// The Class which is used to create Channel instances</span></span>
<span class="line"><span style="color:#24292E;">                  .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">                  .</span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                          ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoServerChannelHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                      }</span></span>
<span class="line"><span style="color:#24292E;">                  })</span></span>
<span class="line"><span style="color:#24292E;">            			</span><span style="color:#6A737D;">// Allow to specify a ChannelOption which is used for the Channel instances once they got created</span></span>
<span class="line"><span style="color:#24292E;">                  .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.SO_BACKLOG, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            			</span><span style="color:#6A737D;">// Allow to specify a ChannelOption which is used for the Channel instances once they get created (after the acceptor accepted the Channel)</span></span>
<span class="line"><span style="color:#24292E;">                  .</span><span style="color:#6F42C1;">childOption</span><span style="color:#24292E;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// start</span></span>
<span class="line"><span style="color:#24292E;">          ChannelFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(port).</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;server started, listen on port &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> port);</span></span>
<span class="line"><span style="color:#24292E;">          future.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">closeFuture</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 阻塞直到 future 关闭</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          boss.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          worker.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoServer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoServerChannelHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelInboundHandlerAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// channelRead 方法会在收到客户端新消息时被调用</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelRead</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ByteBuf byteBuf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ByteBuf) msg;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[server] received &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> byteBuf.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(CharsetUtil.UTF_8));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// response</span></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;server echo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ctx.flush();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ReferenceCountUtil.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelReadComplete</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">channelReadComplete</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ctx.</span><span style="color:#B392F0;">writeAndFlush</span><span style="color:#E1E4E8;">(Unpooled.EMPTY_BUFFER) </span><span style="color:#6A737D;">// flush 缓存中的所有数据到到远程</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(ChannelFutureListener.CLOSE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exceptionCaught</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, Throwable </span><span style="color:#FFAB70;">cause</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cause.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ctx.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Close</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoServerChannelHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelInboundHandlerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// channelRead 方法会在收到客户端新消息时被调用</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        ByteBuf byteBuf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ByteBuf) msg;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[server] received &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> byteBuf.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(CharsetUtil.UTF_8));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// response</span></span>
<span class="line"><span style="color:#24292E;">            ctx.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;server echo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ctx.flush();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ReferenceCountUtil.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelReadComplete</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">channelReadComplete</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(Unpooled.EMPTY_BUFFER) </span><span style="color:#6A737D;">// flush 缓存中的所有数据到到远程</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(ChannelFutureListener.CLOSE);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exceptionCaught</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Throwable </span><span style="color:#E36209;">cause</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        cause.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Close</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="创建客户端" tabindex="-1">创建客户端 <a class="header-anchor" href="#创建客户端" aria-label="Permalink to &quot;创建客户端&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String host;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoClient</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">host</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">port</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> host;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        NioEventLoopGroup workerGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Bootstrap b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bootstrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            b.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(workerGroup)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(NioSocketChannel.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">remoteAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InetSocketAddress</span><span style="color:#E1E4E8;">(host, port))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">SocketChannel</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoClientChannelHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    });</span></span>
<span class="line"><span style="color:#E1E4E8;">            ChannelFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;echo client started&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            future.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">closeFuture</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 阻塞直到 future 关闭</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            workerGroup.</span><span style="color:#B392F0;">shutdownGracefully</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoClient</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String host;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoClient</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">host</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">port</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> host;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        NioEventLoopGroup workerGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Bootstrap b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bootstrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            b.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(workerGroup)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">remoteAddress</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(host, port))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                            ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoClientChannelHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    });</span></span>
<span class="line"><span style="color:#24292E;">            ChannelFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;echo client started&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            future.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">closeFuture</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 阻塞直到 future 关闭</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            workerGroup.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoClient</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// @ChannelHandler.Sharable 表示这个类的实例可以在 pipeline 中多次共享</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ChannelHandler</span><span style="color:#E1E4E8;">.Sharable</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoClientChannelHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleChannelInboundHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">ByteBuf</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelActive</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ctx.</span><span style="color:#B392F0;">writeAndFlush</span><span style="color:#E1E4E8;">(Unpooled.</span><span style="color:#B392F0;">copiedBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello! This is client&quot;</span><span style="color:#E1E4E8;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelRead0</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, ByteBuf </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[client] received &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> msg.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exceptionCaught</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, Throwable </span><span style="color:#FFAB70;">cause</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cause.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ctx.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @ChannelHandler.Sharable 表示这个类的实例可以在 pipeline 中多次共享</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ChannelHandler</span><span style="color:#24292E;">.Sharable</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoClientChannelHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleChannelInboundHandler</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">ByteBuf</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelActive</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(Unpooled.</span><span style="color:#6F42C1;">copiedBuffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello! This is client&quot;</span><span style="color:#24292E;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead0</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, ByteBuf </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[client] received &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> msg.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exceptionCaught</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Throwable </span><span style="color:#E36209;">cause</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        cause.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>可以看到，相比于单纯使用 Java NIO，使用 Netty 来创建网络客服务器和客户端就少了很多代码。Java NIO 中 Selector、Channel、Buffer 三个部分都需要自行关注其逻辑实现；在 Netty 中更多的是关注如何处理数据，减少了很多代码和繁琐的创建逻辑，只需要关注业务逻辑。</p><br><h2 id="类和接口" tabindex="-1">类和接口 <a class="header-anchor" href="#类和接口" aria-label="Permalink to &quot;类和接口&quot;">​</a></h2><h3 id="bytebuf" tabindex="-1">ByteBuf <a class="header-anchor" href="#bytebuf" aria-label="Permalink to &quot;ByteBuf&quot;">​</a></h3><p>与 Java NIO 中的 ByteBuffer 一样，用作容器。Netty 使用引用计数来判断一个 ByteBuf 何时被释放。</p><p><strong>如何创建</strong></p><p>推荐通过 Unpooled 类来创建 ByteBuf 实例。</p><p><strong>访问索引</strong></p><p>ByteBuf 使用一个读和一个写索引作为数据访问指针。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">+-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;">| discardable bytes | readable bytes   | writable bytes   |</span></span>
<span class="line"><span style="color:#e1e4e8;">|                   | (CONTENT)        |                  |</span></span>
<span class="line"><span style="color:#e1e4e8;">+-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;">|                   |                  |                  |</span></span>
<span class="line"><span style="color:#e1e4e8;">0     &lt;=      readerIndex    &lt;=   writerIndex    &lt;=    capacity</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">+-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#24292e;">| discardable bytes | readable bytes   | writable bytes   |</span></span>
<span class="line"><span style="color:#24292e;">|                   | (CONTENT)        |                  |</span></span>
<span class="line"><span style="color:#24292e;">+-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#24292e;">|                   |                  |                  |</span></span>
<span class="line"><span style="color:#24292e;">0     &lt;=      readerIndex    &lt;=   writerIndex    &lt;=    capacity</span></span></code></pre></div><p><strong>数据读取</strong></p><p>任何名称以 read 或 skip 开头的操作都会获取或跳过 readerIndex 之前的数据</p><p><strong>数据写入</strong></p><p>任何名称以 write 开头的操作都会在当前 writerIndex 处写入数据，如果没有足够的可写字节，报错 IndexOutOfBoundsException。</p><p><strong>数据丢弃</strong></p><p>任何在 readerIndex 之前的数据在调用 discardReadBytes() 方法之后都会被丢弃</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> *  BEFORE discardReadBytes()</span></span>
<span class="line"><span style="color:#e1e4e8;"> *</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      | discardable bytes |  readable bytes  |  writable bytes  |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      |                   |                  |                  |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      0      &lt;=      readerIndex   &lt;=   writerIndex    &lt;=    capacity</span></span>
<span class="line"><span style="color:#e1e4e8;"> *</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  AFTER discardReadBytes()</span></span>
<span class="line"><span style="color:#e1e4e8;"> *</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +------------------+--------------------------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      |  readable bytes  |    writable bytes (got more space)   |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +------------------+--------------------------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      |                  |                                      |</span></span>
<span class="line"><span style="color:#e1e4e8;"> * readerIndex (0) &lt;= writerIndex (decreased)        &lt;=        capacity</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> *  BEFORE discardReadBytes()</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      | discardable bytes |  readable bytes  |  writable bytes  |</span></span>
<span class="line"><span style="color:#24292e;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      |                   |                  |                  |</span></span>
<span class="line"><span style="color:#24292e;"> *      0      &lt;=      readerIndex   &lt;=   writerIndex    &lt;=    capacity</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> *  AFTER discardReadBytes()</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> *      +------------------+--------------------------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      |  readable bytes  |    writable bytes (got more space)   |</span></span>
<span class="line"><span style="color:#24292e;"> *      +------------------+--------------------------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      |                  |                                      |</span></span>
<span class="line"><span style="color:#24292e;"> * readerIndex (0) &lt;= writerIndex (decreased)        &lt;=        capacity</span></span></code></pre></div><p><strong>数据清空操作</strong></p><p>可以通过调用 clear() 方法来清空当前 ByteBuf</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> *  BEFORE clear()</span></span>
<span class="line"><span style="color:#e1e4e8;"> *</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      | discardable bytes |  readable bytes  |  writable bytes  |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      |                   |                  |                  |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      0      &lt;=      readerIndex   &lt;=   writerIndex    &lt;=    capacity</span></span>
<span class="line"><span style="color:#e1e4e8;"> *</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  AFTER clear()</span></span>
<span class="line"><span style="color:#e1e4e8;"> *</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +---------------------------------------------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      |             writable bytes (got more space)             |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      +---------------------------------------------------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      |                                                         |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *      0 = readerIndex = writerIndex            &lt;=            capacity</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> *  BEFORE clear()</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      | discardable bytes |  readable bytes  |  writable bytes  |</span></span>
<span class="line"><span style="color:#24292e;"> *      +-------------------+------------------+------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      |                   |                  |                  |</span></span>
<span class="line"><span style="color:#24292e;"> *      0      &lt;=      readerIndex   &lt;=   writerIndex    &lt;=    capacity</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> *  AFTER clear()</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> *      +---------------------------------------------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      |             writable bytes (got more space)             |</span></span>
<span class="line"><span style="color:#24292e;"> *      +---------------------------------------------------------+</span></span>
<span class="line"><span style="color:#24292e;"> *      |                                                         |</span></span>
<span class="line"><span style="color:#24292e;"> *      0 = readerIndex = writerIndex            &lt;=            capacity</span></span></code></pre></div><br><p><strong>复合类型</strong></p><p>假设存在以下内容，在 NIO 中要创建一个新的大缓存区用来拷贝这两部分到这个新缓存区中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> +--------+----------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> | header |   body   |</span></span>
<span class="line"><span style="color:#e1e4e8;"> +--------+----------+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> +--------+----------+</span></span>
<span class="line"><span style="color:#24292e;"> | header |   body   |</span></span>
<span class="line"><span style="color:#24292e;"> +--------+----------+</span></span></code></pre></div><p>在 Netty 中可以将这两个类型都包装成 ByteBuf</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 复合类型与组件类型是兼容的。</span></span>
<span class="line"><span style="color:#E1E4E8;">ByteBuf message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Unpooled.</span><span style="color:#B392F0;">wrappedBuffer</span><span style="color:#E1E4E8;">(header, body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 因此，你甚至可以通过混合复合类型与普通缓冲区来创建一个复合类型。</span></span>
<span class="line"><span style="color:#E1E4E8;">ByteBuf messageWithFooter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Unpooled.</span><span style="color:#B392F0;">wrappedBuffer</span><span style="color:#E1E4E8;">(message, footer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 由于复合类型仍是 ByteBuf，访问其内容很容易，</span></span>
<span class="line"><span style="color:#6A737D;">//并且访问方法的行为就像是访问一个单独的缓冲区，</span></span>
<span class="line"><span style="color:#6A737D;">//即使你想访问的区域是跨多个组件。</span></span>
<span class="line"><span style="color:#6A737D;">//这里的无符号整数读取位于 body 和 footer</span></span>
<span class="line"><span style="color:#E1E4E8;">messageWithFooter.</span><span style="color:#B392F0;">getUnsignedInt</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">     messageWithFooter.</span><span style="color:#B392F0;">readableBytes</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> footer.</span><span style="color:#B392F0;">readableBytes</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 复合类型与组件类型是兼容的。</span></span>
<span class="line"><span style="color:#24292E;">ByteBuf message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Unpooled.</span><span style="color:#6F42C1;">wrappedBuffer</span><span style="color:#24292E;">(header, body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 因此，你甚至可以通过混合复合类型与普通缓冲区来创建一个复合类型。</span></span>
<span class="line"><span style="color:#24292E;">ByteBuf messageWithFooter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Unpooled.</span><span style="color:#6F42C1;">wrappedBuffer</span><span style="color:#24292E;">(message, footer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 由于复合类型仍是 ByteBuf，访问其内容很容易，</span></span>
<span class="line"><span style="color:#6A737D;">//并且访问方法的行为就像是访问一个单独的缓冲区，</span></span>
<span class="line"><span style="color:#6A737D;">//即使你想访问的区域是跨多个组件。</span></span>
<span class="line"><span style="color:#6A737D;">//这里的无符号整数读取位于 body 和 footer</span></span>
<span class="line"><span style="color:#24292E;">messageWithFooter.</span><span style="color:#6F42C1;">getUnsignedInt</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">     messageWithFooter.</span><span style="color:#6F42C1;">readableBytes</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> footer.</span><span style="color:#6F42C1;">readableBytes</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>自动扩容</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 一种新的动态缓冲区被创建。在内部，实际缓冲区是被“懒”创建，从而避免潜在的浪费内存空间。</span></span>
<span class="line"><span style="color:#E1E4E8;">ByteBuf b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Unpooled.</span><span style="color:#B392F0;">buffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当第一个执行写尝试，内部指定初始容量 4 的缓冲区被创建</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#B392F0;">writeByte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#B392F0;">writeByte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#B392F0;">writeByte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#B392F0;">writeByte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当写入的字节数超过初始容量 4 时，</span></span>
<span class="line"><span style="color:#6A737D;">//内部缓冲区自动分配具有较大的容量</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#B392F0;">writeByte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 一种新的动态缓冲区被创建。在内部，实际缓冲区是被“懒”创建，从而避免潜在的浪费内存空间。</span></span>
<span class="line"><span style="color:#24292E;">ByteBuf b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Unpooled.</span><span style="color:#6F42C1;">buffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当第一个执行写尝试，内部指定初始容量 4 的缓冲区被创建</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">writeByte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">writeByte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">writeByte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">writeByte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;4&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当写入的字节数超过初始容量 4 时，</span></span>
<span class="line"><span style="color:#6A737D;">//内部缓冲区自动分配具有较大的容量</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">writeByte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;5&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><br><h4 id="heapbuffer" tabindex="-1">HeapBuffer <a class="header-anchor" href="#heapbuffer" aria-label="Permalink to &quot;HeapBuffer&quot;">​</a></h4><p>顾名思义，将缓冲数据保存在 JVM 的堆区中</p><h4 id="directbuffer" tabindex="-1">DirectBuffer <a class="header-anchor" href="#directbuffer" aria-label="Permalink to &quot;DirectBuffer&quot;">​</a></h4><p>Java NIO 新增的缓冲类，可以将缓冲数据保存到 JVM 堆外存中，不会被垃圾回收。</p><h4 id="bytebufholder" tabindex="-1">ByteBufHolder <a class="header-anchor" href="#bytebufholder" aria-label="Permalink to &quot;ByteBufHolder&quot;">​</a></h4><blockquote><p>A packet which is send or receive.</p></blockquote><h4 id="referencecounted" tabindex="-1">ReferenceCounted <a class="header-anchor" href="#referencecounted" aria-label="Permalink to &quot;ReferenceCounted&quot;">​</a></h4><p>Buffer 引用计数器，ByteBuf 和 ByteBufHolder 均继承自 ReferenceCounted。活动的引用计数器大于 0 的对象被保证不被释放。当数量引用减少到 0，该实例将被释放</p><br><h3 id="bootstrap" tabindex="-1">Bootstrap <a class="header-anchor" href="#bootstrap" aria-label="Permalink to &quot;Bootstrap&quot;">​</a></h3><table><thead><tr><th></th><th>ServerBootstrap</th><th>Bootstrap</th></tr></thead><tbody><tr><td>网络功能</td><td>绑定本地端口</td><td>连接到远程主机和端口</td></tr><tr><td>EventLoopGroup 数量</td><td>2</td><td>1</td></tr></tbody></table><h4 id="serverbootstrap" tabindex="-1">ServerBootstrap <a class="header-anchor" href="#serverbootstrap" aria-label="Permalink to &quot;ServerBootstrap&quot;">​</a></h4><p>负责启动 Netty 服务端，使用 bind() 方法绑定指定端口后启动服务。</p><br><h4 id="bootstrap-1" tabindex="-1">Bootstrap <a class="header-anchor" href="#bootstrap-1" aria-label="Permalink to &quot;Bootstrap&quot;">​</a></h4><p>负责启动 Netty 客户端，提供了一个用于应用程序网络层配置的容器。使用 connect() 方法进行 TCP 传输，bind() 方法进行 UDP 传输。</p><p>connect 和 bind 方法返回一个 ChannelFuture 表示异步 Channel I/O 操作的结果。</p><br><h3 id="channel" tabindex="-1">Channel <a class="header-anchor" href="#channel" aria-label="Permalink to &quot;Channel&quot;">​</a></h3><p>连接到网络套接字（Socket）或能够执行 I/O 操作（例如读取、写入、连接和绑定）的组件。可以对 Channel 进行以下操作：</p><p>1、查看当前 Channel 的状态</p><p>2、查看 Channel 的配置</p><p>3、查看 Channel 支持的操作（读/写/连接/端口绑定）</p><p>4、获取和当前 Channel 相关的 ChannelPipeline</p><br><p>Channel 是可继承的，一个 Channel 可以有一个 parent（取决于 Channel 是如何创建的）。比如在客户端 Channel 中可能会收到来自服务端的 SocketChannel，客户端会使用 ServerSocketChannel 来接收数据并创建出该 SocketChannel，此时调用 SocketChannel#parent 得到的就是客户端的 ServerSocketChannel。</p><br><h3 id="channelfuture" tabindex="-1">ChannelFuture <a class="header-anchor" href="#channelfuture" aria-label="Permalink to &quot;ChannelFuture&quot;">​</a></h3><p>表示异步 Channel 的操作结果，Netty 中所有 IO 操作都是异步的，任何 I/O 调用都会立即返回。但 Netty 不保证所请求的 I/O 操作在调用结束时已经完成，ChannelFuture 实例提供了关于 I/O 操作的结果或状态的信息。</p><ul><li><p>ChannelFuture 是一个 Future 类型的操作结果，是只读的。</p></li><li><p>ChannelPromise 是 ChannelFuture 的一个子类，是可写的。</p></li></ul><br><h3 id="channelhandler" tabindex="-1">ChannelHandler <a class="header-anchor" href="#channelhandler" aria-label="Permalink to &quot;ChannelHandler&quot;">​</a></h3><p>处理一个 I/O 事件或拦截一个 I/O 操作，并将其转发给 ChannelPipeline 中的下一个 Handler。</p><p>ChannelHandler 本身没有提供很多方法，它提供以下子接口：</p><ul><li>ChannelInboundHandler 处理输入的 IO 事件</li><li>ChannelOutboundHandler 处理输出的 IO 操作</li></ul><p>此外还提供了一系列 Adapter，可以更方便的实现操作：</p><ul><li>ChannelInboundHandlerAdapter 处理输入事件</li><li>ChannelOutboundHandlerAdapter 处理输出操作</li><li>ChannelDuplexHandler 处理输入和输出事件</li><li>SimpleChannelInboundHandler，ChannelInboundHandlerAdapter 的子类，允许处理指定的消息类型</li></ul><p>业务逻辑处理基本上都是在各个 ChannelHandler 中进行的。</p><br><p><strong>@Sharable</strong></p><p>如果 ChannelHandler 使用了 @Sharable 注解，这意味该 ChannelHandler 可以在一个或多个 ChannelPipeline 中共享。如果不指定这个注解，必须每次将其添加到 ChannelPipeline 时创建一个新的 ChannelHandler 实例。</p><br><h3 id="channelhandlercontext" tabindex="-1">ChannelHandlerContext <a class="header-anchor" href="#channelhandlercontext" aria-label="Permalink to &quot;ChannelHandlerContext&quot;">​</a></h3><p>将 ChannelHandler 和 ChannelPipeline 相关联起来的上下文，ChannelHandlerContext 定义 pipeline() 方法可以用来获取与当前 ChannelHandler 相关联的 ChannelPipeline。</p><p>因为 ChannelHandler 可以被添加到多个 ChannelPipeline 中，所以一个共享的 ChannelHandler 实例（标注 @Sharable）可能有多个 ChannelHandlerContext。</p><br><h3 id="channelpipeline" tabindex="-1">ChannelPipeline <a class="header-anchor" href="#channelpipeline" aria-label="Permalink to &quot;ChannelPipeline&quot;">​</a></h3><p>ChannelPipeline 是 ChannelHandler 链的容器。每个 Channel 都有一个对应的 ChannelPipeline，用于管理 ChannelHandler，多个 ChannelHandler 在 ChannelPipeline 上形成一条调用链。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> *                                                 I/O Request</span></span>
<span class="line"><span style="color:#e1e4e8;"> *                                            				 or</span></span>
<span class="line"><span style="color:#e1e4e8;"> *                                        		ChannelHandlerContext</span></span>
<span class="line"><span style="color:#e1e4e8;"> *                                                      |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  +---------------------------------------------------+---------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |                           ChannelPipeline         |               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |                                                  \\|/              |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +---------------------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |              /|\\                                  |               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |               |                                  \\|/              |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |              /|\\                                  .               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |               .                                   .               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |        [ method call]                       [method call]         |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |               .                                   .               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |               .                                  \\|/              |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |              /|\\                                  |               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |               |                                  \\|/              |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |              /|\\                                  |               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  +---------------+-----------------------------------+---------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *                  |                                  \\|/</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  +---------------+-----------------------------------+---------------+</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |               |                                   |               |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |       [ Socket.read() ]                    [ Socket.write() ]     |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |                                                                   |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  |  Netty Internal I/O Threads (Transport Implementation)            |</span></span>
<span class="line"><span style="color:#e1e4e8;"> *  +-------------------------------------------------------------------+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> *                                                 I/O Request</span></span>
<span class="line"><span style="color:#24292e;"> *                                            				 or</span></span>
<span class="line"><span style="color:#24292e;"> *                                        		ChannelHandlerContext</span></span>
<span class="line"><span style="color:#24292e;"> *                                                      |</span></span>
<span class="line"><span style="color:#24292e;"> *  +---------------------------------------------------+---------------+</span></span>
<span class="line"><span style="color:#24292e;"> *  |                           ChannelPipeline         |               |</span></span>
<span class="line"><span style="color:#24292e;"> *  |                                                  \\|/              |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +---------------------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |              /|\\                                  |               |</span></span>
<span class="line"><span style="color:#24292e;"> *  |               |                                  \\|/              |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |              /|\\                                  .               |</span></span>
<span class="line"><span style="color:#24292e;"> *  |               .                                   .               |</span></span>
<span class="line"><span style="color:#24292e;"> *  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|</span></span>
<span class="line"><span style="color:#24292e;"> *  |        [ method call]                       [method call]         |</span></span>
<span class="line"><span style="color:#24292e;"> *  |               .                                   .               |</span></span>
<span class="line"><span style="color:#24292e;"> *  |               .                                  \\|/              |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |              /|\\                                  |               |</span></span>
<span class="line"><span style="color:#24292e;"> *  |               |                                  \\|/              |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |    +----------+----------+            +-----------+----------+    |</span></span>
<span class="line"><span style="color:#24292e;"> *  |              /|\\                                  |               |</span></span>
<span class="line"><span style="color:#24292e;"> *  +---------------+-----------------------------------+---------------+</span></span>
<span class="line"><span style="color:#24292e;"> *                  |                                  \\|/</span></span>
<span class="line"><span style="color:#24292e;"> *  +---------------+-----------------------------------+---------------+</span></span>
<span class="line"><span style="color:#24292e;"> *  |               |                                   |               |</span></span>
<span class="line"><span style="color:#24292e;"> *  |       [ Socket.read() ]                    [ Socket.write() ]     |</span></span>
<span class="line"><span style="color:#24292e;"> *  |                                                                   |</span></span>
<span class="line"><span style="color:#24292e;"> *  |  Netty Internal I/O Threads (Transport Implementation)            |</span></span>
<span class="line"><span style="color:#24292e;"> *  +-------------------------------------------------------------------+</span></span></code></pre></div><br><p><strong>Pipeline 上的事件转发</strong></p><p>ChannelHandler 通过调用 ChannelHandlerContext 中的方法，将事件传递给调用链上的下一个 ChannelHandler。</p><br><p><strong>创建 Pipeline</strong></p><p>一个 Pipeline 上可能会有多和 ChannelHandler，分别负责不同的工作，比如：</p><ul><li>协议解码器，将从 Channel 接收到的二进制数据转换成 Java 对象</li><li>协议编码器，将 Java 对象编码成二进制数据，通过 Channel 传输到远程</li><li>业务逻辑处理器，负责实现实际的业务逻辑</li></ul><br><h3 id="eventloop" tabindex="-1">EventLoop <a class="header-anchor" href="#eventloop" aria-label="Permalink to &quot;EventLoop&quot;">​</a></h3><p>在使用 Netty 来实现服务器的过程中你可能会奇怪，NIO 中的 Selector 角色在哪里？在 Netty 中 EventLoop 中就维护着一个 Selector 实例，用来处理 Channel 的 IO 操作。 Netty 启动时，会将多个 Channel 注册到 EventLoop 中，一个 EventLoop 可以处理多个 Channel 事件，一个 EventLoopGroup 可以包含多个 EventLoop。</p><br><h3 id="nioeventloop" tabindex="-1">NioEventLoop <a class="header-anchor" href="#nioeventloop" aria-label="Permalink to &quot;NioEventLoop&quot;">​</a></h3><p>用于将 Channel 注册到 Selector 中，内部维护一个 SelectorTuple 类，</p><br><h2 id="架构总览" tabindex="-1">架构总览 <a class="header-anchor" href="#架构总览" aria-label="Permalink to &quot;架构总览&quot;">​</a></h2><p><img src="`+p+`" alt="img"></p><p>缓冲（Buffer），通道（Channel），事件模型（Event Model）是 Netty 的三大核心。</p><br><h2 id="编码-解码器" tabindex="-1">编码/解码器 <a class="header-anchor" href="#编码-解码器" aria-label="Permalink to &quot;编码/解码器&quot;">​</a></h2><p>编码器能帮助我们将 Java 类型转换成 ByteBuf 发送到远程，解码器则将接收到的 ByteBuf 转换成 Java 类型来进行处理。Netty 提供了常见和常用的一些编解码器，能让我们更方便的来操作各种类型的数据：</p><ul><li>StringEncoder</li><li>StringDecoder</li><li>HttpRequestDecoder</li><li>HttpResponseEncoder</li><li>LineBasedFrameDecoder，将收到的 ByteBuf 在行尾处分割，使用行尾控制字符（<code>\\n</code> 或 <code>\\r\\n</code>）作为分隔符来处理数据</li><li>DelimiterBasedFrameDecoder，使用自定义的特殊字符作为消息的分隔符</li><li>LengthFieldBasedFrameDecoder，通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息</li><li>...</li></ul><p>如在进行聊天系统的开发中，想要直接发送 String 类型，可以在 ChannelPipeline 中添加 StringEncoder 与 StringDecoder 用来帮助处理数据，这样就不用手动将数据在 String 和 ByteBuf 中来回转化。</p><blockquote><p><em>注意：不论解码器还是编码器，接收的消息类型必须与待处理的消息类型一致，否则该编解码 ChannelHandler 不会被执行。</em></p></blockquote><br><h3 id="messagetobyteencoder" tabindex="-1">MessageToByteEncoder <a class="header-anchor" href="#messagetobyteencoder" aria-label="Permalink to &quot;MessageToByteEncoder&quot;">​</a></h3><p>继承自 ChannelOutboundHandlerAdapter，可以将 Java 类型转换成 ByteBuf 发送出去。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntegerEncoder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageToByteEncoder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// This method will be called for each written message that can be handled by this encoder.</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, Integer </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, ByteBuf </span><span style="color:#FFAB70;">out</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        out.</span><span style="color:#B392F0;">writeInt</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntegerEncoder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageToByteEncoder</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// This method will be called for each written message that can be handled by this encoder.</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Integer </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, ByteBuf </span><span style="color:#E36209;">out</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        out.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="messagetomessageencoder" tabindex="-1">MessageToMessageEncoder <a class="header-anchor" href="#messagetomessageencoder" aria-label="Permalink to &quot;MessageToMessageEncoder&quot;">​</a></h3><p>将出站数据从一种消息编码成另一种消息</p><br><h3 id="bytetomessagedecoder" tabindex="-1">ByteToMessageDecoder <a class="header-anchor" href="#bytetomessagedecoder" aria-label="Permalink to &quot;ByteToMessageDecoder&quot;">​</a></h3><p>继承自 ChannelInboundHandlerAdapter，可以将接收到的 ByteBuf 类型转换成 Java 类型。</p><p>使用 ByteToMessageDecoder 需要调用 ByteBuf#readableBytes 方法检查接收到的数据是否满足一个 Frame，只有接收到一个 Frame 的数据才能将其完整的转换成 Java 类型。</p><blockquote><p><em>注意：ByteToMessageDecoder 的子类不能标注 @Sharable。因为可能有多个读写操作在一个 ByteBuf 上同时进行，可能造成内存溢出。可以使用 ByteBuf#readSlice 切分出一个副本再进行操作。</em></p></blockquote><br><h3 id="replayingdecoder" tabindex="-1">ReplayingDecoder <a class="header-anchor" href="#replayingdecoder" aria-label="Permalink to &quot;ReplayingDecoder&quot;">​</a></h3><p>ByteToMessageDecoder 的子类，使用起来更加方便，不需要手动的调用 ByteBuf#readableBytes 检查缓冲中的数据是否满足一个 Frame。</p><blockquote><p>The biggest difference between ReplayingDecoder and ByteToMessageDecoder is that ReplayingDecoder allows you to implement the decode() and decodeLast() methods just like all required bytes were received already</p></blockquote><p>ReplayingDecoder#decode 的触发条件是接收到的数据已经满足一个 Frame，不用再关心过程，直接处理接收到的数据即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 自定义 MessageProtocol 类</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageProtocol</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] content;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLen</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setLen</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> content;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setContent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> content;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageProtocol</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageProtocol</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> content;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 自定义 MessageProtocol 类</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageProtocol</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] content;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLen</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setLen</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> content;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setContent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageProtocol</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageProtocol</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ByteBuf 解码成 MessageProtocol</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageProtocolDecoder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReplayingDecoder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">MessageProtocol</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, ByteBuf </span><span style="color:#FFAB70;">in</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">out</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ByteBuf to MessageProtocol</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;decode MessageProtocol&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> in.</span><span style="color:#B392F0;">readInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[len];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        in.</span><span style="color:#B392F0;">readBytes</span><span style="color:#E1E4E8;">(buf); </span><span style="color:#6A737D;">// 将 len 长度的数据读入 buf</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 封装成 MessageProtocol 传递给下一个 handler 处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        MessageProtocol messageProtocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageProtocol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        messageProtocol.</span><span style="color:#B392F0;">setLen</span><span style="color:#E1E4E8;">(len);</span></span>
<span class="line"><span style="color:#E1E4E8;">        messageProtocol.</span><span style="color:#B392F0;">setContent</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"><span style="color:#E1E4E8;">        out.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(messageProtocol);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ByteBuf 解码成 MessageProtocol</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageProtocolDecoder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReplayingDecoder</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">MessageProtocol</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, ByteBuf </span><span style="color:#E36209;">in</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">out</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ByteBuf to MessageProtocol</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;decode MessageProtocol&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[len];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        in.</span><span style="color:#6F42C1;">readBytes</span><span style="color:#24292E;">(buf); </span><span style="color:#6A737D;">// 将 len 长度的数据读入 buf</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 封装成 MessageProtocol 传递给下一个 handler 处理</span></span>
<span class="line"><span style="color:#24292E;">        MessageProtocol messageProtocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageProtocol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        messageProtocol.</span><span style="color:#6F42C1;">setLen</span><span style="color:#24292E;">(len);</span></span>
<span class="line"><span style="color:#24292E;">        messageProtocol.</span><span style="color:#6F42C1;">setContent</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"><span style="color:#24292E;">        out.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(messageProtocol);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="messagetomessagedecoder" tabindex="-1">MessageToMessageDecoder <a class="header-anchor" href="#messagetomessagedecoder" aria-label="Permalink to &quot;MessageToMessageDecoder&quot;">​</a></h3><p>将入站数据从一种消息解码为另外一种消息</p><br><h3 id="bytetomessagecodec" tabindex="-1">ByteToMessageCodec <a class="header-anchor" href="#bytetomessagecodec" aria-label="Permalink to &quot;ByteToMessageCodec&quot;">​</a></h3><p>编解码器，可以认为是编码器和解码器的复合体</p><br><h3 id="messagetomessagecodec" tabindex="-1">MessageToMessageCodec <a class="header-anchor" href="#messagetomessagecodec" aria-label="Permalink to &quot;MessageToMessageCodec&quot;">​</a></h3><p>MessageToMessageEncoder 和 MessageToMessageDecoder 的复合体</p><br><h3 id="combinedchannelduplexhandler" tabindex="-1">CombinedChannelDuplexHandler <a class="header-anchor" href="#combinedchannelduplexhandler" aria-label="Permalink to &quot;CombinedChannelDuplexHandler&quot;">​</a></h3><p>结合解码器和编码器在一起可能会牺牲可重用性，为了避免这种情况，出现了 CombinedChannelDuplexHandler。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CombinedByteCharCodec</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CombinedChannelDuplexHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">ByteToCharDecoder</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">CharToByteEncoder</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CombinedByteCharCodec</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ByteToCharDecoder</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CharToByteEncoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CombinedByteCharCodec</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CombinedChannelDuplexHandler</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">ByteToCharDecoder</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">CharToByteEncoder</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CombinedByteCharCodec</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteToCharDecoder</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CharToByteEncoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h2 id="tcp-粘包和拆包" tabindex="-1">TCP 粘包和拆包 <a class="header-anchor" href="#tcp-粘包和拆包" aria-label="Permalink to &quot;TCP 粘包和拆包&quot;">​</a></h2><blockquote><p><a href="https://dongzl.github.io/netty-handbook/#/_content/chapter09?id=%E7%AC%AC-9-%E7%AB%A0-tcp-%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noreferrer">TCP 粘包和拆包及解决方案</a></p></blockquote><br><h2 id="使用-ssl-tls-加密" tabindex="-1">使用 SSL/TLS 加密 <a class="header-anchor" href="#使用-ssl-tls-加密" aria-label="Permalink to &quot;使用 SSL/TLS 加密&quot;">​</a></h2><blockquote><p><a href="https://waylau.com/essential-netty-in-action/CORE%20FUNCTIONS/Securing%20Netty%20applications%20with%20SSLTLS.html" target="_blank" rel="noreferrer">使用 SSL/TLS 加密</a></p></blockquote><br><h2 id="rpc-调用实现" tabindex="-1">RPC 调用实现 <a class="header-anchor" href="#rpc-调用实现" aria-label="Permalink to &quot;RPC 调用实现&quot;">​</a></h2><blockquote><p><a href="https://dongzl.github.io/netty-handbook/#/_content/chapter11" target="_blank" rel="noreferrer">RPC 调用实现</a></p></blockquote><br><h2 id="源码解析" tabindex="-1">源码解析 <a class="header-anchor" href="#源码解析" aria-label="Permalink to &quot;源码解析&quot;">​</a></h2><h3 id="服务端启动流程" tabindex="-1">服务端启动流程 <a class="header-anchor" href="#服务端启动流程" aria-label="Permalink to &quot;服务端启动流程&quot;">​</a></h3><p>下面是一段 Netty 服务端实例化并启动的流程</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">NioEventLoopGroup boss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">NioEventLoopGroup worker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServerBootstrap server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerBootstrap</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(boss, worker)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">childHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">SocketChannel</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoServerChannelHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            })</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.SO_BACKLOG, </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">childOption</span><span style="color:#E1E4E8;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// start</span></span>
<span class="line"><span style="color:#E1E4E8;">    ChannelFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(port).</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;server started, listen on port &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> port);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对关闭 Channel 进行监听</span></span>
<span class="line"><span style="color:#E1E4E8;">    future.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">closeFuture</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 阻塞直到 future 关闭</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    boss.</span><span style="color:#B392F0;">shutdownGracefully</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    worker.</span><span style="color:#B392F0;">shutdownGracefully</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">NioEventLoopGroup boss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">NioEventLoopGroup worker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ServerBootstrap server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrap</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(boss, worker)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                    ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoServerChannelHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.SO_BACKLOG, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">childOption</span><span style="color:#24292E;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// start</span></span>
<span class="line"><span style="color:#24292E;">    ChannelFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(port).</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;server started, listen on port &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> port);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对关闭 Channel 进行监听</span></span>
<span class="line"><span style="color:#24292E;">    future.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">closeFuture</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 阻塞直到 future 关闭</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    boss.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    worker.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h4 id="serverbootstrap-1" tabindex="-1">ServerBootstrap <a class="header-anchor" href="#serverbootstrap-1" aria-label="Permalink to &quot;ServerBootstrap&quot;">​</a></h4><p>先来回顾 Java NIO</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// open channel</span></span>
<span class="line"><span style="color:#E1E4E8;">ServerSocketChannel socketChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServerSocketChannel.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// set non-block</span></span>
<span class="line"><span style="color:#E1E4E8;">socketChannel.</span><span style="color:#B392F0;">configureBlocking</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// open Selector</span></span>
<span class="line"><span style="color:#E1E4E8;">Selector selector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Selector.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// register channel</span></span>
<span class="line"><span style="color:#E1E4E8;">SelectionKey selectionKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> socketChannel.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(selector, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, socketChannel);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置感兴趣的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">selectionKey.</span><span style="color:#B392F0;">interestOps</span><span style="color:#E1E4E8;">(SelectionKey.OP_ACCEPT);</span></span>
<span class="line"><span style="color:#E1E4E8;">socketChannel.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InetSocketAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8888</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// open channel</span></span>
<span class="line"><span style="color:#24292E;">ServerSocketChannel socketChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServerSocketChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// set non-block</span></span>
<span class="line"><span style="color:#24292E;">socketChannel.</span><span style="color:#6F42C1;">configureBlocking</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// open Selector</span></span>
<span class="line"><span style="color:#24292E;">Selector selector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Selector.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// register channel</span></span>
<span class="line"><span style="color:#24292E;">SelectionKey selectionKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socketChannel.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(selector, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, socketChannel);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置感兴趣的事件</span></span>
<span class="line"><span style="color:#24292E;">selectionKey.</span><span style="color:#6F42C1;">interestOps</span><span style="color:#24292E;">(SelectionKey.OP_ACCEPT);</span></span>
<span class="line"><span style="color:#24292E;">socketChannel.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8888</span><span style="color:#24292E;">));</span></span></code></pre></div><p>需要手动打开 Channel，打开 Selector，再将 Channel 注册到 Selector 上。</p><br><p>先说结论：Bootstrap 就是帮助我们打开 Channel，并绑定端口的<em>启动类</em>或者说<em>辅助类</em>。</p><blockquote><p>Bootstrap sub-class which allows easy bootstrap of ServerChannel</p></blockquote><p>翻译过来就是：ServerBootstrap 是 Bootstrap 的子类，开启一个 ServerChannel。</p><p>ServerBootstrap 有一个父类 AbstractBootstrap</p><blockquote><p>AbstractBootstrap is a helper class that makes it easy to bootstrap a Channel</p></blockquote><p>AbstractBootstrap 是一个辅助类，用来开启一个 Channel。并提供一个 bind 方法用来绑定指定的端口进行 TCP/UDP 传输。</p><br><p><strong>ServerBootstrap 如何帮助我们打开 Channel？</strong></p><p>回顾一下上面的代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ServerBootstrap server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerBootstrap</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(boss, worker) </span><span style="color:#6A737D;">// [1]</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(NioServerSocketChannel.class) </span><span style="color:#6A737D;">// [2]</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">childHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">SocketChannel</span><span style="color:#E1E4E8;">&gt;() { </span><span style="color:#6A737D;">// [3]</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EchoServerChannelHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.SO_BACKLOG, </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">childOption</span><span style="color:#E1E4E8;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// start</span></span>
<span class="line"><span style="color:#E1E4E8;">ChannelFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(port).</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ServerBootstrap server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrap</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(boss, worker) </span><span style="color:#6A737D;">// [1]</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioServerSocketChannel.class) </span><span style="color:#6A737D;">// [2]</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() { </span><span style="color:#6A737D;">// [3]</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EchoServerChannelHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.SO_BACKLOG, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">childOption</span><span style="color:#24292E;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// start</span></span>
<span class="line"><span style="color:#24292E;">ChannelFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(port).</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span></code></pre></div><p>在第 [2] 行代码中，AbstractBootstrap#channel 方法需要我们传入一个 Channel 工厂类，再利用 Java 的反射来创建 Channel。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// channelClass: The Class which is used to create Channel instances from</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> B </span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends C</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> channelClass) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ReflectiveChannelFactory&lt;</span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">            ObjectUtil.</span><span style="color:#B392F0;">checkNotNull</span><span style="color:#E1E4E8;">(channelClass, </span><span style="color:#9ECBFF;">&quot;channelClass&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// channelClass: The Class which is used to create Channel instances from</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> B </span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends C</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> channelClass) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelFactory</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ReflectiveChannelFactory&lt;</span><span style="color:#D73A49;">C</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">            ObjectUtil.</span><span style="color:#6F42C1;">checkNotNull</span><span style="color:#24292E;">(channelClass, </span><span style="color:#032F62;">&quot;channelClass&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReflectiveChannelFactory</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> clazz) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.constructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">getConstructor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectiveChannelFactory</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> clazz) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的代码中可以看到，ReflectiveChannelFactory 利用反射调用 NioServerSocketChannel 的无参构造器来创建 NioServerSocketChannel 实例。<strong>到这里我们服务端需要的 Channel 就创建完毕了。</strong></p><br><p>回顾 Java NIO，在开启了一个 Channel 之后，我们需要手动的把它注册到 Selector 中，在 Netty 中这一个步骤如何进行？<strong>创建了 Channel 之后，该如何注册到 Selector 中？</strong></p><p>让我们把目光转移到标号 [1] 这一行代码，接下来就到 NioEventLoopGroup 出场了。</p><br><h4 id="nioeventloopgroup" tabindex="-1">NioEventLoopGroup <a class="header-anchor" href="#nioeventloopgroup" aria-label="Permalink to &quot;NioEventLoopGroup&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Debug 的时候注意一下这两个 NioEventLoopGroup，</span></span>
<span class="line"><span style="color:#6A737D;">// 后面可以用来和 AbstractBootstrap#initAndRegister 中的 config().group() 进行比较</span></span>
<span class="line"><span style="color:#E1E4E8;">NioEventLoopGroup boss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">NioEventLoopGroup worker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Debug 的时候注意一下这两个 NioEventLoopGroup，</span></span>
<span class="line"><span style="color:#6A737D;">// 后面可以用来和 AbstractBootstrap#initAndRegister 中的 config().group() 进行比较</span></span>
<span class="line"><span style="color:#24292E;">NioEventLoopGroup boss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">NioEventLoopGroup worker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上面两句代码中，分别创建了 boss 组和 worker 组，为什么要创建两个组呢？这是后话。我们使用 NioEventLoopGroup 的无参构造器来创建实例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create a new instance using the default number of threads, the default ThreadFactory and the SelectorProvider which is returned by SelectorProvider.provider().</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">() { </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create a new instance using the default number of threads, the default ThreadFactory and the SelectorProvider which is returned by SelectorProvider.provider().</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">() { </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); }</span></span></code></pre></div><p>如果使用无参构造器，创建的 EventLoopGroup 使用的线程默认为 <code>CUP 核心数 * 2</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DEFAULT_EVENT_LOOP_THREADS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, SystemPropertyUtil.getInt</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;io.netty.eventLoopThreads&quot;</span><span style="color:#E1E4E8;">, NettyRuntime.</span><span style="color:#B392F0;">availableProcessors</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DEFAULT_EVENT_LOOP_THREADS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, SystemPropertyUtil.getInt</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;io.netty.eventLoopThreads&quot;</span><span style="color:#24292E;">, NettyRuntime.</span><span style="color:#6F42C1;">availableProcessors</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre></div><br><p><strong>还记得 Java NIO 中的内容吗？</strong></p><blockquote><p><em>Selector#open 方法会使用系统默认的 SelectorProvider 创建一个 Selector；也可以使用自定义的 SelectorProvider 来创建 Selector。</em></p></blockquote><p>在 Netty 中，也是使用 SelectorProvider 来创建 Selector</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NioEventLoopGroup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nThreads, Executor executor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">(nThreads, executor, SelectorProvider.</span><span style="color:#B392F0;">provider</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nThreads, Executor executor) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">(nThreads, executor, SelectorProvider.</span><span style="color:#6F42C1;">provider</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SelectorProvider#provider -&gt; provider = sun.nio.ch.DefaultSelectorProvider.create();</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> SelectorProvider </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String osname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AccessController</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">doPrivileged</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetPropertyAction</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;os.name&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (osname.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SunOS&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProvider</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sun.nio.ch.DevPollSelectorProvider&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (osname.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Linux&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProvider</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sun.nio.ch.EPollSelectorProvider&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> sun.nio.ch.</span><span style="color:#B392F0;">PollSelectorProvider</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SelectorProvider#provider -&gt; provider = sun.nio.ch.DefaultSelectorProvider.create();</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> SelectorProvider </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    String osname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AccessController</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">doPrivileged</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetPropertyAction</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;os.name&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (osname.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SunOS&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProvider</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sun.nio.ch.DevPollSelectorProvider&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (osname.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Linux&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProvider</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sun.nio.ch.EPollSelectorProvider&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> sun.nio.ch.</span><span style="color:#6F42C1;">PollSelectorProvider</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，Netty 会根据 OS 使用不同的 SelectorProvider 来创建 Selector。</p><p>**Selector 在哪里呢？**顺着下面的流程：</p><p>1、NioEventLoopGroup()</p><p>2、MultithreadEventLoopGroup(int, Executor, Object...)</p><p>3、MultithreadEventExecutorGroup(int, Executor, EventExecutorChooserFactory, Object...)</p><p>4、NioEventLoopGroup#newChild</p><p>5、NioEventLoop(NioEventLoopGroup, Executor, SelectorProvider, SelectStrategy, RejectedExecutionHandler, EventLoopTaskQueueFactory, EventLoopTaskQueueFactory)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">NioEventLoop</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/**...**/</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(parent, executor, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">newTaskQueue</span><span style="color:#E1E4E8;">(taskQueueFactory), </span><span style="color:#B392F0;">newTaskQueue</span><span style="color:#E1E4E8;">(tailTaskQueueFactory),</span></span>
<span class="line"><span style="color:#E1E4E8;">            rejectedExecutionHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.provider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ObjectUtil.</span><span style="color:#B392F0;">checkNotNull</span><span style="color:#E1E4E8;">(selectorProvider, </span><span style="color:#9ECBFF;">&quot;selectorProvider&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 设置 SelectorProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.selectStrategy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ObjectUtil.</span><span style="color:#B392F0;">checkNotNull</span><span style="color:#E1E4E8;">(strategy, </span><span style="color:#9ECBFF;">&quot;selectStrategy&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// IO 就绪事件轮询的策略</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// SelectorTuple 包含：unwrappedSelector 和 selector</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SelectorTuple selectorTuple </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">openSelector</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.selector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selectorTuple.selector;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.unwrappedSelector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selectorTuple.unwrappedSelector;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">NioEventLoop</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/**...**/</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(parent, executor, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">newTaskQueue</span><span style="color:#24292E;">(taskQueueFactory), </span><span style="color:#6F42C1;">newTaskQueue</span><span style="color:#24292E;">(tailTaskQueueFactory),</span></span>
<span class="line"><span style="color:#24292E;">            rejectedExecutionHandler);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.provider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ObjectUtil.</span><span style="color:#6F42C1;">checkNotNull</span><span style="color:#24292E;">(selectorProvider, </span><span style="color:#032F62;">&quot;selectorProvider&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 设置 SelectorProvider</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.selectStrategy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ObjectUtil.</span><span style="color:#6F42C1;">checkNotNull</span><span style="color:#24292E;">(strategy, </span><span style="color:#032F62;">&quot;selectStrategy&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// IO 就绪事件轮询的策略</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// SelectorTuple 包含：unwrappedSelector 和 selector</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SelectorTuple selectorTuple </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">openSelector</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.selector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selectorTuple.selector;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.unwrappedSelector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selectorTuple.unwrappedSelector;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在恍然大悟，原来一直没出现的 Selector 角色被 Netty ”藏“在了 EventLoop 中。由此我们也可以确定，Channel 是注册到 EventLoop 所管理的 Selector 中的。</p><br><p>到这里，Channel 开启了，Selector 有了，那<strong>何时注册 Channel？</strong></p><p>还记得 AbstractBootstrap 吗？它是 ServerBootstrap 的父类，初始化并注册 Channel 的操作就是在 AbstractBootstrap#doBind 方法中进行的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ChannelFuture </span><span style="color:#B392F0;">doBind</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SocketAddress localAddress) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// initAndRegister 初始化 Channel 并注册到 Selector 中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ChannelFuture regFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initAndRegister</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Channel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> regFuture.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ChannelFuture </span><span style="color:#6F42C1;">doBind</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SocketAddress localAddress) {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// initAndRegister 初始化 Channel 并注册到 Selector 中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ChannelFuture regFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initAndRegister</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> regFuture.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ChannelFuture </span><span style="color:#B392F0;">initAndRegister</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Channel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 反射拿到 Channel，同时创建 ChannelPipeline</span></span>
<span class="line"><span style="color:#E1E4E8;">    channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channelFactory.</span><span style="color:#B392F0;">newChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 初始化 Channel，设置 ChannelOption、设置 ChannelPipeline</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(channel); </span><span style="color:#6A737D;">// 这里有个细节，后续再聊</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 将 Channel 注册到 EventGroup 中</span></span>
<span class="line"><span style="color:#E1E4E8;">    ChannelFuture regFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(channel);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ChannelFuture </span><span style="color:#6F42C1;">initAndRegister</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 反射拿到 Channel，同时创建 ChannelPipeline</span></span>
<span class="line"><span style="color:#24292E;">    channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channelFactory.</span><span style="color:#6F42C1;">newChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 初始化 Channel，设置 ChannelOption、设置 ChannelPipeline</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(channel); </span><span style="color:#6A737D;">// 这里有个细节，后续再聊</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 将 Channel 注册到 EventGroup 中</span></span>
<span class="line"><span style="color:#24292E;">    ChannelFuture regFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(channel);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 AbstractBootstrap#initAndRegister 代码中可以看出，它主要负责创建和初始化 Channel。这里的 <code>init(channel)</code> 这句代码在后续会聊到。看到最后 <code>group().register(channel)</code> 这一句代码：将 Channel 注册到 EventLoopGroup 中。</p><br><p>顺着代码调用流程来观察一下，<strong>看一下 Channel 注册的细节</strong>：</p><p>1、AbstractBootstrap#doBind</p><p>2、AbstractBootstrap#initAndRegister 第一次执行 group() 方法拿到的是 AbstractBootstrap#group，即我们之前创建的 boss</p><p>3、MultithreadEventLoopGroup#register</p><p>4、SingleThreadEventLoop#register(Channel)</p><p>5、SingleThreadEventLoop#register(Channel, EventExecutor)，将 Channel 包装成 ChannelPromise，传入的 EventExecutor 参数是 SingleThreadEventLoop</p><p>6、SingleThreadEventLoop#register(ChannelPromise)</p><p>7、AbstractChannel.AbstractUnsafe#register 检查当前线程在不在当前 EventLoop 中</p><p>8、AbstractChannel.AbstractUnsafe#register0</p><p>9、AbstractNioChannel#doRegister</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRegister</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> selected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// javaChannel() 表示之前创建的 NioServerSocketChannel，具体看 NioServerSocketChannel#NioServerSocketChannel(ServerSocketChannel)</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// eventLoop() 返回 AbstractBootstrap#group，即 bossGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 将 Channel 注册到 bossGroup 中</span></span>
<span class="line"><span style="color:#E1E4E8;">        selectionKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">javaChannel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">eventLoop</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">unwrappedSelector</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRegister</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> selected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// javaChannel() 表示之前创建的 NioServerSocketChannel，具体看 NioServerSocketChannel#NioServerSocketChannel(ServerSocketChannel)</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// eventLoop() 返回 AbstractBootstrap#group，即 bossGroup</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 将 Channel 注册到 bossGroup 中</span></span>
<span class="line"><span style="color:#24292E;">        selectionKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">javaChannel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">eventLoop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">unwrappedSelector</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>10、AbstractSelectableChannel#register</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ops 表示感兴趣的事件</span></span>
<span class="line"><span style="color:#6A737D;">// att 表示即将注册到当前 Selector 的 Channel</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SelectionKey </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(Selector sel, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ops,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                   Object att)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws ClosedChannelException</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (regLock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 异常判断...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isOpen</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClosedChannelException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((ops </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#B392F0;">validOps</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isBlocking</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalBlockingModeException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">        SelectionKey k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findKey</span><span style="color:#E1E4E8;">(sel);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            k.</span><span style="color:#B392F0;">interestOps</span><span style="color:#E1E4E8;">(ops);</span></span>
<span class="line"><span style="color:#E1E4E8;">            k.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(att);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// New registration</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (keyLock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isOpen</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClosedChannelException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((AbstractSelector)sel).</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, ops, att);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">addKey</span><span style="color:#E1E4E8;">(k); </span><span style="color:#6A737D;">// SelectionKey 集合</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> k;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ops 表示感兴趣的事件</span></span>
<span class="line"><span style="color:#6A737D;">// att 表示即将注册到当前 Selector 的 Channel</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SelectionKey </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(Selector sel, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ops,</span></span>
<span class="line"><span style="color:#24292E;">                                   Object att)</span></span>
<span class="line"><span style="color:#24292E;">    throws ClosedChannelException</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (regLock) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 异常判断...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isOpen</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClosedChannelException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((ops </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">validOps</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isBlocking</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalBlockingModeException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">        SelectionKey k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findKey</span><span style="color:#24292E;">(sel);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            k.</span><span style="color:#6F42C1;">interestOps</span><span style="color:#24292E;">(ops);</span></span>
<span class="line"><span style="color:#24292E;">            k.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(att);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// New registration</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (keyLock) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isOpen</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClosedChannelException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((AbstractSelector)sel).</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, ops, att);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">addKey</span><span style="color:#24292E;">(k); </span><span style="color:#6A737D;">// SelectionKey 集合</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> k;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的代码中，SelectionKey 出现了。回想一下 Java NIO，将 SelectableChannel 注册到 Selector 后由 SelectionKey 集合来表示。</p><p><strong>到这里就表示服务端自身的 Channel 注册完成了，是注册到 bossGroup 关联的 EventLoop 中的 Selector 的。</strong></p><br><p>好，现在可以回到我们上面的问题：<strong>为什么要创建 boss 和 worker 两个组呢？它们是如何工作的？</strong></p><p>先给出结论：</p><ul><li>bossGroup 负责：1、连接新的 Channel；2、将 Channel 注册到 workerGroup 上</li><li>workerGroup 用于处理已经建立的连接和执行具体的业务逻辑。</li></ul><br><p>但是，走完上面的流程，我们只观察到了 Channel 注册到 bossGroup 中，<strong>workerGroup 何时发挥作用？</strong></p><p>在讲到 AbstractBootstrap#initAndRegister 这个方法时，有一句代码 <code>init(channel);</code> 在这里发挥了重要作用。看到 ServerBootstrap#init</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(Channel channel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 设置 ChannelOption</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setChannelOptions</span><span style="color:#E1E4E8;">(channel, </span><span style="color:#B392F0;">newOptionsArray</span><span style="color:#E1E4E8;">(), logger);</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 设置 Channel 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setAttributes</span><span style="color:#E1E4E8;">(channel, </span><span style="color:#B392F0;">newAttributesArray</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 获取 ChannelPipeline</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 在创建 Channel 的时候也会同步创建 ChannelPipeline</span></span>
<span class="line"><span style="color:#E1E4E8;">    ChannelPipeline p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 主角 workerGroup 来了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventLoopGroup currentChildGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childGroup;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ChannelHandler currentChildHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childHandler;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Entry&lt;ChannelOption&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;[] currentChildOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newOptionsArray</span><span style="color:#E1E4E8;">(childOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Entry&lt;AttributeKey&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;[] currentChildAttrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newAttributesArray</span><span style="color:#E1E4E8;">(childAttrs);</span></span>
<span class="line"><span style="color:#E1E4E8;">    p.</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">Channel</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Channel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ChannelPipeline pipeline </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            ChannelHandler handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handler </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                pipeline.</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            ch.</span><span style="color:#B392F0;">eventLoop</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  	</span><span style="color:#6A737D;">// ServerBootstrapAcceptor 是关键</span></span>
<span class="line"><span style="color:#E1E4E8;">                    pipeline.</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerBootstrapAcceptor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(Channel channel) {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 设置 ChannelOption</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setChannelOptions</span><span style="color:#24292E;">(channel, </span><span style="color:#6F42C1;">newOptionsArray</span><span style="color:#24292E;">(), logger);</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 设置 Channel 属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setAttributes</span><span style="color:#24292E;">(channel, </span><span style="color:#6F42C1;">newAttributesArray</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 获取 ChannelPipeline</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 在创建 Channel 的时候也会同步创建 ChannelPipeline</span></span>
<span class="line"><span style="color:#24292E;">    ChannelPipeline p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 主角 workerGroup 来了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventLoopGroup currentChildGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childGroup;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ChannelHandler currentChildHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childHandler;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Entry&lt;ChannelOption&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;[] currentChildOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newOptionsArray</span><span style="color:#24292E;">(childOptions);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Entry&lt;AttributeKey&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;[] currentChildAttrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newAttributesArray</span><span style="color:#24292E;">(childAttrs);</span></span>
<span class="line"><span style="color:#24292E;">    p.</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">Channel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Channel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ChannelPipeline pipeline </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            ChannelHandler handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handler </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                pipeline.</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(handler);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            ch.</span><span style="color:#6F42C1;">eventLoop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                  	</span><span style="color:#6A737D;">// ServerBootstrapAcceptor 是关键</span></span>
<span class="line"><span style="color:#24292E;">                    pipeline.</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrapAcceptor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h4 id="serverbootstrapacceptor" tabindex="-1">ServerBootstrapAcceptor <a class="header-anchor" href="#serverbootstrapacceptor" aria-label="Permalink to &quot;ServerBootstrapAcceptor&quot;">​</a></h4><p>ServerBootstrapAcceptor 本质是一个 ChannelInboundHandlerAdapter，我们关心的问题就在 ServerBootstrapAcceptor#channelRead 方法中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerBootstrapAcceptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelInboundHandlerAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventLoopGroup childGroup;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ChannelHandler childHandler;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Entry&lt;ChannelOption&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;[] childOptions;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Entry&lt;AttributeKey&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;[] childAttrs;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Runnable enableAutoReadTask;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ServerBootstrapAcceptor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Channel </span><span style="color:#FFAB70;">channel</span><span style="color:#E1E4E8;">, EventLoopGroup </span><span style="color:#FFAB70;">childGroup</span><span style="color:#E1E4E8;">, ChannelHandler </span><span style="color:#FFAB70;">childHandler</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Entry&lt;ChannelOption&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;[] </span><span style="color:#FFAB70;">childOptions</span><span style="color:#E1E4E8;">, Entry&lt;AttributeKey&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;[] </span><span style="color:#FFAB70;">childAttrs</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.childGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childGroup;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.childHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childHandler;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.childOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childOptions;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.childAttrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childAttrs;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Task which is scheduled to re-enable auto-read.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// It&#39;s important to create this Runnable before we try to submit it as otherwise the URLClassLoader may</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// not be able to load the class because of the file limit it already reached.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// See https://github.com/netty/netty/issues/1328</span></span>
<span class="line"><span style="color:#E1E4E8;">        enableAutoReadTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                channel.</span><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setAutoRead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelRead</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Channel child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Channel) msg;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        child.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(childHandler);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setChannelOptions</span><span style="color:#E1E4E8;">(child, childOptions, logger);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setAttributes</span><span style="color:#E1E4E8;">(child, childAttrs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          	</span><span style="color:#6A737D;">// 将 Channel 添加到 childGroup，也就是 workGroup 中</span></span>
<span class="line"><span style="color:#E1E4E8;">            childGroup.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(child).</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelFutureListener</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">operationComplete</span><span style="color:#E1E4E8;">(ChannelFuture </span><span style="color:#FFAB70;">future</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">future.</span><span style="color:#B392F0;">isSuccess</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">forceClose</span><span style="color:#E1E4E8;">(child, future.</span><span style="color:#B392F0;">cause</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">forceClose</span><span style="color:#E1E4E8;">(child, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrapAcceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelInboundHandlerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventLoopGroup childGroup;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ChannelHandler childHandler;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Entry&lt;ChannelOption&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;[] childOptions;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Entry&lt;AttributeKey&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;[] childAttrs;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Runnable enableAutoReadTask;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ServerBootstrapAcceptor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Channel </span><span style="color:#E36209;">channel</span><span style="color:#24292E;">, EventLoopGroup </span><span style="color:#E36209;">childGroup</span><span style="color:#24292E;">, ChannelHandler </span><span style="color:#E36209;">childHandler</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            Entry&lt;ChannelOption&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;[] </span><span style="color:#E36209;">childOptions</span><span style="color:#24292E;">, Entry&lt;AttributeKey&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;[] </span><span style="color:#E36209;">childAttrs</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.childGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childGroup;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.childHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childHandler;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.childOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childOptions;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.childAttrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childAttrs;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Task which is scheduled to re-enable auto-read.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// It&#39;s important to create this Runnable before we try to submit it as otherwise the URLClassLoader may</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// not be able to load the class because of the file limit it already reached.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// See https://github.com/netty/netty/issues/1328</span></span>
<span class="line"><span style="color:#24292E;">        enableAutoReadTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                channel.</span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setAutoRead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Channel child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Channel) msg;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        child.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(childHandler);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setChannelOptions</span><span style="color:#24292E;">(child, childOptions, logger);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setAttributes</span><span style="color:#24292E;">(child, childAttrs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          	</span><span style="color:#6A737D;">// 将 Channel 添加到 childGroup，也就是 workGroup 中</span></span>
<span class="line"><span style="color:#24292E;">            childGroup.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(child).</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelFutureListener</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operationComplete</span><span style="color:#24292E;">(ChannelFuture </span><span style="color:#E36209;">future</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">future.</span><span style="color:#6F42C1;">isSuccess</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">forceClose</span><span style="color:#24292E;">(child, future.</span><span style="color:#6F42C1;">cause</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">forceClose</span><span style="color:#24292E;">(child, t);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><p>接下来看一下 ServerBootstrap#childHandler，也就是上边的标号 [3] 这一行。</p><br><h4 id="channelhandler-1" tabindex="-1">ChannelHandler <a class="header-anchor" href="#channelhandler-1" aria-label="Permalink to &quot;ChannelHandler&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Set the ChannelHandler which is used to serve the request for the Channel&#39;s.</span></span>
<span class="line"><span style="color:#6A737D;">// 设置一个 ChannelHandler，即设置服务器中用来处理请求的 Channel</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ServerBootstrap </span><span style="color:#B392F0;">childHandler</span><span style="color:#E1E4E8;">(ChannelHandler childHandler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.childHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ObjectUtil.</span><span style="color:#B392F0;">checkNotNull</span><span style="color:#E1E4E8;">(childHandler, </span><span style="color:#9ECBFF;">&quot;childHandler&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Set the ChannelHandler which is used to serve the request for the Channel&#39;s.</span></span>
<span class="line"><span style="color:#6A737D;">// 设置一个 ChannelHandler，即设置服务器中用来处理请求的 Channel</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ServerBootstrap </span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(ChannelHandler childHandler) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.childHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ObjectUtil.</span><span style="color:#6F42C1;">checkNotNull</span><span style="color:#24292E;">(childHandler, </span><span style="color:#032F62;">&quot;childHandler&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在设置 ChannelHandler 的时候，我们传入了一个匿名内部类 ChannelInitializer，它是 ChannelInboundHandler 的子类，使用它<strong>能让我们更方便的来处理注册到 EventLoop 中的 Channel</strong>。</p><p>从这里我们可以知道 ChannelInitializer 是客户端 Channel 注册到 EventLoop 过程中的一个关键类，注意看 ChannelInitializer#initChannel</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(ChannelHandlerContext ctx) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (initMap.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(ctx)) { </span><span style="color:#6A737D;">// Guard against re-entrance.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          	</span><span style="color:#6A737D;">// 初始化 Channel，执行的是 .childHandler() 方法中的 initChannel()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">((C) ctx.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">cause</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">isRemoved</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                ctx.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(ChannelHandlerContext ctx) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (initMap.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(ctx)) { </span><span style="color:#6A737D;">// Guard against re-entrance.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          	</span><span style="color:#6A737D;">// 初始化 Channel，执行的是 .childHandler() 方法中的 initChannel()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">((C) ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">cause</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">isRemoved</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                ctx.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><blockquote><p>客户端的启动流程跟服务端类似，就不再重复了。</p></blockquote><br><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><h3 id="redis-客户端" tabindex="-1">Redis 客户端 <a class="header-anchor" href="#redis-客户端" aria-label="Permalink to &quot;Redis 客户端&quot;">​</a></h3><p>创建了客户端之后添加好对应的编解码器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel ch) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RedisDecoder</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RedisEncoder</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RedisBulkStringAggregator</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RedisArrayAggregator</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GreenisChannelHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel ch) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisDecoder</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisEncoder</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisBulkStringAggregator</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisArrayAggregator</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GreenisChannelHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，Redis 消息相关的编解码器 Netty 内部已经有实现了，接下来只要自定义处理好消息发送与接收即可：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GreenisChannelHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelDuplexHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发送 redis 命令</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, ChannelPromise </span><span style="color:#FFAB70;">promise</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] cmds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((String) msg).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s+&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">RedisMessage</span><span style="color:#E1E4E8;">&gt; messages </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(cmds.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String cmd </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cmds) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            FullBulkStringRedisMessage redisMessage </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FullBulkStringRedisMessage</span><span style="color:#E1E4E8;">(ByteBufUtil.</span><span style="color:#B392F0;">writeUtf8</span><span style="color:#E1E4E8;">(ctx.</span><span style="color:#B392F0;">alloc</span><span style="color:#E1E4E8;">(), cmd));</span></span>
<span class="line"><span style="color:#E1E4E8;">            messages.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(redisMessage);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayRedisMessage requestMessages </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayRedisMessage</span><span style="color:#E1E4E8;">(messages);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ctx.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(requestMessages, promise);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 接收 redis 响应</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelRead</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RedisMessage message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (RedisMessage) msg;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printResponse</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ReferenceCountUtil.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printResponse</span><span style="color:#E1E4E8;">(RedisMessage </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SimpleStringRedisMessage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((SimpleStringRedisMessage) message).</span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(content);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> IntegerRedisMessage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((IntegerRedisMessage) message).</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> FullBulkStringRedisMessage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ByteBuf content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((FullBulkStringRedisMessage) message).</span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(content.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ArrayRedisMessage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">RedisMessage</span><span style="color:#E1E4E8;">&gt; children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((ArrayRedisMessage) message).</span><span style="color:#B392F0;">children</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (RedisMessage child </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> children) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">printResponse</span><span style="color:#E1E4E8;">(child);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ErrorRedisMessage) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((ErrorRedisMessage) message).</span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(content);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unknown message type &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> message);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GreenisChannelHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelDuplexHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发送 redis 命令</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, ChannelPromise </span><span style="color:#E36209;">promise</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] cmds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((String) msg).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s+&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">RedisMessage</span><span style="color:#24292E;">&gt; messages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(cmds.length);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String cmd </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cmds) {</span></span>
<span class="line"><span style="color:#24292E;">            FullBulkStringRedisMessage redisMessage </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FullBulkStringRedisMessage</span><span style="color:#24292E;">(ByteBufUtil.</span><span style="color:#6F42C1;">writeUtf8</span><span style="color:#24292E;">(ctx.</span><span style="color:#6F42C1;">alloc</span><span style="color:#24292E;">(), cmd));</span></span>
<span class="line"><span style="color:#24292E;">            messages.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(redisMessage);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ArrayRedisMessage requestMessages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayRedisMessage</span><span style="color:#24292E;">(messages);</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(requestMessages, promise);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 接收 redis 响应</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        RedisMessage message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (RedisMessage) msg;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printResponse</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ReferenceCountUtil.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printResponse</span><span style="color:#24292E;">(RedisMessage </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SimpleStringRedisMessage) {</span></span>
<span class="line"><span style="color:#24292E;">            String content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((SimpleStringRedisMessage) message).</span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> IntegerRedisMessage) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((IntegerRedisMessage) message).</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> FullBulkStringRedisMessage) {</span></span>
<span class="line"><span style="color:#24292E;">            ByteBuf content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((FullBulkStringRedisMessage) message).</span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(content.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ArrayRedisMessage) {</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">RedisMessage</span><span style="color:#24292E;">&gt; children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((ArrayRedisMessage) message).</span><span style="color:#6F42C1;">children</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (RedisMessage child </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> children) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">printResponse</span><span style="color:#24292E;">(child);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ErrorRedisMessage) {</span></span>
<span class="line"><span style="color:#24292E;">            String content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((ErrorRedisMessage) message).</span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unknown message type &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h3 id="代理服务器" tabindex="-1">代理服务器 <a class="header-anchor" href="#代理服务器" aria-label="Permalink to &quot;代理服务器&quot;">​</a></h3><p>原理如下图</p><p><img src="`+o+'" alt="image-20230623163413683"></p><br><h3 id="内网穿透" tabindex="-1">内网穿透 <a class="header-anchor" href="#内网穿透" aria-label="Permalink to &quot;内网穿透&quot;">​</a></h3><blockquote><p>在 <a href="https://github.com/wandererex/wormhole" target="_blank" rel="noreferrer">GitHub</a> 看到一个使用 Netty 实现内网穿透的工具，使用 Java 实现，学习一下。</p></blockquote><p>比如，将 127.0.0.1:3307 代理到 127.0.0.1:3306。<strong>如何实现呢？</strong></p><p>需要三个角色相互配合起作用：客户端服务、代理服务、目标服务。以 MySQL 连接为例：客户端服务连接到代理服务:3307，代理服务会将客户端的请求转发到目标服务:3306。因为代理服务依赖于目标服务，所以它们的启动顺序是：先启动目标服务，再启动代理服务，然后使用客户端连接到代理服务。</p><p>利用 Netty 来启动服务是很容易的，难点在数据帧的设计和 ChannelHandler 处理数据的逻辑上。先创建目标服务</p><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://waylau.com/netty-4-user-guide" target="_blank" rel="noreferrer">https://waylau.com/netty-4-user-guide</a></p><p><a href="https://waylau.com/essential-netty-in-action" target="_blank" rel="noreferrer">https://waylau.com/essential-netty-in-action</a></p><p><a href="https://dongzl.github.io/netty-handbook" target="_blank" rel="noreferrer">https://dongzl.github.io/netty-handbook</a></p><p><a href="https://mp.weixin.qq.com/s/zAh1yD5IfwuoYdrZ1tGf5Q" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/zAh1yD5IfwuoYdrZ1tGf5Q</a></p><p><a href="https://mp.weixin.qq.com/s/IuIsUtpiye13L8ZyHWvzXA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/IuIsUtpiye13L8ZyHWvzXA</a></p>',273),c=[t];function r(E,y,i,d,h,F){return n(),a("div",null,c)}const A=s(e,[["render",r]]);export{C as __pageData,A as default};

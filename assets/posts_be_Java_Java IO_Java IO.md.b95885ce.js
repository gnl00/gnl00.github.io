import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b41230ea.js";const d=JSON.parse('{"title":"Java IO","description":"Java 中的 IO 操作，包括 BIO 和 NIO","frontmatter":{"description":"Java 中的 IO 操作，包括 BIO 和 NIO","tag":["Java","后端"]},"headers":[],"relativePath":"posts/be/Java/Java IO/Java IO.md","filePath":"posts/be/Java/Java IO/Java IO.md","lastUpdated":1700657743000}'),p={name:"posts/be/Java/Java IO/Java IO.md"},o=l(`<h1 id="java-io" tabindex="-1">Java IO <a class="header-anchor" href="#java-io" aria-label="Permalink to &quot;Java IO&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p>Java 中的 IO 操作，包括 BIO（<em>Blocking IO</em>）和 NIO（<em>Non-Blocking IO</em>）。在处理大量数据时，BIO 往往无法满足性能要求，推荐使用 NIO。</p><p>在实际应用中，BIO 适用于连接数比较少的情况下，如数据库连接、文件上传等；而 NIO 适用于连接数较多且连接时间较短的情况下，如聊天服务器、在线游戏等。</p></blockquote><table><thead><tr><th></th><th>BIO</th><th>NIO</th></tr></thead><tbody><tr><td>读写方式</td><td>字符流/字节流</td><td>Channel</td></tr><tr><td>缓冲</td><td>读写缓冲</td><td>读写缓冲</td></tr><tr><td>连接</td><td>一连接一线程</td><td>Selector 多路复用</td></tr></tbody></table><blockquote><p><strong>IO 多路复用技术</strong></p><p>通常使用的 IO 模型包括：阻塞 IO、非阻塞 IO、IO 多路复用和异步 IO。</p><ul><li>在阻塞 IO 模型中，线程会一直等待 IO 操作完成</li><li>非阻塞 IO 模型中，线程不会等待 IO 操作完成，而是通过轮询的方式不断查询 IO 操作状态</li><li>IO 多路复用模型通过统一的系统调用，将多个 IO 事件注册到同一个地方（Channel 注册到 Selector），当有 IO 事件就绪时，就会通知线程进行处理，在同一个线程中处理多个 IO 操作。</li><li>异步 IO 技术是指 IO 操作完成后会通过操作系统发送一个信号或回调函数来通知应用程序，无需通过轮询的方式来等待操作结果</li></ul><br><p><strong>IO 多路复用技术使用到的方法</strong></p><p><em>下面这些方法都是操作系统提供的<code>系统调用方法</code></em></p><ul><li><p>select</p><p>select 函数是最早的多路复用函数之一，可监视的文件描述符（fd_set）数量有限（BitMap 结构，默认长度为 1024），实现方式是遍历整个 fd_set 集合，时间复杂度为 O(N)。select 每次调用都会把 fd_set 集合从用户态拷贝到内核态，由内核来遍历 fd_set，所以性能较低。此外，select 函数的实现方式要求用户传递 fd_set 集合，所以它存在一定的安全漏洞。</p></li><li><p>poll</p><p>poll 函数可监视的文件描述符数量不受限制。poll 函数通过链表来保存文件描述符，时间复杂度为 O(N)。poll 函数不会每次都把 fd_set 集合从用户态拷贝到内核态，只需要把链表从用户态拷贝到内核态。性能比 select 函数好。</p></li><li><p>epoll</p><p>在 select 和 poll 中，用户态每次都需要对整个 fd_set 进行轮询，才能知道有哪个 socket 的 IO 就绪了。</p><p>epoll 函数是 Linux 下的一种 IO 多路复用机制，可监视的文件描述符数量也不受限制。epoll 函数不需要将 fd_set 集合在用户和内核态中来回拷贝，并且对就绪 IO 进行了标记，不再需要对整个 fd_set 进行轮询操作，效率比 select 和 poll 高。而且 epoll 内部使用红黑树来管理 fd_set，减少遍历 fd_set 的时间复杂度，时间复杂度为 O(log N) 。</p></li></ul><br><p>fd_set 是一种数据结构，是一个集合，用于存储被监控的文件描述符（<em>file descriptor</em>）。常被用于 IO 操作，比如 IO 多路复用技术中 select/poll/epoll 都使用到了它。</p></blockquote><blockquote><p>Java 的 NIO 实现早期版本使用的是 select，从 JDK 1.5 开始采用 epoll。</p></blockquote><blockquote><p>网络 IO 模型就是围绕着使用尽可能少的线程处理更多的请求这一方向演变的。</p></blockquote><br><p><strong>零拷贝</strong></p><blockquote><p>零拷贝（Zero Copy）是指数据在不需要经过用户态和内核态之间的数据拷贝，直接在内核空间中进行数据传输的技术。主要是为了解决数据传输过程中频繁拷贝所带来的性能问题。</p><p>在传统的 IO 操作中，数据需要先从磁盘或网络中读取到内核空间，再从内核空间拷贝到用户空间，最后再通过网络传输给接收方。这种传输方式会导致数据在用户空间和内核空间之间频繁拷贝，造成额外的 CPU 开销和内存带宽消耗，影响系统的性能。而零拷贝技术则可以避免这种数据拷贝，将数据在内核空间中直接进行传输。</p><p>零拷贝技术的出现，主要是为了提升数据传输的性能。在数据传输过程中，零拷贝可以减少拷贝操作，从而减少了 CPU 的消耗和内存带宽的使用。此外，零拷贝还可以降低应用程序的内存占用，提高系统的吞吐量。</p></blockquote><blockquote><p>在 Java 中，零拷贝技术可以通过 NIO 中的 FileChannel 类实现。FileChannel 提供了 transferTo() 和 transferFrom() 方法，可以直接将数据在内核空间中进行传输，避免了数据在用户空间和内核空间之间的拷贝。同时，Java 也提供了 MappedByteBuffer 类，可以将文件直接映射到内存中，从而避免了文件在内存和磁盘之间的拷贝。</p></blockquote><br><h2 id="bio" tabindex="-1">BIO <a class="header-anchor" href="#bio" aria-label="Permalink to &quot;BIO&quot;">​</a></h2><blockquote><p>BIO 是传统的 IO 操作，它是一种同步阻塞的IO模式，即在执行输入/输出操作时，线程会被阻塞，直到操作完成。这意味着当一个线程在执行 IO 操作时，其他线程将被阻塞，直到该操作完成。</p><p>在 Java 中，BIO 是通过 InputStream 和 OutputStream 类来实现的</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (InputStream in </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file.txt&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的代码中，InputStream 类的 read 方法将被阻塞，直到它从文件中读取到数据。由于该操作是同步的，因此该线程将一直处于阻塞状态，直到该操作完成。如果有多个线程执行类似的操作，则这些线程将相互阻塞，导致应用程序的性能降低。</p></blockquote><blockquote><p>BIO 阻塞式 IO 模型，每次连接都需要单独开启线程来处理读写操作，当并发连接数比较大时，会创建大量的线程，占用大量的系统资源，容易导致系统崩溃。</p></blockquote><blockquote><p>BIO 模型中，ServerSocket 负责绑定 IP 地址，启动监听端口；Socket 负责发起连接操作。连接成功后，双方通过 InputStream 和 OutputStream 进行同步阻塞式数据传输。</p></blockquote><p>…</p><p><strong>适用场景</strong></p><ul><li>连接数少</li><li>并发度低</li></ul><hr><br><h2 id="nio" tabindex="-1">NIO <a class="header-anchor" href="#nio" aria-label="Permalink to &quot;NIO&quot;">​</a></h2><blockquote><p>NIO 是基于多路复用器的非阻塞式 IO，在执行输入/输出操作时，线程不会被阻塞，可以继续执行其他操作。这使得一个线程可以同时处理多个输入/输出操作。</p></blockquote><blockquote><p>NIO 中的核心组件有三个：Channel（通道）、Buffer（缓冲区）和 Selector（选择器）。Channel 负责传输数据，Buffer 负责存储数据，Selector 负责监听通道上的事件，并将事件分发给对应的线程进行处理。</p><p>它采用一个线程处理多个连接，即在一个线程中可以监听多个 Channel，这些 Channel 都绑定在同一个 Selector 上，当其中的一个 Channel 有事件时（如可读、可写等），Selector 就会通知对应的线程进行处理。</p></blockquote><blockquote><p>在 Java 中，NIO 是通过 Channel、Buffer、Selector 类来实现的</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (RandomAccessFile file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;r&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FileChannel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> bytesRead </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (bytesRead </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        buffer.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (buffer.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">) buffer.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        buffer.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        bytesRead </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (RandomAccessFile file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    FileChannel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (bytesRead </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (buffer.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理读取到的数据</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">) buffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理异常</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的代码中，FileChannel 的 read 方法将不会阻塞线程。使用 Buffer 类可以缓存数据，在处理数据时更加高效。NIO 允许一个线程通过一个 Channel 处理多个 IO 操作。</p></blockquote><blockquote><p>NIO 采用 <strong>Reactor 模式</strong>，一个线程可以处理多个请求，当请求来临时，只需进行事件注册，而不是像 BIO 一样开启一个线程处理一个请求。</p></blockquote><blockquote><p>Reactor 模式是一种基于事件驱动、非阻塞式 IO 的编程模式，相对于传统的阻塞式 IO，它的主要优点有</p><ol><li>高并发性：Reactor 采用异步非阻塞 IO，允许多个请求同时被处理，能够提高系统的并发能力。</li><li>高吞吐量：异步非阻塞 IO，允许一个线程处理多个请求，能够提高系统的吞吐量。</li><li>低延迟：由于异步非阻塞 IO，一个线程可以处理多个请求，避免了线程切换和上下文切换的开销，从而降低延迟。</li></ol></blockquote><blockquote><p>相比于传统的编程模式，Reactor 模式具有以下特点：</p><ol><li>事件驱动：Reactor 模式是基于事件驱动的，当有事件发生时，会通知相关的事件处理器进行处理。</li><li>非阻塞式 IO：Reactor 模式采用非阻塞式 IO，当 IO 操作无法立即完成时，线程可以继续进行其他操作，避免了线程的阻塞等待。</li><li>多路复用：Reactor 模式采用多路复用技术，允许一个线程处理多个请求。</li></ol><br><p>Reactor 模式适用于高并发请求的场景，例如高性能服务器、大型分布式系统等。在 Reactor 模式中，可以通过线程池来处理请求，进一步提高系统的并发性能。</p></blockquote><blockquote><p>NIO 模型中，ServerSocketChannel 负责绑定 IP 地址，启动监听端口；SocketChannel 负责发起连接操作。连接成功后，双方通过 Channel 进行异步非阻塞式数据传输，可以将读写事件的状态保存在 Buffer 中，当缓冲区满时，会触发读写事件。</p></blockquote><br><h3 id="buffer" tabindex="-1">Buffer <a class="header-anchor" href="#buffer" aria-label="Permalink to &quot;Buffer&quot;">​</a></h3><blockquote><p>一个用于存放特定原始类型数据的容器，还存储数据容量，数据地址，数据大小限制等。定义于 <code>java.nio</code> 包内。</p><p><strong>只读 Buffer</strong></p><p>每一个 Buffer 都是可读的，但不是每个 Buffer 都是可写的。对只读缓冲区进行写入操作会报错 ReadOnlyBufferException。</p><p><strong>线程安全</strong></p><p>缓冲区对于多个并发线程的使用是不安全的。如果一个缓冲区要被一个以上的线程使用，对缓冲区的访问应该通过适当的同步来控制。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Buffer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Buffer</span></span></code></pre></div><br><h3 id="channel" tabindex="-1">Channel <a class="header-anchor" href="#channel" aria-label="Permalink to &quot;Channel&quot;">​</a></h3><blockquote><p>NIO 数据传输的纽带（通道），定义于 <code>java.nio.channels</code> 包内。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Channel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Closeable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Channel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Closeable</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Channel 只能是开启或者关闭状态</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isOpen</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">() throws IOException;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Channel 只能是开启或者关闭状态</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isOpen</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() throws IOException;</span></span></code></pre></div><br><h3 id="selector" tabindex="-1">Selector <a class="header-anchor" href="#selector" aria-label="Permalink to &quot;Selector&quot;">​</a></h3><blockquote><p>一个 SelectableChannel 对象的多路复用器</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Selector</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Closeable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Selector</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Closeable</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Selector </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">() throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> SelectorProvider.</span><span style="color:#B392F0;">provider</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">openSelector</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isOpen</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> SelectorProvider </span><span style="color:#B392F0;">provider</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">SelectionKey</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Returns this selector&#39;s key set.</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">SelectionKey</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectedKeys</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Returns this selector&#39;s selected-key set</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectNow</span><span style="color:#E1E4E8;">() throws IOException; </span><span style="color:#6A737D;">// Selects a set of keys whose corresponding channels are ready for I/O operations.</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">() throws IOException; </span><span style="color:#6A737D;">// Selects a set of keys whose corresponding channels are ready for I/O operations</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Selector </span><span style="color:#B392F0;">wakeup</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Causes the first selection operation that has not yet returned to return immediately.</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">() throws IOException; </span><span style="color:#6A737D;">// Closes this selector.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Selector </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">() throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> SelectorProvider.</span><span style="color:#6F42C1;">provider</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">openSelector</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isOpen</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> SelectorProvider </span><span style="color:#6F42C1;">provider</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">SelectionKey</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Returns this selector&#39;s key set.</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">SelectionKey</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectedKeys</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Returns this selector&#39;s selected-key set</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectNow</span><span style="color:#24292E;">() throws IOException; </span><span style="color:#6A737D;">// Selects a set of keys whose corresponding channels are ready for I/O operations.</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">() throws IOException; </span><span style="color:#6A737D;">// Selects a set of keys whose corresponding channels are ready for I/O operations</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Selector </span><span style="color:#6F42C1;">wakeup</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Causes the first selection operation that has not yet returned to return immediately.</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() throws IOException; </span><span style="color:#6A737D;">// Closes this selector.</span></span></code></pre></div><blockquote><p>Selector#open 方法会使用系统默认的 SelectorProvider 创建一个 Selector；也可以使用自定义的 SelectorProvider 来创建 Selector。Selector 一直是 open 的，直到它被关闭。</p></blockquote><blockquote><p>将 SelectableChannel 注册到 Selector 上是通过 SelectionKey 来表示的，Selector 维护 3 个 SelectionKey 集合。</p><ul><li><em>Key Set</em>，注册到 Selector 上的 SelectionKey 集合。</li><li><em>Selected-Key Set</em>，就绪事件的 SelectionKey 集合，用于获取已经发生了就绪事件的通道，可以从中获取通道的就绪事件类型（例如读就绪、写就绪等），然后进行相应的操作。</li><li><em>Cancelled-Key Set</em>，已取消的 SelectionKey 集合，在 Selector 的操作过程中，可能会取消某些 SelectionKey，这些已取消的 SelectionKey 会被添加到当前集合中。用于清理无效的 SelectionKey 对象，释放资源并进行垃圾回收。</li></ul><p>在 Selector 刚创建的时候以上 3 个集合都是空的。对于应用程序来说，通常只需要关注 <em>Selected-Key Set</em>，通过遍历该集合来处理已就绪的通道。</p></blockquote><blockquote><p><strong>Selection 操作</strong></p><p>Selection 操作是用于检查注册在 Selector 上的通道是否有就绪事件（例如读就绪、写就绪等），并将就绪的通道的 SelectionKey 添加到已选择键集合中。</p><p>Selection 操作主要涉及以下三个步骤：</p><ol><li><strong>注册通道</strong>：首先，将一个或多个通道注册到 Selector 上，通过调用通道的 SelectableChannel#register 方法，并传入 Selector 以及感兴趣的事件类型（例如 OP_READ、OP_WRITE 等）。注册成功后，通道与 SelectionKey 建立关联，并将 SelectionKey 添加到 Selector 的键集合中。</li><li><strong>选择通道</strong>：然后，调用 Selector#select 方法进行通道的选择。在这个步骤中，Selector 会阻塞，直到至少一个注册的通道就绪或超时时间到达。select() 方法返回的是就绪事件的数量。</li><li><strong>处理就绪通道</strong>：一旦 select() 方法返回大于 0 的就绪事件数量，就表示有通道就绪。此时，可以通过调用 Selector#selectedKeys 方法获取已选择键集合，遍历其中的 SelectionKey，获取每个就绪通道的就绪事件类型，并进行相应的处理。处理完毕后，需要手动从已选择键集合中移除已处理的 SelectionKey，以确保下次循环时不会再次处理已就绪的通道。</li></ol></blockquote><blockquote><p><strong>并发支持</strong></p><p>Selector 本身是线程安全的，但是它维护的 SelectionKey 集合却不是。Selection 操作会在 Selector 本身，以及 <em>Key Set</em> 和 <em>Selected-Key Set</em> 上同时进行。在对 SelectionKey 集合上进行操作的时候需要注意维护相应的同步机制，避免出现线程安全问题。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SelectorImpl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">SelectionKey</span><span style="color:#E1E4E8;">&gt; selectedKeys;</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">SelectionKey</span><span style="color:#E1E4E8;">&gt; publicSelectedKeys; </span><span style="color:#6A737D;">// Removal allowed, but not addition</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SelectorImpl</span><span style="color:#E1E4E8;">(SelectorProvider sp) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// selectedKeys 实际上就是 HashSet，多线程操作下线程不安全</span></span>
<span class="line"><span style="color:#E1E4E8;">    selectedKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    publicSelectedKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Util.</span><span style="color:#B392F0;">ungrowableSet</span><span style="color:#E1E4E8;">(selectedKeys);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">SelectionKey</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectedKeys</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ensureOpen</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> publicSelectedKeys;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SelectorImpl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">SelectionKey</span><span style="color:#24292E;">&gt; selectedKeys;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">SelectionKey</span><span style="color:#24292E;">&gt; publicSelectedKeys; </span><span style="color:#6A737D;">// Removal allowed, but not addition</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SelectorImpl</span><span style="color:#24292E;">(SelectorProvider sp) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// selectedKeys 实际上就是 HashSet，多线程操作下线程不安全</span></span>
<span class="line"><span style="color:#24292E;">    selectedKeys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    publicSelectedKeys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Util.</span><span style="color:#6F42C1;">ungrowableSet</span><span style="color:#24292E;">(selectedKeys);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">SelectionKey</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectedKeys</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureOpen</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> publicSelectedKeys;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>…</p><br><h3 id="事件驱动" tabindex="-1">事件驱动 <a class="header-anchor" href="#事件驱动" aria-label="Permalink to &quot;事件驱动&quot;">​</a></h3><p>在 BIO 中，IO 读写需要经过一段时间的阻塞，等待获取到数据才返回。与 BIO 的关心返回数据不同，NIO 更关心的是是否有自己感兴趣的事件（有可读/写事件），有则进行事件操作（读/写），没有则返回 0，不会阻塞线程。</p><p>NIO 的主要事件有：读就绪、写就绪、有新连接到来。因此，使用 NIO 流程应该是：</p><p>1、注册感兴趣的事件（新连接/读/写），Java 中的表现为将 Channel 注册到 Selector 中；</p><p>2、等待事件到来。Selector 阻塞等待新事件，接收到新事件后保存到对应的集合（<em>Selected-Key Set</em>）。Java 中通过 Selector#select 可以感知到是否有新事件；</p><p>3、最后通过 Selector#selectedKeys 获取可以处理的事件集合并处理事件。</p><br><h3 id="基础使用" tabindex="-1">基础使用 <a class="header-anchor" href="#基础使用" aria-label="Permalink to &quot;基础使用&quot;">​</a></h3><p>创建一个基于 NIO 的服务器</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleServer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// server channel</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServerSocketChannel socketChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServerSocketChannel.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        socketChannel.</span><span style="color:#B392F0;">configureBlocking</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// set non-block</span></span>
<span class="line"><span style="color:#E1E4E8;">        Selector selector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Selector.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// open Selector</span></span>
<span class="line"><span style="color:#E1E4E8;">        SelectionKey selectionKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> socketChannel.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(selector, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, socketChannel); </span><span style="color:#6A737D;">// register channel</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置感兴趣的事件，服务器通道只能注册 SelectionKey.OP_ACCEPT 事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        selectionKey.</span><span style="color:#B392F0;">interestOps</span><span style="color:#E1E4E8;">(SelectionKey.OP_ACCEPT);</span></span>
<span class="line"><span style="color:#E1E4E8;">        socketChannel.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InetSocketAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8888</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// server channel 绑定端口</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// selector 开始轮询</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// select 方法会阻塞，直到有事件发生</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (selector.</span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 无事件发生</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            Set&lt;</span><span style="color:#F97583;">SelectionKey</span><span style="color:#E1E4E8;">&gt; keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selector.</span><span style="color:#B392F0;">selectedKeys</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            Iterator&lt;</span><span style="color:#F97583;">SelectionKey</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keys.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                SelectionKey key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// remove after get a key</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将已经处理事件从 selectedKeys 中移除，如果不移除，会一直在 selectedKeys 集合中，下一次循环会重复处理该事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                iterator.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果轮询到建立连接事件，注册到 selector 中</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key.</span><span style="color:#B392F0;">isAcceptable</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ServerSocketChannel serverChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ServerSocketChannel) key.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// get server channel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// get client channel</span></span>
<span class="line"><span style="color:#E1E4E8;">                    SocketChannel clientChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serverChannel.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    clientChannel.</span><span style="color:#B392F0;">configureBlocking</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span></span>
<span class="line"><span style="color:#E1E4E8;">                    SelectionKey clientSelectionKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientChannel.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(selector, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, clientChannel); </span><span style="color:#6A737D;">// register client channel</span></span>
<span class="line"><span style="color:#E1E4E8;">                    clientSelectionKey.</span><span style="color:#B392F0;">interestOps</span><span style="color:#E1E4E8;">(SelectionKey.OP_READ);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[acceptable] client connected&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    clientChannel.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ByteBuffer.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;connect success&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">())); </span><span style="color:#6A737D;">// 客户端连接成功</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[acceptable] server responded&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key.</span><span style="color:#B392F0;">isReadable</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 如果轮询到可读事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// get client channel</span></span>
<span class="line"><span style="color:#E1E4E8;">                    SocketChannel clientChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (SocketChannel) key.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// set client data to buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ByteBuffer buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// write into buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientChannel.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[readable] server receive byte length: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> len);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (len </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        buffer.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 将缓存区从写状态切换为读状态（实际上这个方法是读写模式互切换）</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[readable] server received: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Charset.</span><span style="color:#B392F0;">defaultCharset</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(buffer).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        clientChannel.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// server channel</span></span>
<span class="line"><span style="color:#24292E;">        ServerSocketChannel socketChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServerSocketChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        socketChannel.</span><span style="color:#6F42C1;">configureBlocking</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// set non-block</span></span>
<span class="line"><span style="color:#24292E;">        Selector selector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Selector.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// open Selector</span></span>
<span class="line"><span style="color:#24292E;">        SelectionKey selectionKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socketChannel.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(selector, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, socketChannel); </span><span style="color:#6A737D;">// register channel</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置感兴趣的事件，服务器通道只能注册 SelectionKey.OP_ACCEPT 事件</span></span>
<span class="line"><span style="color:#24292E;">        selectionKey.</span><span style="color:#6F42C1;">interestOps</span><span style="color:#24292E;">(SelectionKey.OP_ACCEPT);</span></span>
<span class="line"><span style="color:#24292E;">        socketChannel.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8888</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// server channel 绑定端口</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// selector 开始轮询</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// select 方法会阻塞，直到有事件发生</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (selector.</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 无事件发生</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            Set&lt;</span><span style="color:#D73A49;">SelectionKey</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selector.</span><span style="color:#6F42C1;">selectedKeys</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            Iterator&lt;</span><span style="color:#D73A49;">SelectionKey</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keys.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                SelectionKey key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// remove after get a key</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将已经处理事件从 selectedKeys 中移除，如果不移除，会一直在 selectedKeys 集合中，下一次循环会重复处理该事件</span></span>
<span class="line"><span style="color:#24292E;">                iterator.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果轮询到建立连接事件，注册到 selector 中</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key.</span><span style="color:#6F42C1;">isAcceptable</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    ServerSocketChannel serverChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ServerSocketChannel) key.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// get server channel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// get client channel</span></span>
<span class="line"><span style="color:#24292E;">                    SocketChannel clientChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverChannel.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    clientChannel.</span><span style="color:#6F42C1;">configureBlocking</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                  </span></span>
<span class="line"><span style="color:#24292E;">                    SelectionKey clientSelectionKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientChannel.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(selector, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, clientChannel); </span><span style="color:#6A737D;">// register client channel</span></span>
<span class="line"><span style="color:#24292E;">                    clientSelectionKey.</span><span style="color:#6F42C1;">interestOps</span><span style="color:#24292E;">(SelectionKey.OP_READ);</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[acceptable] client connected&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    clientChannel.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ByteBuffer.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;connect success&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">())); </span><span style="color:#6A737D;">// 客户端连接成功</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[acceptable] server responded&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key.</span><span style="color:#6F42C1;">isReadable</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 如果轮询到可读事件</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// get client channel</span></span>
<span class="line"><span style="color:#24292E;">                    SocketChannel clientChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SocketChannel) key.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// set client data to buffer</span></span>
<span class="line"><span style="color:#24292E;">                    ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// write into buffer</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[readable] server receive byte length: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> len);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 将缓存区从写状态切换为读状态（实际上这个方法是读写模式互切换）</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[readable] server received: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Charset.</span><span style="color:#6F42C1;">defaultCharset</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(buffer).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        clientChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>创建基于 NIO 的客户端</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SocketChannel clientChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SocketChannel.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        clientChannel.</span><span style="color:#B392F0;">configureBlocking</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// get selector</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (Selector selector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Selector.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            clientChannel.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InetSocketAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8888</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 连接服务器</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将客服端注册到 selector 上</span></span>
<span class="line"><span style="color:#E1E4E8;">            SelectionKey selectionKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientChannel.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(selector, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 设置感兴趣的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">            selectionKey.</span><span style="color:#B392F0;">interestOps</span><span style="color:#E1E4E8;">(SelectionKey.OP_CONNECT);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 开始轮询事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (selector.</span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 阻塞，直到有事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                Set&lt;</span><span style="color:#F97583;">SelectionKey</span><span style="color:#E1E4E8;">&gt; selectionKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selector.</span><span style="color:#B392F0;">selectedKeys</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                Iterator&lt;</span><span style="color:#F97583;">SelectionKey</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selectionKeys.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    SelectionKey key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    iterator.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// remove after get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key.</span><span style="color:#B392F0;">isConnectable</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 如果是连接成功事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (clientChannel.</span><span style="color:#B392F0;">finishConnect</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#6A737D;">// 注册读事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                            clientChannel.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="color:#E1E4E8;">                            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[connectable] read event register success&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                            clientChannel.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ByteBuffer.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is message from client&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key.</span><span style="color:#B392F0;">isReadable</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 如果是可读事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                        SocketChannel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (SocketChannel) key.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// allocate buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ByteBuffer buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[readable] client receive byte length: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> len);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] readByte </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[len];</span></span>
<span class="line"><span style="color:#E1E4E8;">                        buffer.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        buffer.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(readByte);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[readable] client received: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(readByte));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        SocketChannel clientChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SocketChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        clientChannel.</span><span style="color:#6F42C1;">configureBlocking</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// get selector</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (Selector selector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Selector.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            clientChannel.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8888</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 连接服务器</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将客服端注册到 selector 上</span></span>
<span class="line"><span style="color:#24292E;">            SelectionKey selectionKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientChannel.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(selector, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 设置感兴趣的事件</span></span>
<span class="line"><span style="color:#24292E;">            selectionKey.</span><span style="color:#6F42C1;">interestOps</span><span style="color:#24292E;">(SelectionKey.OP_CONNECT);</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 开始轮询事件</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (selector.</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 阻塞，直到有事件</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                Set&lt;</span><span style="color:#D73A49;">SelectionKey</span><span style="color:#24292E;">&gt; selectionKeys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selector.</span><span style="color:#6F42C1;">selectedKeys</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                Iterator&lt;</span><span style="color:#D73A49;">SelectionKey</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selectionKeys.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    SelectionKey key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    iterator.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// remove after get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key.</span><span style="color:#6F42C1;">isConnectable</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 如果是连接成功事件</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (clientChannel.</span><span style="color:#6F42C1;">finishConnect</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6A737D;">// 注册读事件</span></span>
<span class="line"><span style="color:#24292E;">                            clientChannel.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="color:#24292E;">                            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[connectable] read event register success&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                            clientChannel.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ByteBuffer.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is message from client&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key.</span><span style="color:#6F42C1;">isReadable</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 如果是可读事件</span></span>
<span class="line"><span style="color:#24292E;">                        SocketChannel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SocketChannel) key.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// allocate buffer</span></span>
<span class="line"><span style="color:#24292E;">                        ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[readable] client receive byte length: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> len);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] readByte </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[len];</span></span>
<span class="line"><span style="color:#24292E;">                        buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        buffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(readByte);</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[readable] client received: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(readByte));</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><br><h2 id="aio" tabindex="-1">AIO <a class="header-anchor" href="#aio" aria-label="Permalink to &quot;AIO&quot;">​</a></h2><blockquote><p>AIO（Asynchronous IO）是 Java NIO 的扩展，也称为 NIO.2，它是异步非阻塞的 IO 操作，相对于传统的 BIO（Blocking IO）和 NIO（Non-blocking IO）都具有更高的效率和可靠性。</p></blockquote><blockquote><p>AIO 采用事件驱动机制，应用程序通过操作系统注册 IO 操作，并在操作系统完成操作后，操作系统会通知应用程序进行后续操作，这样就可以避免阻塞和轮询的问题。相比较 BIO 和 NIO，AIO 更适合处理大量的连接请求和数据量大的情况，具有更高的吞吐量和并发能力，同时减少了 CPU 和内存的开销。</p></blockquote><blockquote><ul><li><p>BIO（Blocking IO）是传统的阻塞式 IO 操作，每个连接都需要独立的线程进行阻塞式的等待读写操作。</p></li><li><p>NIO（Non-blocking IO）则是基于事件驱动模型的 IO 操作，通过 Selector 机制实现单线程管理多个连接，并监听各个连接的状态，处理连接状态变化的事件。相比较 BIO，NIO 可以减少线程的开销，但是依然需要遍历连接进行轮询，效率并不是特别高。</p></li><li><p>而 AIO 利用操作系统异步 IO 支持，可以在连接数据准备好后异步通知应用程序进行后续操作，大大提高了效率和可靠性。</p></li></ul><p>在 Java 中，AIO 的实现主要是基于 Java NIO 中的 AsynchronousServerSocketChannel 和 AsynchronousSocketChannel，通过注册 IO 操作和实现 CompletionHandler 接口来实现异步 IO。</p></blockquote><br><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://tech.meituan.com/2016/11/04/nio.html" target="_blank" rel="noreferrer">https://tech.meituan.com/2016/11/04/nio.html</a></p>`,70),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{d as __pageData,h as default};

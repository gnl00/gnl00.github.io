import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.519d889f.js";const h=JSON.parse('{"title":"Redis 数据类型","description":"Redis 数据类型详解","frontmatter":{"description":"Redis 数据类型详解","tag":["Redis","NoSQL","数据库"]},"headers":[],"relativePath":"posts/db/Redis/Redis 数据类型.md","filePath":"posts/db/Redis/Redis 数据类型.md","lastUpdated":1699262313000}'),o={name:"posts/db/Redis/Redis 数据类型.md"},l=n(`<h1 id="redis-数据类型" tabindex="-1">Redis 数据类型 <a class="header-anchor" href="#redis-数据类型" aria-label="Permalink to &quot;Redis 数据类型&quot;">​</a></h1><h2 id="key" tabindex="-1">Key <a class="header-anchor" href="#key" aria-label="Permalink to &quot;Key&quot;">​</a></h2><blockquote><p>支持使用二进制和空字符串来作为 Key，但是空字符串 Key 只能有且只有一个</p></blockquote><blockquote><p>A few other rules about keys:</p><ul><li><p>太长的 Key 不推荐，不仅消耗更多的内存空间，进行键值比较的消费也更大。可以通过对键值进行哈希操作来解决</p></li><li><p>太短的 Key 不推荐，可读性不高，但是短的 Key 可以带来更小的消耗，这需要在开发中进行权衡</p></li><li><p>Try to stick with a schema. 推荐给 Key 定制约束，比如 &quot;user:1000&quot;，&quot;comment:4321:reply.to&quot; ，&quot;comment:4321:reply-to&quot; 等，可以使用 <code>.</code> 或 <code>-</code> 来分割复杂的字段</p></li><li><p>The maximum allowed key size is 512 MB. 键值允许的最大 size 为 512MB</p></li></ul></blockquote><h3 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-label="Permalink to &quot;操作&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">EXISTS</span></span>
<span class="line"><span style="color:#B392F0;">DEL</span></span>
<span class="line"><span style="color:#B392F0;">TYPE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">SET</span></span>
<span class="line"><span style="color:#B392F0;">MSET</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 批量操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">GET</span></span>
<span class="line"><span style="color:#B392F0;">MGET</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 批量操作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">EXISTS</span></span>
<span class="line"><span style="color:#6F42C1;">DEL</span></span>
<span class="line"><span style="color:#6F42C1;">TYPE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">SET</span></span>
<span class="line"><span style="color:#6F42C1;">MSET</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 批量操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">GET</span></span>
<span class="line"><span style="color:#6F42C1;">MGET</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 批量操作</span></span></code></pre></div><h3 id="过期时间" tabindex="-1">过期时间 <a class="header-anchor" href="#过期时间" aria-label="Permalink to &quot;过期时间&quot;">​</a></h3><blockquote><p>Key expiration lets you set a timeout for a key, also known as a &quot;time to live&quot;, or &quot;TTL&quot;. When the time to live elapses, the key is automatically destroyed.</p><p>A few important notes about key expiration:</p><ul><li>They can be set both using seconds or milliseconds precision.</li><li>However the expire time resolution is always 1 millisecond. 时间精度为 1 毫秒</li><li>Information about expires are replicated and persisted on disk, the time virtually passes when your Redis server remains stopped (this means that Redis saves the date at which a key will expire). 过期时间会备份并持久化到磁盘上，即使 Redis 服务器出错，也能保证设置有过期时间的数据信息完整</li></ul><p><code>expire key seconds [NX | XX | GT | LT]</code></p><p><code>PEXPIRE key milliseconds [NX | XX | GT | LT]</code></p></blockquote><blockquote><p><code>TTL</code> Returns the remaining time to live of a key that has a timeout.</p><p><code>TTL key</code></p></blockquote><blockquote><p><code>PTTL</code> returns it in milliseconds.</p><p><code>PTTL key</code></p></blockquote><h3 id="持久化" tabindex="-1">持久化 <a class="header-anchor" href="#持久化" aria-label="Permalink to &quot;持久化&quot;">​</a></h3><blockquote><p>Remove the existing timeout on <code>key</code>, turning the key from <em>volatile</em> (a key with an expire set) to <em>persistent</em> (a key that will never expire as no timeout is associated).</p><p><code>PERSIST key</code></p></blockquote><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><h3 id="原子操作" tabindex="-1">原子操作 <a class="header-anchor" href="#原子操作" aria-label="Permalink to &quot;原子操作&quot;">​</a></h3><p><code>INCR</code></p><blockquote><p>Increments the number stored at <code>key</code> by one. INCR is atomic, even multiple clients issuing INCR against the same key will never enter into a race condition</p><p>If the key does not exist, it is set to <code>0</code> before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.</p><p><strong>Note</strong>: this is a string operation because Redis does not have a dedicated integer type.</p><p><code>INCR key</code></p><p>Usage: Counter and Rate Limiter.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- Rate Limiter</span></span>
<span class="line"><span style="color:#E1E4E8;">FUNCTION </span><span style="color:#79B8FF;">LIMIT_API_CALL</span><span style="color:#E1E4E8;">(ip)</span></span>
<span class="line"><span style="color:#E1E4E8;">ts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CURRENT_UNIX_TIME</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">keyname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ip</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">ts</span></span>
<span class="line"><span style="color:#E1E4E8;">MULTI</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">INCR</span><span style="color:#E1E4E8;">(keyname)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">EXPIRE</span><span style="color:#E1E4E8;">(keyname,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">EXEC</span></span>
<span class="line"><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RESPONSE_OF_INCR_WITHIN_MULTI</span></span>
<span class="line"><span style="color:#E1E4E8;">IF current </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> THEN</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ERROR</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;too many requests per second&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">ELSE</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PERFORM_API_CALL</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">END</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- Rate Limiter</span></span>
<span class="line"><span style="color:#24292E;">FUNCTION </span><span style="color:#005CC5;">LIMIT_API_CALL</span><span style="color:#24292E;">(ip)</span></span>
<span class="line"><span style="color:#24292E;">ts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CURRENT_UNIX_TIME</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">keyname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ip</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">ts</span></span>
<span class="line"><span style="color:#24292E;">MULTI</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">INCR</span><span style="color:#24292E;">(keyname)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">EXPIRE</span><span style="color:#24292E;">(keyname,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">EXEC</span></span>
<span class="line"><span style="color:#24292E;">current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RESPONSE_OF_INCR_WITHIN_MULTI</span></span>
<span class="line"><span style="color:#24292E;">IF current </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> THEN</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ERROR</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;too many requests per second&quot;</span></span>
<span class="line"><span style="color:#24292E;">ELSE</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PERFORM_API_CALL</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">END</span></span></code></pre></div></blockquote><blockquote><p>类似的还有 <code>DECR</code></p></blockquote><p><code>INCRBY</code></p><blockquote><p>Increments the number stored at <code>key</code> by <code>increment</code>. If the key does not exist, it is set to <code>0</code> before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer.</p><p><code>INCRBY key increment</code></p></blockquote><blockquote><p>类似的还有 <code>DECRBY</code></p></blockquote><h2 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h2><blockquote><p>Redis lists are linked lists of string values. Redis lists are frequently used to:</p><ul><li>Implement stacks and queues.</li><li>Build queue management for background worker systems.</li></ul></blockquote><h2 id="zset" tabindex="-1">ZSet <a class="header-anchor" href="#zset" aria-label="Permalink to &quot;ZSet&quot;">​</a></h2><blockquote><p>Sorted sets are used to store ordered collections of data with associated scores</p></blockquote><h2 id="hyperloglog" tabindex="-1">HyperLogLog <a class="header-anchor" href="#hyperloglog" aria-label="Permalink to &quot;HyperLogLog&quot;">​</a></h2><blockquote><p>HyperLogLog 是一个可以估算集合基数的数据结构，作为一种概率数据结构，HyperLogLog 以准确性换取高效的空间利用。</p></blockquote><blockquote><p>The Redis HyperLogLog implementation uses up to 12 KB and provides a standard error of 0.81%.</p></blockquote><h3 id="样例" tabindex="-1">样例 <a class="header-anchor" href="#样例" aria-label="Permalink to &quot;样例&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># PFADD dailyCount:{date} userId</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> PFADD weekCount:{</span><span style="color:#B392F0;">userId}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">weekday</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> PFADD weekCount:001 1</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> PFADD weekCount:001 2</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> PFADD weekCount:001 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> PFCOUNT weekCount:001</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># PFADD dailyCount:{date} userId</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> PFADD weekCount:{</span><span style="color:#6F42C1;">userId}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">weekday</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> PFADD weekCount:001 1</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> PFADD weekCount:001 2</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> PFADD weekCount:001 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> PFCOUNT weekCount:001</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 3</span></span></code></pre></div><blockquote><p><a href="https://www.readfog.com/a/1664611911653756928" target="_blank" rel="noreferrer">HyperLogLog 使用場景</a></p></blockquote><h2 id="bitmaps" tabindex="-1">Bitmaps <a class="header-anchor" href="#bitmaps" aria-label="Permalink to &quot;Bitmaps&quot;">​</a></h2><blockquote><p>Bitmaps are used to store bit-level data</p><p>Redis bitmaps are an extension of the string data type that lets you treat a string like a bit vector. You can also perform bitwise operations on one or more strings. Some examples of bitmap use cases include:</p><ul><li>Efficient set representations for cases where the members of a set correspond to the integers 0-N.</li><li>Object permissions, where each bit represents a particular permission, similar to the way that file systems store permissions.</li></ul></blockquote><blockquote><p>如何区分 HyperLogLog 和 Bitmap 的使用场景？</p><p>HyperLogLog 可以统计用户对网站的访问情况，Bitmap 可以记录用户的签到等状态。看起来有些相似，但是可以这样子看：HyperLogLog 主要用来去重和统计信息，针对某一个数据进行统计；而 Bitmap 主要用来记录用户的行为信息，针对某一个操作进行记录。</p></blockquote>`,33),p=[l];function t(r,c,i,y,d,E){return e(),a("div",null,p)}const k=s(o,[["render",t]]);export{h as __pageData,k as default};

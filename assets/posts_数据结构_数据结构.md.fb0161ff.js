import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.519d889f.js";const p="/assets/image-20200412100643318.4d21c038.png",o="/assets/image-20200418171419607.4561005a.png",D=JSON.parse('{"title":"算法与数据结构","description":"算法与数据结构笔记","frontmatter":{"description":"算法与数据结构笔记","tag":["算法","数据结构"]},"headers":[],"relativePath":"posts/数据结构/数据结构.md","filePath":"posts/数据结构/数据结构.md","lastUpdated":1699262313000}'),e={name:"posts/数据结构/数据结构.md"},t=l('<h1 id="算法与数据结构" tabindex="-1">算法与数据结构 <a class="header-anchor" href="#算法与数据结构" aria-label="Permalink to &quot;算法与数据结构&quot;">​</a></h1><p><strong>线性结构</strong></p><p>线性结构作为最常用的数据结构，其特点时数据元素之间存在<strong>一对一的线性关系</strong></p><p>线性结构有两种不同的存储结构，即<strong>顺序存储和链式存储</strong>结构。</p><p>顺序存储的线性表称为<strong>顺序表</strong>【存放的<strong>地址连续</strong>，比如说<strong>数组</strong>】，<strong>顺序表中的存储元素是连续的</strong></p><p>链式存储的线性表称为<strong>链表</strong>【单链表，双向链表】，链表中的<strong>存储元素不一定是连续的</strong>，元素节点中存放数据元素以及相邻元素的地址信息。</p><p>线性结构常见的有：<strong>数组、队列、链表和栈</strong></p><p><strong>非线性结构</strong></p><p>非线性结构包括：<strong>二维数组</strong>、多维数组、<strong>广义表</strong>、<strong>树结构、图结构</strong></p><h2 id="线性结构" tabindex="-1">线性结构 <a class="header-anchor" href="#线性结构" aria-label="Permalink to &quot;线性结构&quot;">​</a></h2><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><hr><h4 id="稀疏数组" tabindex="-1">稀疏数组 <a class="header-anchor" href="#稀疏数组" aria-label="Permalink to &quot;稀疏数组&quot;">​</a></h4><p>Sparse Array</p><p>当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组</p><p><strong>稀疏数组的处理方式</strong></p><ol><li>记录数组一共有几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ol><p><strong>二维数组转稀疏数组</strong></p><ol><li>遍历原始二维数组，得到有效的数据个数s</li><li>根据s就可以创建稀疏数组</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] sparseArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[s</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] sparseArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[s</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span></code></pre></div><p>稀疏数组转二维数组</p><ol><li><p>先读取数组的第一行，根据第一行的数据，创建原始的二维数组</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] Arr2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[sparseArray[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]][sparseArray[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] Arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[sparseArray[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]][sparseArray[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]];</span></span></code></pre></div></li><li><p>再读取稀疏数组后几行数据，并赋值给原始的二维数组即可</p></li></ol><h3 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h3><hr><ol><li>链表是有序的列表。</li><li>链表是以节点的方式来存储的（链式存储）</li><li>每个节点包含data域【存储数据】，next域【指向下一个节点位置】</li><li>链表的各个节点不一定是连续存储</li><li>链表分带头结点和不带头节点的链表，根据实际需求来确定</li></ol><p><img src="'+p+'" alt="image-20200412100643318"></p><h4 id="单链表" tabindex="-1">单链表 <a class="header-anchor" href="#单链表" aria-label="Permalink to &quot;单链表&quot;">​</a></h4><h6 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h6><p><strong>添加（创建）</strong></p><ol><li>先创建一个head头节点。作用就是表示单链表的头</li><li>后面每添加一个节点就直接加入到链表的最后</li></ol><p><strong>遍历</strong></p><ul><li>通过一个辅助遍历，帮助白能力整个链表</li></ul><h4 id="双向链表" tabindex="-1">双向链表 <a class="header-anchor" href="#双向链表" aria-label="Permalink to &quot;双向链表&quot;">​</a></h4><p>head节点：不存放具体的数据，作用就是表示链表头</p><p>next：指向下一个节点位置</p><p>pre：指向前一个节点位置</p><h6 id="实现思路-1" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路-1" aria-label="Permalink to &quot;实现思路&quot;">​</a></h6><ul><li>遍历的方式和单链表一致，可以向前也可以向后</li><li>添加，默认添加到双向链表的最后位置 <ul><li>先找到双向链表最后的节点</li><li>temp.next = newNode</li><li>newNode.pre = temp</li></ul></li><li>修改操作和单链表一致</li><li><strong>删除</strong>，因为是双向链表，因此可以实现自我删除某个节点 <ul><li>直接找到要删除的节点【temp】</li><li>temp.pre.next = temp.next;</li><li>temp.next.pre = temp.pre;</li></ul></li></ul><p><strong>与单链表比较</strong></p><ol><li>单链表查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</li><li>单链表不能自我删除，需要靠辅助节点【总是需要 temp（待删除节点的前一个节点） 辅助】，双向链表可以自我删除。</li></ol><h5 id="单项环形链表解决约瑟夫问题" tabindex="-1">单项环形链表解决约瑟夫问题 <a class="header-anchor" href="#单项环形链表解决约瑟夫问题" aria-label="Permalink to &quot;单项环形链表解决约瑟夫问题&quot;">​</a></h5><p><img src="'+o+`" alt="image-20200418171419607"></p><h6 id="构建单向循环列表思路" tabindex="-1">构建单向循环列表思路 <a class="header-anchor" href="#构建单向循环列表思路" aria-label="Permalink to &quot;构建单向循环列表思路&quot;">​</a></h6><ol><li>先创建第一个节点，让first指向该节点，并形成环形。</li><li>之后当每创建一个新的节点，就把该节点加入到已有的环形链表中即可。</li></ol><h6 id="出圈思路" tabindex="-1">出圈思路 <a class="header-anchor" href="#出圈思路" aria-label="Permalink to &quot;出圈思路&quot;">​</a></h6><ol><li>创建一个辅助指针temp，事先指向环形链表的最后一个节点。</li><li>报数时，让first和temp同时移动m-1 次</li><li>这就可以将first 指向的节点出圈，没有被指向的节点将会被回收 <ol><li>first = first.next</li><li>temp.netxt = first</li></ol></li></ol><p><strong>遍历环形链表</strong></p><p>先让一个辅助指针（变量）指向first节点。</p><p>然后通过一个while循环遍历该环形链表即可，当curNode.next == first即为结束。</p><h3 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-label="Permalink to &quot;队列&quot;">​</a></h3><hr><p><strong>队列是一个有序列表</strong>，可以<strong>使用的数组或是链表来实现</strong>。</p><p>遵循<strong>先进先出</strong>的原则。即先入队的数据要先取出，后入队的数据后取出</p><p><strong>取数据是从队列的前部取，往队列中加入数据是往尾部加。</strong></p><p>因为队列的输出，输入是分别从队列的前后端来处理，因此需要两个变量front和rear分别记录队列前后端的下标。<strong>front会随数据的输出而改变，而rear随数据的输入而改变。</strong></p><p><img src="https://img2018.cnblogs.com/blog/1648163/201909/1648163-20190919085122774-376085378.png" alt="img"></p><h4 id="数组实现" tabindex="-1">数组实现 <a class="header-anchor" href="#数组实现" aria-label="Permalink to &quot;数组实现&quot;">​</a></h4><h5 id="数组模拟队列" tabindex="-1">数组模拟队列 <a class="header-anchor" href="#数组模拟队列" aria-label="Permalink to &quot;数组模拟队列&quot;">​</a></h5><h6 id="实现思路-2" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路-2" aria-label="Permalink to &quot;实现思路&quot;">​</a></h6><p><strong>入队</strong></p><p>将尾指针往后移，即 rear+1，当 front==rear 时队列为空</p><p>添加前需要判断队列是否已满，若尾指针小于队列的最大小标maxSize-1，则将数据存入rear所指的数组位置中，否则【队满】无法存入数据，rear == maxSize - 1 【队满】</p><p><strong>出队</strong></p><p>出队之前需要判断队列是否为空，当 front==rear 时队列为空</p><p>front是指向队列头的前一个位置，front+1 即为出队的元素位置。</p><h6 id="存在问题与解决思路" tabindex="-1">存在问题与解决思路 <a class="header-anchor" href="#存在问题与解决思路" aria-label="Permalink to &quot;存在问题与解决思路&quot;">​</a></h6><ol><li>目前数组上元素位置使用过一次就无法在使用【即使是已出队有空位的时候也无法使用】，没有达到复用的效果。因为指针指向的位置【无法逆向】，出队的位置总是浪费。</li><li>将队列改造成环形队列。方法：%【取模】</li></ol><h5 id="数组模拟环形队列" tabindex="-1">数组模拟环形队列 <a class="header-anchor" href="#数组模拟环形队列" aria-label="Permalink to &quot;数组模拟环形队列&quot;">​</a></h5><h6 id="实现思路-3" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路-3" aria-label="Permalink to &quot;实现思路&quot;">​</a></h6><ol><li>front的含义调整：<strong>front指向队列的第一个元素</strong>，即array[front]就是队列的第一个元素。<strong>front的初始值为0。</strong></li><li>rear的含义调整：<strong>rear指向队列的最后一个元素的后一个位置</strong>【因为希望空出一个空间做为约定】。<strong>rear的初始值为0。</strong></li><li>当队列满时，条件是 (rear+1) % maxSize == front 【队满】</li><li>当队列为空时，条件是 rear == front</li><li>队列中的有效数据个数 (rear + maxSize -front) % maxSize</li></ol><h3 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h3><hr><p><strong>栈是一个先入后出（FILO， First In Last Out）的有序列表</strong></p><p>栈是限制线性表中元素的插入和删除，只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一段，称为<strong>栈顶（Top）</strong>，另一端为固定的一端，称为<strong>栈底（Bottom）</strong>。</p><p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入栈的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除。</p><h5 id="实现栈的思路分析" tabindex="-1"><strong>实现栈的思路分析</strong> <a class="header-anchor" href="#实现栈的思路分析" aria-label="Permalink to &quot;**实现栈的思路分析**&quot;">​</a></h5><ol><li>使用一个数组来模拟栈</li><li>定义一个变量top来表示栈顶，初始化为-1</li><li><strong>入栈</strong>操作：当有数据加入到栈时，top++; stack[top] = data;</li><li><strong>出栈</strong>操作：int value = stack[top]; top--;</li></ol><h5 id="栈完成表达式计算思路分析" tabindex="-1"><strong>栈完成表达式计算思路分析</strong> <a class="header-anchor" href="#栈完成表达式计算思路分析" aria-label="Permalink to &quot;**栈完成表达式计算思路分析**&quot;">​</a></h5><ol><li>通过一个index索引来遍历表达式。</li><li>如果遍历到位置的是数字，就直接入数字栈</li><li>如果遍历到的位置是一个符号： <ol><li>如果发现当前符号栈为空，就直接入栈</li><li>如果符号栈中有操作符，则进行比较，如果<strong>当前的操作符的优先级小于或等于栈中的操作符</strong>，就需要从数栈中pop出两个数字，再从符号栈中pop出一个符号，进行运算，将得到的结果入数栈，将当前的操作符入符号栈；如果<strong>当前的操作符优先级大于栈中的操作符</strong>，就直接入符号栈。</li></ol></li><li>当表达式扫描完毕，就顺序从数栈和符号栈中pop出相应的数和符号，并计算结果。</li><li>最后在数栈中只有一个数字，即为表达式计算的结果。</li></ol><h5 id="前、中、后缀表达式" tabindex="-1"><strong>前、中、后缀表达式</strong> <a class="header-anchor" href="#前、中、后缀表达式" aria-label="Permalink to &quot;**前、中、后缀表达式**&quot;">​</a></h5><p>前缀</p><p>中缀 1 + ( ( 2 + 3 ) * 4 ) - 5</p><p>后缀 1 2 3 + 4 * + 5 -</p><h5 id="中缀表达式转后缀表达式" tabindex="-1"><strong>中缀表达式转后缀表达式</strong> <a class="header-anchor" href="#中缀表达式转后缀表达式" aria-label="Permalink to &quot;**中缀表达式转后缀表达式**&quot;">​</a></h5><ol><li>初始化两个栈，运算符栈s1和存储中间结果的栈s2</li><li>从左至右扫描中缀表达式</li><li>遇到操作数时，将其压入s2</li><li>遇到运算符时，比较其与s1栈顶运算符的优先级 <ol><li>如果s1为空，或栈顶运算符为左括号 “ ( ” ，则直接入栈</li><li>若优先级比栈顶运算符高，直接入栈</li><li>若优先级比栈顶运算符低或相等，将s1的栈顶运算符弹出并压入s2，再次转到 ( 4 -1 )与新栈顶运算符比较</li></ol></li><li>遇到括号时 <ol><li>如果是左括号，直接压入s1</li><li>如果是右括号，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</li></ol></li><li>重复步骤 2 - 5 ，直到表达式的最右边</li><li>将s1中剩余的运算符依次弹出，并压入s2</li><li>依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.rev.demo.datastructure.stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 逆波兰表达式（后缀表达式）计算器</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@author</span><span style="color:#6A737D;"> gnl</span></span>
<span class="line"><span style="color:#6A737D;"> * @create 2020-05-20 16:36</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReversePolandNotation</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 定义逆波兰表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// (3+4)*5-6 ==&gt; 34+5*6-</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 30+2*6-2 ==&gt; 30 2 6 * + 2 -</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 4*5-8+60+8/2 ==&gt; 4 5 * 8 - 60 + 8 2 / +</span></span>
<span class="line"><span style="color:#6A737D;">//        String suffixExpression = &quot;30 2 6 * + 2 -&quot;;</span></span>
<span class="line"><span style="color:#6A737D;">//        // 先将suffixExpression 放入 ArrayList 中</span></span>
<span class="line"><span style="color:#6A737D;">//        // 再使用 ArrayList 配合 Stack 完成计算</span></span>
<span class="line"><span style="color:#6A737D;">//        List&lt;String&gt; rpnList = getStringList(suffixExpression);</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(rpnList);</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">//        int res = cal(rpnList);</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;4 * 5 - 8 + 60 + 8 / 2&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1 + ( ( 2 + 3 ) * 4 ) - 5</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1 2 3 + 4 * + 5 -</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">infix2suffix</span><span style="color:#E1E4E8;">(str));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getStringList</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">expression</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] split </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> expression.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> split) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 完成对逆波兰表达式的计算</span></span>
<span class="line"><span style="color:#6A737D;">     * 从左到右扫描，将3 4 入栈，遇到+计算符，pop出3 4计算得到7，将7压入栈中</span></span>
<span class="line"><span style="color:#6A737D;">     * 将5入栈，遇到计算符*，pop出7，计算得到35，将35压入栈中</span></span>
<span class="line"><span style="color:#6A737D;">     * 将6入栈，遇到计算符-，pop出35，计算35-6，得到结果，将结果入栈</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cal</span><span style="color:#E1E4E8;">( List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;"> ){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Stack&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; stack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//  4*5-8+60+8/2 ==&gt; 4 5 * 8 - 60 + 8 2 / +</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 使用正则判断是否是数字</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;^-?</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+$&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">                stack.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 匹配到的是字符</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (s){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> num2;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> num1;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> num2;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> num1;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                stack.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> res);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 最后留在栈中的就是运算结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 中缀表达式转后缀</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">infix2suffix</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] split </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; infixList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> split) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            infixList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(infixList);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 符号栈</span></span>
<span class="line"><span style="color:#E1E4E8;">        Stack&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 存储中间结果栈</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Stack&lt;String&gt; s2 = new Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> infixList) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果是一个数</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;^-?</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+$&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">                s2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(s)){</span></span>
<span class="line"><span style="color:#E1E4E8;">                s1.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(s) ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 若为右括号，依次弹出s1的运算符放入s2，直到遇到左括号</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">())){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    s2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将左括号弹出，消除括号</span></span>
<span class="line"><span style="color:#E1E4E8;">                s1.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// s1为空，或者栈顶为（，或运算符优先级大于栈顶运算符，直接压栈</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( s1.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(s) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(s) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">()) ){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    s1.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// s1不为空，s的优先级小于等于s1的top</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ( </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">s1.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(s) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">())){</span></span>
<span class="line"><span style="color:#E1E4E8;">                        s2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    s1.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s1.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            s2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s2;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">op</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(op) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(op)){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(op) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(op) ){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.rev.demo.datastructure.stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 逆波兰表达式（后缀表达式）计算器</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@author</span><span style="color:#6A737D;"> gnl</span></span>
<span class="line"><span style="color:#6A737D;"> * @create 2020-05-20 16:36</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReversePolandNotation</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 定义逆波兰表达式</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// (3+4)*5-6 ==&gt; 34+5*6-</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 30+2*6-2 ==&gt; 30 2 6 * + 2 -</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4*5-8+60+8/2 ==&gt; 4 5 * 8 - 60 + 8 2 / +</span></span>
<span class="line"><span style="color:#6A737D;">//        String suffixExpression = &quot;30 2 6 * + 2 -&quot;;</span></span>
<span class="line"><span style="color:#6A737D;">//        // 先将suffixExpression 放入 ArrayList 中</span></span>
<span class="line"><span style="color:#6A737D;">//        // 再使用 ArrayList 配合 Stack 完成计算</span></span>
<span class="line"><span style="color:#6A737D;">//        List&lt;String&gt; rpnList = getStringList(suffixExpression);</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(rpnList);</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">//        int res = cal(rpnList);</span></span>
<span class="line"><span style="color:#6A737D;">//        System.out.println(res);</span></span>
<span class="line"><span style="color:#24292E;">        String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;4 * 5 - 8 + 60 + 8 / 2&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1 + ( ( 2 + 3 ) * 4 ) - 5</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1 2 3 + 4 * + 5 -</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">infix2suffix</span><span style="color:#24292E;">(str));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getStringList</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">expression</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] split </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> expression.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> split) {</span></span>
<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 完成对逆波兰表达式的计算</span></span>
<span class="line"><span style="color:#6A737D;">     * 从左到右扫描，将3 4 入栈，遇到+计算符，pop出3 4计算得到7，将7压入栈中</span></span>
<span class="line"><span style="color:#6A737D;">     * 将5入栈，遇到计算符*，pop出7，计算得到35，将35压入栈中</span></span>
<span class="line"><span style="color:#6A737D;">     * 将6入栈，遇到计算符-，pop出35，计算35-6，得到结果，将结果入栈</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cal</span><span style="color:#24292E;">( List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">list</span><span style="color:#24292E;"> ){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Stack&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//  4*5-8+60+8/2 ==&gt; 4 5 * 8 - 60 + 8 2 / +</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> list) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 使用正则判断是否是数字</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;^-?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+$&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">                stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 匹配到的是字符</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (s){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> num2;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> num1;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> num2;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> num1;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> res);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 最后留在栈中的就是运算结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 中缀表达式转后缀</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">infix2suffix</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">str</span><span style="color:#24292E;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] split </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; infixList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> split) {</span></span>
<span class="line"><span style="color:#24292E;">            infixList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(infixList);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 符号栈</span></span>
<span class="line"><span style="color:#24292E;">        Stack&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 存储中间结果栈</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Stack&lt;String&gt; s2 = new Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> infixList) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果是一个数</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;^-?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+$&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">                s2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(s)){</span></span>
<span class="line"><span style="color:#24292E;">                s1.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(s) ) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 若为右括号，依次弹出s1的运算符放入s2，直到遇到左括号</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">())){</span></span>
<span class="line"><span style="color:#24292E;">                    s2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将左括号弹出，消除括号</span></span>
<span class="line"><span style="color:#24292E;">                s1.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// s1为空，或者栈顶为（，或运算符优先级大于栈顶运算符，直接压栈</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( s1.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(s) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(s) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">()) ){</span></span>
<span class="line"><span style="color:#24292E;">                    s1.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// s1不为空，s的优先级小于等于s1的top</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ( </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">s1.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(s) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">())){</span></span>
<span class="line"><span style="color:#24292E;">                        s2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    s1.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s1.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            s2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s2;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">op</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(op) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(op)){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(op) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(op) ){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h3><hr><p><strong>递归需要遵守的重要规则</strong></p><ol><li>执行一次方法时，就会创建一个新的占空间</li><li>方法的局部变量是独立的，不会相互影响</li><li>如果方法中使用的是引用类型（例如数组），就会共享该引用类型的数据</li><li>递归方法必须有出口，否则就会出现StackOverFlow异常</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕</li></ol><h5 id="回溯" tabindex="-1">回溯 <a class="header-anchor" href="#回溯" aria-label="Permalink to &quot;回溯&quot;">​</a></h5><p><strong>八皇后问题思路</strong></p><ol><li><p>第一个皇后先放第一行第一列</p></li><li><p>第二个皇后放在第二行第一列、然后判断是否OK,如果不OK,继续放在第二列、第三列、依次把所有列都放完，找到一个合适</p></li><li><p>继续第三个皇后，还是第一列、第二列……直到第8个皇后也能放在一个不冲突的位置，算是找到了一个正确解</p></li><li><p>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到.</p></li><li><p>然后回头继续第一个皇后放第二列，后面继续循环执行1,2,3,4的步骤</p></li></ol><p><strong>说明</strong></p><p>​ 理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题</p><p>arr[8]={0,4,7,5,2,6,1,3}，对应arr下标表示第几行，即第几个皇后，arr[i]=val,val表示第i+1个皇后，放在第i+1行的第val+1列</p><p>| | | | | | | | 1 | | | | | | | | 1 | | | | | | | | 1 | | | | | | | | 1 | | | | | | | | 1 | | | | | | | | 1 | | | | | | | | 1 | | | | | | | | 1 | | | | | | | |</p><h3 id="排序算法" tabindex="-1">排序算法 <a class="header-anchor" href="#排序算法" aria-label="Permalink to &quot;排序算法&quot;">​</a></h3><hr><p>排序分类</p><p><strong>内部排序</strong></p><p>​ 使用内存。指将需要处理的所有数据都加载到内部存储器中进行排序</p><ol><li>插入排序 <ol><li>直接插入排序</li><li>希尔排序</li></ol></li><li>选择排序 <ol><li>简单选择排序</li><li>堆排序</li></ol></li><li>交换排序 <ol><li>冒泡排序</li><li>快速排序</li></ol></li><li>归并排序</li><li>基数排序（桶置法）</li></ol><p><strong>外部排序</strong></p><p>​ 使用内存和外存相结合。数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。</p>`,105),r=[t];function c(E,y,i,F,u,g){return n(),a("div",null,r)}const h=s(e,[["render",c]]);export{D as __pageData,h as default};

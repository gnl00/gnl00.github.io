import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.b41230ea.js";const l="/assets/mainarchi-9b036e7ff5133d050950f25838367a17.3dbf62a6.png",p="/assets/syncarchi-ebbd41e1afd6adf432792ee2d7a91748.50c3a87c.png",e="/assets/asyncarchi-e7ee18dd77aca472fb80bb2238d9528b.5efa8cac.png",t="/assets/p2pmode.d73dfec0.png",c="/assets/pubsub.b2bcf40d.png",r="/assets/archifortopic.09ba92ca.png",i="/assets/archiforqueue.688c3481.png",E="/assets/archiforqueue.688c3481.png",y="/assets/archiforproducer.1fc8b580.png",u="/assets/producer_topic.f979b2ad.png",h="/assets/archiforconsumergroup.30221190.png",d="/assets/archiforconsumer.5ef8e98f.png",k="/assets/archiforsubsciption.d41c18b7.png",q="/assets/subscription_diff_group.8aba81c3.png",b="/assets/subscription_one_group.692dba72.png",D=JSON.parse('{"title":"RocketMQ 领域模型","description":"RocketMQ 领域模型","frontmatter":{"description":"RocketMQ 领域模型","tag":["RocketMQ","MQ","中间件"]},"headers":[],"relativePath":"posts/mw/RocketMQ/RocketMQ Model/RocketMQ Model.md","filePath":"posts/mw/RocketMQ/RocketMQ Model/RocketMQ Model.md","lastUpdated":1700722361000}'),g={name:"posts/mw/RocketMQ/RocketMQ Model/RocketMQ Model.md"},F=o('<h1 id="rocketmq-领域模型" tabindex="-1">RocketMQ 领域模型 <a class="header-anchor" href="#rocketmq-领域模型" aria-label="Permalink to &quot;RocketMQ 领域模型&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p>RocketMQ 是一个分布式的中间件服务，采用异步通信模型和发布/订阅消息传输模型。</p></blockquote><br><h2 id="生产消费模型" tabindex="-1">生产消费模型 <a class="header-anchor" href="#生产消费模型" aria-label="Permalink to &quot;生产消费模型&quot;">​</a></h2><p><img src="'+l+'" alt="领域模型"></p><blockquote><p>Apache RocketMQ 中消息的生命周期主要分为消息生产、消息存储、消息消费这三部分。生产者生产消息并发送至 RocketMQ 服务端，消息被存储在服务端的主题中，消费者通过订阅主题消费消息。</p></blockquote><p><strong>Message Producer</strong></p><blockquote><p>消息生产者，用于产生消息的运行实体，一般集成于业务调用链路的上游。生产者是轻量级匿名无身份的。</p></blockquote><p><strong>Message Comsumer</strong></p><blockquote><p>消息消费者</p><ul><li><p>ConsumerGroup</p><p>消费者组，定义在 RocketMQ 的 publish/subscribe 模型中，集中管理底层的消费者。<strong>在同一个消费群组中的消费者彼此之间保持同样的消费逻辑</strong>，使用同样的配置，并一起消费由群组订阅的消息，以此来扩展群组消费能力。</p></li><li><p>Consumer</p><p>消费者是在业务调用中最下游的部分，一个消费者必须指定对应的消费群组。</p></li><li><p>Subscription</p><p>RocketMQ 中发布/订阅模型的配置集合，包括消息过滤，重试等。订阅中的配置除了过滤规则，全部都会进行持久化处理，无论 Broker 重启还是关闭都不会改变。</p></li></ul></blockquote><p><strong>Message Storage</strong></p><blockquote><ul><li><p>Topic</p><p>用于传输和存储消息。一个 Topic 包含多个消息队列。消息的存储和水平扩展实际是通过主题内的队列实现的。</p></li><li><p>MessageQueue</p><p>消息传输和存储的实际单元容器，类似 Kafka 中的 Partition。RocketMQ 基于无限队列结构，消息按顺序存储在队列中，消费者可从任意位置消费消息（流式消费）。</p></li><li><p>Message</p><p>RocketMQ 中数据传输的最小单元，Message 初始化并存储后不可修改。</p></li></ul></blockquote><br><h2 id="通信模型" tabindex="-1">通信模型 <a class="header-anchor" href="#通信模型" aria-label="Permalink to &quot;通信模型&quot;">​</a></h2><blockquote><p>根据分布式系统结构的概念，一个复杂的系统可以被拆分不同的独立模块。系统必须确保服务之间可以进行远程交流，有两种典型的交流方式：</p><ul><li>基于 RPC 的同步交流方式；</li><li>基于中间件的异步交流方式。</li></ul></blockquote><br><p><strong>基于 RPC 同步交流</strong></p><p><img src="'+p+'" alt="Synchronous invocation"></p><blockquote><p>远程系统之间进行直接交流，每个请求都是调用者直接发送到被调用方，被调用方立即将结果返回给调用者。RPC 也可以有异步非阻塞调用的调用方式，但本质上仍然是在指定时间内得到目标端的直接响应。</p></blockquote><br><p><strong>基于中间件异步交流</strong></p><p><img src="'+e+'" alt="Asynchronous invocation"></p><blockquote><p>在这个模式中，各个服务之间不以紧密耦合的方式连接，调用方需要将请求转换成异步事件或消息，然后发送到代理服务。只要消息发送完毕，调用就会被认为是完成了。代理服务会将消息分发到下游的被调用方服务，并确保消息最终被消费。代理服务这个角色就是一个消息中间件。</p></blockquote><blockquote><p>异步交互具有以下好处:</p><ul><li><p>更简单的系统拓扑，因为调用方和被调用方仅仅通过代理服务进行交流，不直接联系，这种结构更加易于维护和管理</p></li><li><p>上下游耦合性弱，上下游系统之间弱耦合，结构更灵活，由中间代理负责缓冲和异步恢复。 上下游系统间可以独立升级和变更，不会互相影响。</p></li><li><p>容量削峰填谷，基于消息的中间代理往往具备很强的流量缓冲和整形能力，业务流量高峰到来时不会击垮下游</p></li></ul></blockquote><br><h2 id="消息传输模型" tabindex="-1">消息传输模型 <a class="header-anchor" href="#消息传输模型" aria-label="Permalink to &quot;消息传输模型&quot;">​</a></h2><h3 id="点对点模型" tabindex="-1">点对点模型 <a class="header-anchor" href="#点对点模型" aria-label="Permalink to &quot;点对点模型&quot;">​</a></h3><p><img src="'+t+'" alt="点对点模型"></p><blockquote><p>点对点模型也叫队列模型，具有如下特点：</p><ul><li>消费匿名，消息上下游沟通的唯一的渠道就是队列，下游消费者从队列获取消息时无法声明身份</li><li>一对一通信，基于消费匿名特点，下游消费者即使有多个，都没有自己独立的身份，因此共享队列中的消息，每一条消息都只会被唯一一个消费者处理。因此点对点模型只能实现一对一通信</li></ul></blockquote><br><h3 id="发布订阅模型" tabindex="-1">发布订阅模型 <a class="header-anchor" href="#发布订阅模型" aria-label="Permalink to &quot;发布订阅模型&quot;">​</a></h3><p><img src="'+c+'" alt="发布订阅模型"></p><blockquote><p>发布订阅模型具有如下特点：</p><ul><li>消费独立，相比队列模型的匿名消费方式，发布订阅模型中消费者都会具备的身份，一般叫做订阅组（订阅关系），不同订阅组之间相互独立不会相互影响</li><li>一对多通信，基于独立身份的设计，同一个主题内的消息可以被多个订阅组处理，每个订阅组都可以拿到全量消息。因此发布订阅模型可以实现一对多通信</li></ul></blockquote><p><strong>两种传输模型对比</strong></p><blockquote><p>点对点模型和发布订阅模型各有优势，点对点模型更为简单，而发布订阅模型的扩展性更高。 RocketMQ 使用的传输模型为发布订阅模型，因此也具有发布订阅模型的特点。</p></blockquote><br><h2 id="topic" tabindex="-1">Topic <a class="header-anchor" href="#topic" aria-label="Permalink to &quot;Topic&quot;">​</a></h2><blockquote><p>Topic 是 RocketMQ 中消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息。</p><p>主题的作用主要如下：</p><ul><li><strong>定义数据的分类隔离</strong>，RocketMQ 建议将不同业务类型的数据拆分到不同的主题中管理，通过主题实现存储的隔离性和订阅隔离性；</li><li><strong>定义数据的身份和权限</strong>，RocketMQ 的消息本身是匿名无身份的，同一分类的消息使用相同的主题来做身份识别和权限管理。</li></ul></blockquote><h3 id="模型关系" tabindex="-1">模型关系 <a class="header-anchor" href="#模型关系" aria-label="Permalink to &quot;模型关系&quot;">​</a></h3><p><img src="'+r+`" alt="主题"></p><blockquote><p>Topic 是一个逻辑概念，并不是实际的消息容器。Topic 内部由多个 MessageQueue 组成，消息的存储和水平扩展能力最终是由消息队列实现的；并且针对 Topic 的所有约束和属性设置，最终也是通过主题内部的队列来实现。</p></blockquote><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li><p>名称，用于标识主题，Topic 名称集群内全局唯一；</p></li><li><p>消息队列（MessageQueue），多个消息队列组成一个 Topic，是消息存储的实际容器，一个 Topic 内包含一个或多个队列，消息实际存储在 Topic 的各队列内；</p></li><li><p><a href="#消息类型">消息类型</a>，每个 Topic 只支持一种消息类型</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TopicMessageType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">UNSPECIFIED</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;UNSPECIFIED&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 未指定</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NORMAL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NORMAL&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 普通消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">FIFO</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;FIFO&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// FIFO 消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DELAY</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DELAY&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 延迟消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">TRANSACTION</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TRANSACTION&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 事务消息</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicMessageType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">UNSPECIFIED</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UNSPECIFIED&quot;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 未指定</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NORMAL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NORMAL&quot;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 普通消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">FIFO</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;FIFO&quot;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// FIFO 消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DELAY</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DELAY&quot;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 延迟消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">TRANSACTION</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TRANSACTION&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 事务消息</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><h3 id="校验" tabindex="-1">校验 <a class="header-anchor" href="#校验" aria-label="Permalink to &quot;校验&quot;">​</a></h3><blockquote><p>RocketMQ 5.x 版本将消息类型拆分到主题中进行独立运维和处理，系统会对发送的消息类型和主题指定的消息类型进行强制校验，若校验不通过，则消息发送请求会被拒绝，并返回类型不匹配异常。</p><ul><li>消息类型必须一致发送的消息的类型，必须和目标主题定义的消息类型一致；</li><li>主题类型必须单一每个主题只支持一种消息类型，不允许将多种类型的消息发送到同一个主题中。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// v4.9.2</span></span>
<span class="line"><span style="color:#6A737D;">// org.apache.rocketmq.client</span></span>
<span class="line"><span style="color:#6A737D;">// Validators#checkTopic rocketmq-client</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkTopic</span><span style="color:#E1E4E8;">(String topic) throws MQClientException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (UtilAll.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(topic)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MQClientException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The specified topic is blank&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">regularExpressionMatcher</span><span style="color:#E1E4E8;">(topic, PATTERN)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MQClientException</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;The specified topic[%s] contains illegal characters, allowing only %s&quot;</span><span style="color:#E1E4E8;">, topic,</span></span>
<span class="line"><span style="color:#E1E4E8;">            VALID_PATTERN_STR), </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (topic.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> TOPIC_MAX_LENGTH) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MQClientException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The specified topic is longer than topic max length %d.&quot;</span><span style="color:#E1E4E8;">, TOPIC_MAX_LENGTH), </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// v5.0.0</span></span>
<span class="line"><span style="color:#6A737D;">// org.apache.rocketmq.common.topic</span></span>
<span class="line"><span style="color:#6A737D;">// TopicValidator#validateTopic rocketmq-client</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validateTopic</span><span style="color:#E1E4E8;">(String topic, RemotingCommand response) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (UtilAll.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(topic)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">setCode</span><span style="color:#E1E4E8;">(ResponseCode.SYSTEM_ERROR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">setRemark</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The specified topic is blank.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isTopicOrGroupIllegal</span><span style="color:#E1E4E8;">(topic)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">setCode</span><span style="color:#E1E4E8;">(ResponseCode.SYSTEM_ERROR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">setRemark</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The specified topic contains illegal characters, allowing only ^[%|a-zA-Z0-9_-]+$&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (topic.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> TOPIC_MAX_LENGTH) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">setCode</span><span style="color:#E1E4E8;">(ResponseCode.SYSTEM_ERROR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">setRemark</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The specified topic is longer than topic max length.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// v4.9.2</span></span>
<span class="line"><span style="color:#6A737D;">// org.apache.rocketmq.client</span></span>
<span class="line"><span style="color:#6A737D;">// Validators#checkTopic rocketmq-client</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkTopic</span><span style="color:#24292E;">(String topic) throws MQClientException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (UtilAll.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(topic)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MQClientException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The specified topic is blank&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">regularExpressionMatcher</span><span style="color:#24292E;">(topic, PATTERN)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MQClientException</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;The specified topic[%s] contains illegal characters, allowing only %s&quot;</span><span style="color:#24292E;">, topic,</span></span>
<span class="line"><span style="color:#24292E;">            VALID_PATTERN_STR), </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (topic.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> TOPIC_MAX_LENGTH) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MQClientException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The specified topic is longer than topic max length %d.&quot;</span><span style="color:#24292E;">, TOPIC_MAX_LENGTH), </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// v5.0.0</span></span>
<span class="line"><span style="color:#6A737D;">// org.apache.rocketmq.common.topic</span></span>
<span class="line"><span style="color:#6A737D;">// TopicValidator#validateTopic rocketmq-client</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validateTopic</span><span style="color:#24292E;">(String topic, RemotingCommand response) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (UtilAll.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(topic)) {</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">setCode</span><span style="color:#24292E;">(ResponseCode.SYSTEM_ERROR);</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">setRemark</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The specified topic is blank.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isTopicOrGroupIllegal</span><span style="color:#24292E;">(topic)) {</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">setCode</span><span style="color:#24292E;">(ResponseCode.SYSTEM_ERROR);</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">setRemark</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The specified topic contains illegal characters, allowing only ^[%|a-zA-Z0-9_-]+$&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (topic.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> TOPIC_MAX_LENGTH) {</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">setCode</span><span style="color:#24292E;">(ResponseCode.SYSTEM_ERROR);</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">setRemark</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The specified topic is longer than topic max length.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><blockquote><p>错误使用场景：</p><ul><li>发送的消息类型不匹配。例如，创建主题时消息类型定义为顺序消息，发送消息时发送事务消息到该主题中，此时消息发送请求会被拒绝，并返回类型不匹配异常；</li><li>单一消息主题混用。例如，创建主题时消息类型定义为普通消息，发送消息时同时发送普通消息和顺序消息到该主题中，则顺序消息的发送请求会被拒绝，并返回类型不匹配异常。</li></ul></blockquote><h3 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h3><p><strong>主题拆分</strong></p><blockquote><p>RocketMQ 的主题拆分设计应遵循大类统一原则，即将相同业务域内同一功能属性的消息划分为同一主题</p><ul><li><p>消息类型</p><p>不同类型的消息，如顺序消息和普通消息需要使用不同的主题；</p></li><li><p>消息业务</p><p>如果业务没有直接关联，比如，淘宝交易消息和盒马物流消息没有业务交集，需要使用不同的消息主题；同样是淘宝交易消息，女装类订单和男装类订单可以使用同一个订单。当然，如果业务量较大或其他子模块应用处理业务时需要进一步拆分订单类型，您也可以将男装订单和女装订单的消息拆分到两个主题中；</p></li><li><p>消息量级</p><p>数量级不同或时效性不同的业务消息建议使用不同的主题，例如某些业务消息量很小但是时效性要求很强，如果跟某些万亿级消息量的业务使用同一个主题，会增加消息的等待时长。</p></li></ul></blockquote><blockquote><p><strong>单一主题只收发一种类型消息，避免混用</strong>。RocketMQ 主题的设计原则为通过主题隔离业务，不同业务逻辑的消息建议使用不同的主题。同一业务逻辑消息的类型都相同，因此，对于指定主题，应该只收发同一种类型的消息。</p><p><strong>正确拆分示例：</strong> 线上商品购买场景下，订单交易如订单创建、支付、取消等流程消息使用一个主题，物流相关消息使用一个主题，积分管理相关消息使用一个主题。</p><p><strong>错误拆分示例：</strong></p><ul><li>拆分粒度过粗：会导致业务隔离性差，不利于独立运维和故障处理。例如，所有交易消息和物流消息都共用一个主题；</li><li>拆分粒度过细：会消耗大量主题资源，造成系统负载过重。例如，按照用户 ID 区分，每个用户 ID 使用一个主题。</li></ul></blockquote><p><strong>主题管理</strong></p><blockquote><p>RocketMQ 架构中，主题属于顶层资源和容器，拥有独立的权限管理、可观测性指标采集和监控等能力，创建和管理主题会占用一定的系统资源。因此，生产环境需要严格管理主题资源，请勿随意进行增、删、改、查操作。</p></blockquote><br><h2 id="messagequeue" tabindex="-1">MessageQueue <a class="header-anchor" href="#messagequeue" aria-label="Permalink to &quot;MessageQueue&quot;">​</a></h2><blockquote><p>RocketMQ 中消息存储和传输的实际容器，也是 RocketMQ 消息的<strong>最小存储单元</strong>。所有主题都是由多个队列组成，以此实现队列数量的水平拆分和队列内部的流式存储。</p></blockquote><blockquote><p>队列的主要作用如下：</p><ul><li><p>存储顺序性</p><p>队列天然具备顺序性，消息按照进入队列的顺序写入存储，同一队列间的消息天然存在顺序关系，队列头部为最早写入的消息，队列尾部为最新写入的消息。消息在队列中的位置和消息之间的顺序通过 Offset 进行标记管理。</p></li><li><p>流式操作语义</p><p>RocketMQ 基于队列的存储模型可确保消息从任意位点读取任意数量的消息，以此实现类似聚合读取、回溯读取等特性，这些特性是 RabbitMQ、ActiveMQ 等非队列存储模型不具备的。</p></li></ul></blockquote><h3 id="模型关系-1" tabindex="-1">模型关系 <a class="header-anchor" href="#模型关系-1" aria-label="Permalink to &quot;模型关系&quot;">​</a></h3><p><img src="`+i+'" alt="队列"></p><blockquote><p>RocketMQ 默认提供消息可靠存储机制，所有发送成功的消息都被持久化存储到队列中，配合生产者和消费者客户端的调用可实现至少投递一次的可靠性语义。</p><p>RocketMQ 队列模型和 Kafka 的分区（Partition）模型类似。在 RocketMQ 消息收发模型中，队列属于主题的一部分，虽然所有的消息资源以主题粒度管理，但实际的操作实现是面向队列。例如，生产者指定某个主题，向主题内发送消息，但实际消息发送到该主题下的某个队列中。</p><p>通过修改队列数量，可以实现横向的水平扩容和缩容。</p></blockquote><h3 id="队列名称" tabindex="-1">队列名称 <a class="header-anchor" href="#队列名称" aria-label="Permalink to &quot;队列名称&quot;">​</a></h3><blockquote><p>RocketMQ 服务端的不同版本中有如下差异：</p><ul><li>服务端 3.x/4.x 版本：队列名称由 <code>{主题名称}+{BrokerID}+{QueueID}</code> 三元组组成，和物理节点绑定；</li><li>服务端 5.x 版本：队列名称为一个集群分配的全局唯一的字符串组成，和物理节点解耦。</li></ul></blockquote><h3 id="读写权限" tabindex="-1">读写权限 <a class="header-anchor" href="#读写权限" aria-label="Permalink to &quot;读写权限&quot;">​</a></h3><blockquote><p>当前队列是否可以读写数据，由服务端定义：</p><ul><li>6：读写状态，当前队列允许读取消息和写入消息；</li><li>4：只读状态，当前队列只允许读取消息，不允许写入消息；</li><li>2：只写状态，当前队列只允许写入消息，不允许读取消息；</li><li>0：不可读写状态，当前队列不允许读取消息和写入消息。</li></ul></blockquote><br><h2 id="message" tabindex="-1">Message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;Message&quot;">​</a></h2><blockquote><p>消息是 RocketMQ 中的<strong>最小数据传输单元</strong>。生产者将业务数据的负载和拓展属性包装成消息发送到 RocketMQ 服务端，服务端按照相关语义将消息投递到消费端进行消费。</p></blockquote><blockquote><p>RocketMQ 的消息模型具备如下特点：</p><ul><li><p><strong>不可变</strong></p><p>消息本质上是已经产生并确定的事件，一旦产生后，消息的内容不会发生改变。即使经过传输链路的控制也不会发生变化，消费端获取的消息都是只读的消息视图；</p></li><li><p><strong>持久化</strong></p><p>RocketMQ 会默认对消息进行持久化，即将接收到的消息存储到 RocketMQ 服务端的存储文件中，保证消息的可回溯性和系统故障场景下的可恢复性。</p></li></ul></blockquote><h3 id="模型关系-2" tabindex="-1">模型关系 <a class="header-anchor" href="#模型关系-2" aria-label="Permalink to &quot;模型关系&quot;">​</a></h3><p><img src="'+E+`" alt="消息"></p><p><strong>生产消费流程</strong></p><ol><li>消息由生产者初始化并发送到 RocketMQ 服务端；</li><li>消息按照到达 RocketMQ 服务端的顺序存储到队列中；</li><li>消费者按照指定的订阅关系从 RocketMQ 服务端中获取消息并消费。</li></ol><h3 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h3><blockquote><p>常见属性如下</p><ul><li>主题，当前消息所属的主题的名称，集群内全局唯一；</li><li>消息类型，当前消息的类型；</li><li>消息队列，实际存储当前消息的队列；</li><li>消息 Offset，当前消息存储在队列中的位置；</li><li>消息 ID，消息的唯一标识，集群内每条消息的 ID 全局唯一；</li><li>消息 Payload，业务消息的实际报文数据</li></ul></blockquote><blockquote><p>消息大小不得超过其类型所对应的限制，否则消息会发送失败。系统默认的消息最大限制如下：</p><ul><li>普通和顺序消息：4 MB;</li><li>事务和定时或延时消息：64 KB</li></ul><p>如果单条消息过大容易造成网络传输层压力，不利于异常重试和流量控制。生产环境中如果需要传输超大负载，建议按照固定大小做报文拆分，或者结合文件存储等方法进行传输。</p></blockquote><h3 id="消息类型" tabindex="-1">消息类型 <a class="header-anchor" href="#消息类型" aria-label="Permalink to &quot;消息类型&quot;">​</a></h3><blockquote><p>RocketMQ 中有四种消息类型：</p><ul><li>普通消息；</li><li>FIFO 顺序消息，RocketMQ 通过消息 MessageGroup 标记一组特定消息的先后顺序，可以保证消息的投递顺序严格按照消息发送时的顺序；</li><li>Delay 延迟消息，通过指定延迟时间控制消息的投递时机，在延时间隔后才对消费者可见；</li><li>事务消息，RocketMQ 支持分布式事务消息，支持应用数据库更新和消息调用的事务一致性保障。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Normal_Msg</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Normal&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Order_Msg</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Order&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Trans_Msg_Half</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Trans&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Trans_msg_Commit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TransCommit&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Delay_Msg</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Delay&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Normal_Msg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Normal&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Order_Msg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Order&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Trans_Msg_Half</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Trans&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Trans_msg_Commit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TransCommit&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Delay_Msg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Delay&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><br><h2 id="producer" tabindex="-1">Producer <a class="header-anchor" href="#producer" aria-label="Permalink to &quot;Producer&quot;">​</a></h2><blockquote><p>生产者是 RocketMQ 系统中用来构建并传输消息到服务端的运行实体。生产者通常被集成在业务系统中，将业务消息按照要求封装成 RocketMQ 的 Message 并发送至服务端。</p><p>在消息生产者中，可以定义如下传输行为：</p><ul><li>发送方式：支持同步传输和异步传输；</li><li>批量发送：批量发送的消息条数或消息大小；</li><li>事务行为：对于事务消息需要生产者配合进行事务检查等行为保障事务的最终一致性。</li></ul></blockquote><h3 id="模型关系-3" tabindex="-1">模型关系 <a class="header-anchor" href="#模型关系-3" aria-label="Permalink to &quot;模型关系&quot;">​</a></h3><p><img src="`+y+'" alt="生产者"></p><blockquote><p>生产者和主题的关系为多对多关系，即同一个生产者可以向多个主题发送消息，对于平台类场景如果需要发送消息到多个主题，并不需要创建多个生产者；同一个主题也可以接收多个生产者的消息，以此可以实现生产者性能的水平扩展和容灾。</p></blockquote><p><img src="'+u+'" alt="生产者主题关联"></p><h3 id="属性-2" tabindex="-1">属性 <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性&quot;">​</a></h3><blockquote><ul><li>客户端 ID，生产者客户端的标识，用于区分不同的生产者，集群内全局唯一</li><li>通信/连接参数，NameServer 地址等</li><li>事务检查器</li><li>重试机制</li></ul></blockquote><h3 id="使用建议-1" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议-1" aria-label="Permalink to &quot;使用建议&quot;">​</a></h3><blockquote><p><strong>不建议单一进程创建大量生产者</strong></p><p>RocketMQ 的生产者和主题是多对多的关系，支持同一个生产者向多个主题发送消息。对于生产者的创建和初始化，建议遵循够用即可、最大化复用原则，如果有需要发送消息到多个主题的场景，无需为每个主题都创建一个生产者。</p><p><strong>不建议频繁创建和销毁生产者</strong></p><p>RocketMQ 的生产者是可以重复利用的底层资源，类似数据库的连接池。因此不需要在每次发送消息时动态创建生产者，且在发送结束后销毁生产者。这样频繁的创建销毁会在服务端产生大量短连接请求，严重影响系统性能。</p></blockquote><br><h2 id="consumergroup" tabindex="-1">ConsumerGroup <a class="header-anchor" href="#consumergroup" aria-label="Permalink to &quot;ConsumerGroup&quot;">​</a></h2><blockquote><p>消费者组是 RocketMQ 系统中承载多个消费行为一致的消费者的负载均衡分组。和消费者不同，消费者分组并不是运行实体，而是一个逻辑资源。在 RocketMQ 中，通过消费者分组内初始化多个消费者实现消费性能的水平扩展以及高可用容灾。</p></blockquote><h3 id="模型关系-4" tabindex="-1">模型关系 <a class="header-anchor" href="#模型关系-4" aria-label="Permalink to &quot;模型关系&quot;">​</a></h3><blockquote><p>在RocketMQ 领域模型中，消费者的管理通过消费者分组实现，同一分组内的消费者共同分摊消息进行消费。</p></blockquote><p><img src="'+h+'" alt="消费组"></p><h3 id="属性-3" tabindex="-1">属性 <a class="header-anchor" href="#属性-3" aria-label="Permalink to &quot;属性&quot;">​</a></h3><blockquote><ul><li><strong>名称</strong>，消费者分组的名称，用于区分不同的消费者分组，集群内全局唯一；</li><li><strong>投递顺序性</strong>，RocketMQ 向消费者投递消息的顺序。RocketMQ 提供顺序投递和并发投递两种方式，默认并发投递；</li><li><strong>消费重试策略</strong>，消费消息失败时，系统会按照重试策略，将指定消息投递给消费者重新消费；</li><li><strong>订阅关系</strong>，当前消费者分组关联的订阅关系集合。包括消费者订阅的主题，以及消息的过滤规则等。订阅关系由消费者动态注册到消费者分组中，RocketMQ 服务端会持久化订阅关系并匹配消息的消费进度。</li></ul></blockquote><br><h2 id="consumer" tabindex="-1">Consumer <a class="header-anchor" href="#consumer" aria-label="Permalink to &quot;Consumer&quot;">​</a></h2><blockquote><p>消费者是 RocketMQ 中用来接收并处理消息的运行实体。 消费者通常被集成在业务系统中，从 RocketMQ 服务端获取消息，并将消息转化成业务可理解的信息，供业务逻辑处理。</p><p>在消息消费端：</p><ul><li>消费者必须关联一个指定的消费者分组，以获取分组内统一定义的行为配置和消费状态；</li><li>消费者类型，RocketMQ 面向不同的开发场景提供了多样的消费者类型，包括 <em>PushConsumer</em> 类型、 <em>SimpleConsumer</em> 类型、<em>PullConsumer</em> 类型（仅推荐流处理场景使用）；</li><li>消费者本地运行配置，消费者根据不同的消费者类型，控制消费者客户端本地的运行配置。例如消费者客户端的线程数，消费并发度等，实现不同的传输效果。</li></ul></blockquote><h3 id="模型关系-5" tabindex="-1">模型关系 <a class="header-anchor" href="#模型关系-5" aria-label="Permalink to &quot;模型关系&quot;">​</a></h3><p><img src="'+d+'" alt="消费者"></p><h3 id="使用建议-2" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议-2" aria-label="Permalink to &quot;使用建议&quot;">​</a></h3><blockquote><p><strong>不建议在单一进程内创建大量消费者</strong></p><p>RocketMQ 的消费者在通信协议层面支持非阻塞传输模式，网络通信效率较高，并且支持多线程并发访问。因此，大部分场景下，单一进程内同一个消费分组只需要初始化唯一的一个消费者即可，开发过程中应避免以相同的配置初始化多个消费者。</p><p><strong>不建议频繁创建和销毁消费者</strong></p><p>RocketMQ 的消费者是可以重复利用的底层资源，类似数据库的连接池。因此不需要在每次接收消息时动态创建消费者，且在消费完成后销毁消费者。这样频繁地创建销毁会在服务端产生大量短连接请求，严重影响系统性能。</p></blockquote><br><h2 id="subscription" tabindex="-1">Subscription <a class="header-anchor" href="#subscription" aria-label="Permalink to &quot;Subscription&quot;">​</a></h2><blockquote><p>订阅关系是 RocketMQ 系统中消费者获取消息、处理消息的规则和状态配置。订阅关系由消费者分组动态注册到服务端系统，并在后续的消息传输中按照订阅关系定义的过滤规则进行消息匹配和消费进度维护。</p><p>通过配置订阅关系，可控制如下传输行为：</p><ul><li><p>消息过滤规则</p><p>用于控制消费者在消费消息时，选择主题内的哪些消息进行消费，设置消费过滤规则可以高效地过滤消费者需要的消息集合，灵活根据不同的业务场景设置不同的消息接收范围；</p></li><li><p>消费状态</p><p>RocketMQ 服务端默认提供订阅关系持久化的能力，即消费者分组在服务端注册订阅关系后，当消费者离线并再次上线后，可以获取离线前的消费进度并继续消费。</p></li></ul></blockquote><h3 id="模型关系-6" tabindex="-1">模型关系 <a class="header-anchor" href="#模型关系-6" aria-label="Permalink to &quot;模型关系&quot;">​</a></h3><p><img src="'+k+'" alt="订阅关系"></p><h3 id="订阅关系" tabindex="-1">订阅关系 <a class="header-anchor" href="#订阅关系" aria-label="Permalink to &quot;订阅关系&quot;">​</a></h3><blockquote><p>RocketMQ 的订阅关系按照消费者分组和主题粒度设计，一个订阅关系指的是指定某个消费者分组对于某个主题的订阅，判断原则如下：</p><ul><li><p>不同消费者分组对于同一个主题的订阅相互独立。如下图所示，Group A 和 Group B 分别以不同的订阅关系订阅了同一个 Topic A，这两个订阅关系互相独立，可以各自定义，不受影响；</p><p><img src="'+q+'" alt="订阅关系不同分组"></p></li><li><p>同一个消费者分组对于不同主题的订阅也相互独立。如下图所示，Group A 订阅了 Topic A 和 Topic B，对于 Group A 中的消费者来说，Topic A 为一个订阅关系，Topic B 为另外一个订阅关系，且这两个订阅关系互相独立，可以各自定义，不受影响。</p><p><img src="'+b+'" alt="订阅关系相同分组"></p></li></ul></blockquote><h3 id="属性-4" tabindex="-1">属性 <a class="header-anchor" href="#属性-4" aria-label="Permalink to &quot;属性&quot;">​</a></h3><blockquote><p><strong>主题类型</strong></p><p>消息过滤规则的类型。订阅关系中设置消息过滤规则后，系统将按照过滤规则匹配主题中的消息，只将符合条件的消息投递给消费者消费，实现消息的再次分类。</p><p>可以按照 Tag 字符串进行全文过滤匹配，也可以按照 SQL 语法对消息属性进行过滤匹配。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(String topic, String tags </span><span style="color:#6A737D;">/**...*/</span><span style="color:#E1E4E8;"> )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(String topic, String tags </span><span style="color:#6A737D;">/**...*/</span><span style="color:#24292E;"> )</span></span></code></pre></div><p><strong>Tag 滤表达式</strong></p><p>Only support or operation such as &quot;tag1 || tag2 || tag3&quot; if null or * expression, meaning subscribe all.</p></blockquote><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://rocketmq.apache.org/docs/" target="_blank" rel="noreferrer">Apache RocketMQ docs</a></p>',114),m=[F];function C(M,R,f,_,A,T){return a(),n("div",null,m)}const B=s(g,[["render",C]]);export{D as __pageData,B as default};

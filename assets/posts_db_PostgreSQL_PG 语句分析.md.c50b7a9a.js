import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.b41230ea.js";const d=JSON.parse('{"title":"PG 语句分析","description":"记录 PostgreSQL 使用过程中 SQL 语句分析的历程","frontmatter":{"description":"记录 PostgreSQL 使用过程中 SQL 语句分析的历程","tag":["PostgreSQL","数据库"]},"headers":[],"relativePath":"posts/db/PostgreSQL/PG 语句分析.md","filePath":"posts/db/PostgreSQL/PG 语句分析.md","lastUpdated":1700722361000}'),l={name:"posts/db/PostgreSQL/PG 语句分析.md"},o=p(`<h1 id="pg-语句分析" tabindex="-1">PG 语句分析 <a class="header-anchor" href="#pg-语句分析" aria-label="Permalink to &quot;PG 语句分析&quot;">​</a></h1><h2 id="为何不走索引" tabindex="-1">为何不走索引 <a class="header-anchor" href="#为何不走索引" aria-label="Permalink to &quot;为何不走索引&quot;">​</a></h2><div class="language-postgresql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">postgresql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">explain select * from public.truck_rt tk</span></span>
<span class="line"><span style="color:#e1e4e8;">    join public.truck_gps_rt gps on tk.time = gps.time</span></span>
<span class="line"><span style="color:#e1e4e8;">         where tk.time &gt;= &#39;2023-10-22&#39; and tk.time &lt; &#39;2023-11-23&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">explain select * from public.truck_rt tk</span></span>
<span class="line"><span style="color:#24292e;">    join public.truck_gps_rt gps on tk.time = gps.time</span></span>
<span class="line"><span style="color:#24292e;">         where tk.time &gt;= &#39;2023-10-22&#39; and tk.time &lt; &#39;2023-11-23&#39;;</span></span></code></pre></div><p>返回结果</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Nested</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Loop</span><span style="color:#E1E4E8;">  (cost=0.71..1322545.47 </span><span style="color:#9ECBFF;">rows=</span><span style="color:#79B8FF;">1759459022</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">width=</span><span style="color:#79B8FF;">154</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;"># 最外层是一个大循环</span></span>
<span class="line"><span style="color:#6A737D;"># 先查询 truck_gps_rt</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">-&gt;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Append</span><span style="color:#E1E4E8;">  (cost=0.29..6061.02 </span><span style="color:#9ECBFF;">rows=</span><span style="color:#79B8FF;">187898</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">width=</span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#6A737D;"># 从 _hyper_3_42_chunk 开始</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#6A737D;"># Index Scan 使用索引扫描 truck_gps_rt_time_idx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-&gt;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Scan</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Backward</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_hyper_3_42_chunk_truck_gps_rt_time_idx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_hyper_3_42_chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gps_1</span><span style="color:#E1E4E8;">  (cost=0.29..1192.88 </span><span style="color:#9ECBFF;">rows=</span><span style="color:#79B8FF;">33455</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">width=</span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">Index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Cond:</span><span style="color:#E1E4E8;"> ((</span><span style="color:#9ECBFF;">&quot;time&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-10-22 00:00:00+00&#39;::timestamp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zone</span><span style="color:#E1E4E8;">) AND (</span><span style="color:#B392F0;">&quot;time&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-11-23 00:00:00+00&#39;::timestamp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zone</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 到 _hyper_3_243_chunk 结束</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Seq Scan 顺序扫描</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-&gt;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Seq</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Scan</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_hyper_3_243_chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gps_20</span><span style="color:#E1E4E8;">  (cost=0.00..217.12 </span><span style="color:#9ECBFF;">rows=</span><span style="color:#79B8FF;">8475</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">width=</span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">Filter:</span><span style="color:#E1E4E8;"> ((</span><span style="color:#9ECBFF;">&quot;time&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-10-22 00:00:00+00&#39;::timestamp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zone</span><span style="color:#E1E4E8;">) AND (</span><span style="color:#B392F0;">&quot;time&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-11-23 00:00:00+00&#39;::timestamp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zone</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;"># 下面开始查询 truck_rt </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">-&gt;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Append</span><span style="color:#E1E4E8;">  (cost=0.42..6.81 </span><span style="color:#9ECBFF;">rows=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">width=</span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-&gt;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Scan</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_hyper_2_49_chunk_truck_rt_time_idx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_hyper_2_49_chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tk_1</span><span style="color:#E1E4E8;">  (cost=0.42..0.51 </span><span style="color:#9ECBFF;">rows=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">width=</span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Nested</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Loop</span><span style="color:#24292E;">  (cost=0.71..1322545.47 </span><span style="color:#032F62;">rows=</span><span style="color:#005CC5;">1759459022</span><span style="color:#24292E;"> </span><span style="color:#032F62;">width=</span><span style="color:#005CC5;">154</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 最外层是一个大循环</span></span>
<span class="line"><span style="color:#6A737D;"># 先查询 truck_gps_rt</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Append</span><span style="color:#24292E;">  (cost=0.29..6061.02 </span><span style="color:#032F62;">rows=</span><span style="color:#005CC5;">187898</span><span style="color:#24292E;"> </span><span style="color:#032F62;">width=</span><span style="color:#005CC5;">46</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6A737D;"># 从 _hyper_3_42_chunk 开始</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6A737D;"># Index Scan 使用索引扫描 truck_gps_rt_time_idx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Scan</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Backward</span><span style="color:#24292E;"> </span><span style="color:#032F62;">using</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_hyper_3_42_chunk_truck_gps_rt_time_idx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_hyper_3_42_chunk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gps_1</span><span style="color:#24292E;">  (cost=0.29..1192.88 </span><span style="color:#032F62;">rows=</span><span style="color:#005CC5;">33455</span><span style="color:#24292E;"> </span><span style="color:#032F62;">width=</span><span style="color:#005CC5;">46</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">Index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Cond:</span><span style="color:#24292E;"> ((</span><span style="color:#032F62;">&quot;time&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-10-22 00:00:00+00&#39;::timestamp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">time</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zone</span><span style="color:#24292E;">) AND (</span><span style="color:#6F42C1;">&quot;time&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-11-23 00:00:00+00&#39;::timestamp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">time</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zone</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 到 _hyper_3_243_chunk 结束</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Seq Scan 顺序扫描</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Seq</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Scan</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_hyper_3_243_chunk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gps_20</span><span style="color:#24292E;">  (cost=0.00..217.12 </span><span style="color:#032F62;">rows=</span><span style="color:#005CC5;">8475</span><span style="color:#24292E;"> </span><span style="color:#032F62;">width=</span><span style="color:#005CC5;">46</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">Filter:</span><span style="color:#24292E;"> ((</span><span style="color:#032F62;">&quot;time&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-10-22 00:00:00+00&#39;::timestamp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">time</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zone</span><span style="color:#24292E;">) AND (</span><span style="color:#6F42C1;">&quot;time&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-11-23 00:00:00+00&#39;::timestamp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">time</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zone</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;"># 下面开始查询 truck_rt </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Append</span><span style="color:#24292E;">  (cost=0.42..6.81 </span><span style="color:#032F62;">rows=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#032F62;">width=</span><span style="color:#005CC5;">108</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Scan</span><span style="color:#24292E;"> </span><span style="color:#032F62;">using</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_hyper_2_49_chunk_truck_rt_time_idx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_hyper_2_49_chunk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tk_1</span><span style="color:#24292E;">  (cost=0.42..0.51 </span><span style="color:#032F62;">rows=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">width=</span><span style="color:#005CC5;">108</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span></code></pre></div><p>可以看到，最外层是一个大循环，分别扫描语句中涉及到的表。多表查询时，先根据条件分别从各个表中筛选出合适的数据， 最后再将所有表的结果合并。</p><blockquote><p>目前使用的是 TimescaleDB 的超表，查询表中的数据时会根据超表的 chunk 来查询。当前的查询条件中 2023-10-22 被压缩在 _hyper_3_42_chunk 这块 chunk 中，所以从它开始，一直到 2023-11-23 的压缩 chunk _hyper_3_243_chunk 结束。</p></blockquote><p>从 explain 信息中可以看到 truck_gps_rt 表的时候没有用到索引，查询一下</p><div class="language-postgresql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">postgresql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">my_db=# select * from pg_indexes where tablename=&#39;truck_gps_rt&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;"> schemaname |  tablename   |       indexname       | tablespace |                                      indexdef</span></span>
<span class="line"><span style="color:#e1e4e8;">------------+--------------+-----------------------+------------+-------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;"> public     | truck_gps_rt | truck_gps_rt_time_idx |            | CREATE INDEX truck_gps_rt_time_idx ON public.truck_gps_rt USING btree (&quot;time&quot; DESC)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">my_db=# select * from pg_indexes where tablename=&#39;truck_gps_rt&#39;;</span></span>
<span class="line"><span style="color:#24292e;"> schemaname |  tablename   |       indexname       | tablespace |                                      indexdef</span></span>
<span class="line"><span style="color:#24292e;">------------+--------------+-----------------------+------------+-------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#24292e;"> public     | truck_gps_rt | truck_gps_rt_time_idx |            | CREATE INDEX truck_gps_rt_time_idx ON public.truck_gps_rt USING btree (&quot;time&quot; DESC)</span></span></code></pre></div><p>truck_rt 和 truck_gps_rt 都有着单列索引 time。有一个索引，但是没用上。为什么？回头看 SQL 语句</p><div class="language-postgresql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">postgresql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">select * from public.truck_rt tk</span></span>
<span class="line"><span style="color:#e1e4e8;">    join public.truck_gps_rt gps on tk.time = gps.time</span></span>
<span class="line"><span style="color:#e1e4e8;">         where tk.time &gt;= &#39;2023-10-22&#39; and tk.time &lt; &#39;2023-11-23&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select * from public.truck_rt tk</span></span>
<span class="line"><span style="color:#24292e;">    join public.truck_gps_rt gps on tk.time = gps.time</span></span>
<span class="line"><span style="color:#24292e;">         where tk.time &gt;= &#39;2023-10-22&#39; and tk.time &lt; &#39;2023-11-23&#39;;</span></span></code></pre></div><p>可能原因：</p><p>1、<s>使用了不等号 <code>&gt;=</code> 和 <code>&lt;</code></s></p><p>2、使用索引扫描的代价比顺序扫描的代价大</p><p>先看看第 1 点，为什么同样都有着不等号，如果是因为不等号的存在所以不走索引，那么 truck_rt 应该也不会走索引才对。但是 truck_rt 走索引，这里就矛盾了，排除掉 1。</p><p>接下来看第 2 点，因为 PG 没有像 MySQL 一样展示所有的 explain 情况给我们进行对比，第 2 点原因只是<strong>根据经验判断</strong>。</p><p>查询一下这两个表设计的数据量</p><div class="language-postgresql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">postgresql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">select count(*) from truck_rt where time &gt;= &#39;2023-10-22&#39; and time &lt; &#39;2023-10-23&#39;; -- 84118</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">select count(*) from truck_gps_rt where time &gt;= &#39;2023-10-22&#39; and time &lt; &#39;2023-10-23&#39;; -- 8413</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select count(*) from truck_rt where time &gt;= &#39;2023-10-22&#39; and time &lt; &#39;2023-10-23&#39;; -- 84118</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">select count(*) from truck_gps_rt where time &gt;= &#39;2023-10-22&#39; and time &lt; &#39;2023-10-23&#39;; -- 8413</span></span></code></pre></div><p>truck_rt 是 truck_gps_rt 的 10 倍。</p><p>所以 truck_gps_rt 不走索引其中一个可能的原因是数据量较少，使用全表扫描的代价反而比使用索引的代价低，所以没有走索引。</p>`,20),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{d as __pageData,u as default};
